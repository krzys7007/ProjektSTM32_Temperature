
PWM_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c6c  0800e2d0  0800e2d0  0001e2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef3c  0800ef3c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef3c  0800ef3c  0001ef3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef44  0800ef44  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef44  0800ef44  0001ef44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ef4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  200001e8  0800f134  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  0800f134  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b74d  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bae  00000000  00000000  0003b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  0003f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001292  00000000  00000000  00040d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b6ef  00000000  00000000  00041fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edde  00000000  00000000  0006d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107941  00000000  00000000  0008c49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bcc  00000000  00000000  00193de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e2b8 	.word	0x0800e2b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800e2b8 	.word	0x0800e2b8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295
 8000686:	f000 b9f3 	b.w	8000a70 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f885 	bl	80007a8 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f878 	bl	80007a8 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f867 	bl	80007a8 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f859 	bl	80007a8 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <BMP280_Read8+0x38>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	f107 030f 	add.w	r3, r7, #15
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	21ec      	movs	r1, #236	; 0xec
 8000a9c:	f003 fda6 	bl	80045ec <HAL_I2C_Mem_Read>
  return tmp;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000204 	.word	0x20000204

08000ab0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af04      	add	r7, sp, #16
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <BMP280_Read16+0x40>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	21ec      	movs	r1, #236	; 0xec
 8000ad4:	f003 fd8a 	bl	80045ec <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000ad8:	7b3b      	ldrb	r3, [r7, #12]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	7b7b      	ldrb	r3, [r7, #13]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000204 	.word	0x20000204

08000af4 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ffd5 	bl	8000ab0 <BMP280_Read16>
 8000b06:	4603      	mov	r3, r0
 8000b08:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	b29b      	uxth	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <BMP280_Write8+0x34>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	230a      	movs	r3, #10
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	21ec      	movs	r1, #236	; 0xec
 8000b50:	f003 fc38 	bl	80043c4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000204 	.word	0x20000204

08000b60 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <BMP280_Read24+0x40>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	230a      	movs	r3, #10
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2303      	movs	r3, #3
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2301      	movs	r3, #1
 8000b82:	21ec      	movs	r1, #236	; 0xec
 8000b84:	f003 fd32 	bl	80045ec <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8000b88:	7b3b      	ldrb	r3, [r7, #12]
 8000b8a:	041a      	lsls	r2, r3, #16
 8000b8c:	7b7b      	ldrb	r3, [r7, #13]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	4313      	orrs	r3, r2
 8000b92:	7bba      	ldrb	r2, [r7, #14]
 8000b94:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000204 	.word	0x20000204

08000ba4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	70fb      	strb	r3, [r7, #3]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	70bb      	strb	r3, [r7, #2]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8000bbe:	4a48      	ldr	r2, [pc, #288]	; (8000ce0 <BMP280_Init+0x13c>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8000bc4:	787b      	ldrb	r3, [r7, #1]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d901      	bls.n	8000bce <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8000bce:	4a45      	ldr	r2, [pc, #276]	; (8000ce4 <BMP280_Init+0x140>)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d101      	bne.n	8000bde <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b05      	cmp	r3, #5
 8000be2:	d901      	bls.n	8000be8 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8000be4:	2305      	movs	r3, #5
 8000be6:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8000be8:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <BMP280_Init+0x144>)
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8000bee:	78bb      	ldrb	r3, [r7, #2]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	d901      	bls.n	8000bf8 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8000bf8:	4a3c      	ldr	r2, [pc, #240]	; (8000cec <BMP280_Init+0x148>)
 8000bfa:	78bb      	ldrb	r3, [r7, #2]
 8000bfc:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8000bfe:	bf00      	nop
 8000c00:	20d0      	movs	r0, #208	; 0xd0
 8000c02:	f7ff ff37 	bl	8000a74 <BMP280_Read8>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b58      	cmp	r3, #88	; 0x58
 8000c0a:	d1f9      	bne.n	8000c00 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8000c0c:	2088      	movs	r0, #136	; 0x88
 8000c0e:	f7ff ff71 	bl	8000af4 <BMP280_Read16LE>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <BMP280_Init+0x14c>)
 8000c18:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8000c1a:	208a      	movs	r0, #138	; 0x8a
 8000c1c:	f7ff ff6a 	bl	8000af4 <BMP280_Read16LE>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <BMP280_Init+0x150>)
 8000c26:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8000c28:	208c      	movs	r0, #140	; 0x8c
 8000c2a:	f7ff ff63 	bl	8000af4 <BMP280_Read16LE>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <BMP280_Init+0x154>)
 8000c34:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8000c36:	208e      	movs	r0, #142	; 0x8e
 8000c38:	f7ff ff5c 	bl	8000af4 <BMP280_Read16LE>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <BMP280_Init+0x158>)
 8000c42:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8000c44:	2090      	movs	r0, #144	; 0x90
 8000c46:	f7ff ff55 	bl	8000af4 <BMP280_Read16LE>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <BMP280_Init+0x15c>)
 8000c50:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8000c52:	2092      	movs	r0, #146	; 0x92
 8000c54:	f7ff ff4e 	bl	8000af4 <BMP280_Read16LE>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <BMP280_Init+0x160>)
 8000c5e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8000c60:	2094      	movs	r0, #148	; 0x94
 8000c62:	f7ff ff47 	bl	8000af4 <BMP280_Read16LE>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <BMP280_Init+0x164>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8000c6e:	2096      	movs	r0, #150	; 0x96
 8000c70:	f7ff ff40 	bl	8000af4 <BMP280_Read16LE>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <BMP280_Init+0x168>)
 8000c7a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8000c7c:	2098      	movs	r0, #152	; 0x98
 8000c7e:	f7ff ff39 	bl	8000af4 <BMP280_Read16LE>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <BMP280_Init+0x16c>)
 8000c88:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8000c8a:	209a      	movs	r0, #154	; 0x9a
 8000c8c:	f7ff ff32 	bl	8000af4 <BMP280_Read16LE>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <BMP280_Init+0x170>)
 8000c96:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8000c98:	209c      	movs	r0, #156	; 0x9c
 8000c9a:	f7ff ff2b 	bl	8000af4 <BMP280_Read16LE>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <BMP280_Init+0x174>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8000ca6:	209e      	movs	r0, #158	; 0x9e
 8000ca8:	f7ff ff24 	bl	8000af4 <BMP280_Read16LE>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <BMP280_Init+0x178>)
 8000cb2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	b25a      	sxtb	r2, r3
 8000cba:	78bb      	ldrb	r3, [r7, #2]
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25a      	sxtb	r2, r3
 8000cc4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	20f4      	movs	r0, #244	; 0xf4
 8000cd2:	f7ff ff29 	bl	8000b28 <BMP280_Write8>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000204 	.word	0x20000204
 8000ce4:	2000020a 	.word	0x2000020a
 8000ce8:	20000208 	.word	0x20000208
 8000cec:	20000209 	.word	0x20000209
 8000cf0:	20000220 	.word	0x20000220
 8000cf4:	2000020c 	.word	0x2000020c
 8000cf8:	2000020e 	.word	0x2000020e
 8000cfc:	20000222 	.word	0x20000222
 8000d00:	20000210 	.word	0x20000210
 8000d04:	20000212 	.word	0x20000212
 8000d08:	20000214 	.word	0x20000214
 8000d0c:	20000216 	.word	0x20000216
 8000d10:	20000218 	.word	0x20000218
 8000d14:	2000021a 	.word	0x2000021a
 8000d18:	2000021c 	.word	0x2000021c
 8000d1c:	2000021e 	.word	0x2000021e

08000d20 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <BMP280_ReadTemperature+0xfc>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d16d      	bne.n	8000e0a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8000d2e:	20f4      	movs	r0, #244	; 0xf4
 8000d30:	f7ff fea0 	bl	8000a74 <BMP280_Read8>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	20f4      	movs	r0, #244	; 0xf4
 8000d4e:	f7ff feeb 	bl	8000b28 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8000d52:	20f4      	movs	r0, #244	; 0xf4
 8000d54:	f7ff fe8e 	bl	8000a74 <BMP280_Read8>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8000d5c:	7dbb      	ldrb	r3, [r7, #22]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8000d64:	7dbb      	ldrb	r3, [r7, #22]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d14f      	bne.n	8000e0a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8000d6a:	20f4      	movs	r0, #244	; 0xf4
 8000d6c:	f7ff fe82 	bl	8000a74 <BMP280_Read8>
 8000d70:	4603      	mov	r3, r0
 8000d72:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8000d74:	7dbb      	ldrb	r3, [r7, #22]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8000d7c:	7dbb      	ldrb	r3, [r7, #22]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8000d82:	e7f2      	b.n	8000d6a <BMP280_ReadTemperature+0x4a>
				  break;
 8000d84:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8000d86:	20fa      	movs	r0, #250	; 0xfa
 8000d88:	f7ff feea 	bl	8000b60 <BMP280_Read24>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	111b      	asrs	r3, r3, #4
 8000d94:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	10da      	asrs	r2, r3, #3
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <BMP280_ReadTemperature+0x100>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8000da2:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <BMP280_ReadTemperature+0x104>)
 8000da4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	12db      	asrs	r3, r3, #11
 8000dae:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	111b      	asrs	r3, r3, #4
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <BMP280_ReadTemperature+0x100>)
 8000db6:	8812      	ldrh	r2, [r2, #0]
 8000db8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	1112      	asrs	r2, r2, #4
 8000dbe:	4918      	ldr	r1, [pc, #96]	; (8000e20 <BMP280_ReadTemperature+0x100>)
 8000dc0:	8809      	ldrh	r1, [r1, #0]
 8000dc2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000dc8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <BMP280_ReadTemperature+0x108>)
 8000dcc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000dd4:	139b      	asrs	r3, r3, #14
 8000dd6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <BMP280_ReadTemperature+0x10c>)
 8000de0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <BMP280_ReadTemperature+0x10c>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	3380      	adds	r3, #128	; 0x80
 8000dee:	121b      	asrs	r3, r3, #8
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df8:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8000dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e00:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000e30 <BMP280_ReadTemperature+0x110>
 8000e04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e08:	e001      	b.n	8000e0e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8000e0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000e34 <BMP280_ReadTemperature+0x114>
}
 8000e0e:	eef0 7a47 	vmov.f32	s15, s14
 8000e12:	eeb0 0a67 	vmov.f32	s0, s15
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000020a 	.word	0x2000020a
 8000e20:	20000220 	.word	0x20000220
 8000e24:	2000020c 	.word	0x2000020c
 8000e28:	2000020e 	.word	0x2000020e
 8000e2c:	20000224 	.word	0x20000224
 8000e30:	42c80000 	.word	0x42c80000
 8000e34:	c2c60000 	.word	0xc2c60000

08000e38 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8000e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e3c:	b0cc      	sub	sp, #304	; 0x130
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000e44:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8000e48:	f7ff ff6a 	bl	8000d20 <BMP280_ReadTemperature>
 8000e4c:	eef0 7a40 	vmov.f32	s15, s0
 8000e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e54:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8000e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001130 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8000e64:	eef4 7a47 	vcmp.f32	s15, s14
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	d101      	bne.n	8000e72 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8000e6e:	23ff      	movs	r3, #255	; 0xff
 8000e70:	e2bf      	b.n	80013f2 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8000e72:	20f7      	movs	r0, #247	; 0xf7
 8000e74:	f7ff fe74 	bl	8000b60 <BMP280_Read24>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8000e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e82:	111b      	asrs	r3, r3, #4
 8000e84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8000e88:	4baa      	ldr	r3, [pc, #680]	; (8001134 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	17da      	asrs	r2, r3, #31
 8000e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e92:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000e96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000eae:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8000eb2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000eb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000eba:	fb03 f102 	mul.w	r1, r3, r2
 8000ebe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ec2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	18ca      	adds	r2, r1, r3
 8000ecc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ed0:	fba3 4503 	umull	r4, r5, r3, r3
 8000ed4:	1953      	adds	r3, r2, r5
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	4b97      	ldr	r3, [pc, #604]	; (8001138 <BMP280_ReadTemperatureAndPressure+0x300>)
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	17da      	asrs	r2, r3, #31
 8000ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000ee6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000eea:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	fb03 f205 	mul.w	r2, r3, r5
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	fb04 f303 	mul.w	r3, r4, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	4602      	mov	r2, r0
 8000efe:	fba4 8902 	umull	r8, r9, r4, r2
 8000f02:	444b      	add	r3, r9
 8000f04:	4699      	mov	r9, r3
 8000f06:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000f0a:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8000f0e:	4b8b      	ldr	r3, [pc, #556]	; (800113c <BMP280_ReadTemperatureAndPressure+0x304>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	17da      	asrs	r2, r3, #31
 8000f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f24:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8000f28:	462a      	mov	r2, r5
 8000f2a:	fb02 f203 	mul.w	r2, r2, r3
 8000f2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f32:	4621      	mov	r1, r4
 8000f34:	fb01 f303 	mul.w	r3, r1, r3
 8000f38:	441a      	add	r2, r3
 8000f3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f3e:	4621      	mov	r1, r4
 8000f40:	fba3 ab01 	umull	sl, fp, r3, r1
 8000f44:	eb02 030b 	add.w	r3, r2, fp
 8000f48:	469b      	mov	fp, r3
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	f04f 0100 	mov.w	r1, #0
 8000f52:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000f56:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000f5a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000f5e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000f62:	1814      	adds	r4, r2, r0
 8000f64:	643c      	str	r4, [r7, #64]	; 0x40
 8000f66:	414b      	adcs	r3, r1
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
 8000f6a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f6e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8000f72:	4b73      	ldr	r3, [pc, #460]	; (8001140 <BMP280_ReadTemperatureAndPressure+0x308>)
 8000f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	17da      	asrs	r2, r3, #31
 8000f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f80:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000f84:	f04f 0000 	mov.w	r0, #0
 8000f88:	f04f 0100 	mov.w	r1, #0
 8000f8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f90:	00d9      	lsls	r1, r3, #3
 8000f92:	2000      	movs	r0, #0
 8000f94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000f98:	1814      	adds	r4, r2, r0
 8000f9a:	63bc      	str	r4, [r7, #56]	; 0x38
 8000f9c:	414b      	adcs	r3, r1
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fa0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000fa4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000fa8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fb0:	fb03 f102 	mul.w	r1, r3, r2
 8000fb4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	18ca      	adds	r2, r1, r3
 8000fc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fc6:	fba3 1303 	umull	r1, r3, r3, r3
 8000fca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fce:	460b      	mov	r3, r1
 8000fd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fd8:	18d3      	adds	r3, r2, r3
 8000fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fde:	4b59      	ldr	r3, [pc, #356]	; (8001144 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	17da      	asrs	r2, r3, #31
 8000fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000fec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000ff0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000ff4:	462b      	mov	r3, r5
 8000ff6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	fb02 f203 	mul.w	r2, r2, r3
 8001000:	464b      	mov	r3, r9
 8001002:	4621      	mov	r1, r4
 8001004:	fb01 f303 	mul.w	r3, r1, r3
 8001008:	4413      	add	r3, r2
 800100a:	4622      	mov	r2, r4
 800100c:	4641      	mov	r1, r8
 800100e:	fba2 1201 	umull	r1, r2, r2, r1
 8001012:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001016:	460a      	mov	r2, r1
 8001018:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800101c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001020:	4413      	add	r3, r2
 8001022:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	f04f 0100 	mov.w	r1, #0
 800102e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001032:	4623      	mov	r3, r4
 8001034:	0a18      	lsrs	r0, r3, #8
 8001036:	462b      	mov	r3, r5
 8001038:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800103c:	462b      	mov	r3, r5
 800103e:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <BMP280_ReadTemperatureAndPressure+0x310>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	b21b      	sxth	r3, r3
 8001048:	17da      	asrs	r2, r3, #31
 800104a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800104e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001052:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800105a:	464a      	mov	r2, r9
 800105c:	fb02 f203 	mul.w	r2, r2, r3
 8001060:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001064:	4644      	mov	r4, r8
 8001066:	fb04 f303 	mul.w	r3, r4, r3
 800106a:	441a      	add	r2, r3
 800106c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001070:	4644      	mov	r4, r8
 8001072:	fba3 4304 	umull	r4, r3, r3, r4
 8001076:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800107a:	4623      	mov	r3, r4
 800107c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001096:	464c      	mov	r4, r9
 8001098:	0323      	lsls	r3, r4, #12
 800109a:	4644      	mov	r4, r8
 800109c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010a0:	4644      	mov	r4, r8
 80010a2:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80010a4:	1884      	adds	r4, r0, r2
 80010a6:	633c      	str	r4, [r7, #48]	; 0x30
 80010a8:	eb41 0303 	adc.w	r3, r1, r3
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
 80010ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010b2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80010b6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80010ba:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80010be:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80010c2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <BMP280_ReadTemperatureAndPressure+0x314>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2200      	movs	r2, #0
 80010ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80010d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80010d6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80010da:	462b      	mov	r3, r5
 80010dc:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80010e0:	4642      	mov	r2, r8
 80010e2:	fb02 f203 	mul.w	r2, r2, r3
 80010e6:	464b      	mov	r3, r9
 80010e8:	4621      	mov	r1, r4
 80010ea:	fb01 f303 	mul.w	r3, r1, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	4622      	mov	r2, r4
 80010f2:	4641      	mov	r1, r8
 80010f4:	fba2 1201 	umull	r1, r2, r2, r1
 80010f8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80010fc:	460a      	mov	r2, r1
 80010fe:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001102:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001106:	4413      	add	r3, r2
 8001108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001118:	4629      	mov	r1, r5
 800111a:	104a      	asrs	r2, r1, #1
 800111c:	4629      	mov	r1, r5
 800111e:	17cb      	asrs	r3, r1, #31
 8001120:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001124:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001128:	4313      	orrs	r3, r2
 800112a:	d111      	bne.n	8001150 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 800112c:	2300      	movs	r3, #0
 800112e:	e160      	b.n	80013f2 <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001130:	c2c60000 	.word	0xc2c60000
 8001134:	20000224 	.word	0x20000224
 8001138:	20000218 	.word	0x20000218
 800113c:	20000216 	.word	0x20000216
 8001140:	20000214 	.word	0x20000214
 8001144:	20000212 	.word	0x20000212
 8001148:	20000210 	.word	0x20000210
 800114c:	20000222 	.word	0x20000222
	  }
	  p = 1048576 - adc_P;
 8001150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001154:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001158:	17da      	asrs	r2, r3, #31
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
 800115c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800115e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001162:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800116a:	105b      	asrs	r3, r3, #1
 800116c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001170:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001174:	07db      	lsls	r3, r3, #31
 8001176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800117a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800117e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001182:	4621      	mov	r1, r4
 8001184:	1a89      	subs	r1, r1, r2
 8001186:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800118a:	4629      	mov	r1, r5
 800118c:	eb61 0303 	sbc.w	r3, r1, r3
 8001190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001194:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001198:	4622      	mov	r2, r4
 800119a:	462b      	mov	r3, r5
 800119c:	1891      	adds	r1, r2, r2
 800119e:	6239      	str	r1, [r7, #32]
 80011a0:	415b      	adcs	r3, r3
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
 80011a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011a8:	4621      	mov	r1, r4
 80011aa:	1851      	adds	r1, r2, r1
 80011ac:	61b9      	str	r1, [r7, #24]
 80011ae:	4629      	mov	r1, r5
 80011b0:	414b      	adcs	r3, r1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c0:	4649      	mov	r1, r9
 80011c2:	018b      	lsls	r3, r1, #6
 80011c4:	4641      	mov	r1, r8
 80011c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011ca:	4641      	mov	r1, r8
 80011cc:	018a      	lsls	r2, r1, #6
 80011ce:	4641      	mov	r1, r8
 80011d0:	1889      	adds	r1, r1, r2
 80011d2:	6139      	str	r1, [r7, #16]
 80011d4:	4649      	mov	r1, r9
 80011d6:	eb43 0101 	adc.w	r1, r3, r1
 80011da:	6179      	str	r1, [r7, #20]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011e8:	4649      	mov	r1, r9
 80011ea:	008b      	lsls	r3, r1, #2
 80011ec:	4641      	mov	r1, r8
 80011ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011f2:	4641      	mov	r1, r8
 80011f4:	008a      	lsls	r2, r1, #2
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	4622      	mov	r2, r4
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	460b      	mov	r3, r1
 8001204:	462a      	mov	r2, r5
 8001206:	eb42 0303 	adc.w	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001218:	4649      	mov	r1, r9
 800121a:	008b      	lsls	r3, r1, #2
 800121c:	4641      	mov	r1, r8
 800121e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001222:	4641      	mov	r1, r8
 8001224:	008a      	lsls	r2, r1, #2
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	4603      	mov	r3, r0
 800122c:	4622      	mov	r2, r4
 800122e:	189b      	adds	r3, r3, r2
 8001230:	67bb      	str	r3, [r7, #120]	; 0x78
 8001232:	462b      	mov	r3, r5
 8001234:	460a      	mov	r2, r1
 8001236:	eb42 0303 	adc.w	r3, r2, r3
 800123a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800123c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001240:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001244:	f7ff fa10 	bl	8000668 <__aeabi_ldivmod>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	b21b      	sxth	r3, r3
 8001258:	17da      	asrs	r2, r3, #31
 800125a:	673b      	str	r3, [r7, #112]	; 0x70
 800125c:	677a      	str	r2, [r7, #116]	; 0x74
 800125e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001262:	f04f 0000 	mov.w	r0, #0
 8001266:	f04f 0100 	mov.w	r1, #0
 800126a:	0b50      	lsrs	r0, r2, #13
 800126c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001270:	1359      	asrs	r1, r3, #13
 8001272:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001276:	462b      	mov	r3, r5
 8001278:	fb00 f203 	mul.w	r2, r0, r3
 800127c:	4623      	mov	r3, r4
 800127e:	fb03 f301 	mul.w	r3, r3, r1
 8001282:	4413      	add	r3, r2
 8001284:	4622      	mov	r2, r4
 8001286:	fba2 1200 	umull	r1, r2, r2, r0
 800128a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800128e:	460a      	mov	r2, r1
 8001290:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001294:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001298:	4413      	add	r3, r2
 800129a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800129e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f04f 0100 	mov.w	r1, #0
 80012aa:	0b50      	lsrs	r0, r2, #13
 80012ac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b0:	1359      	asrs	r1, r3, #13
 80012b2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80012b6:	462b      	mov	r3, r5
 80012b8:	fb00 f203 	mul.w	r2, r0, r3
 80012bc:	4623      	mov	r3, r4
 80012be:	fb03 f301 	mul.w	r3, r3, r1
 80012c2:	4413      	add	r3, r2
 80012c4:	4622      	mov	r2, r4
 80012c6:	fba2 1200 	umull	r1, r2, r2, r0
 80012ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80012ce:	460a      	mov	r2, r1
 80012d0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80012d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012d8:	4413      	add	r3, r2
 80012da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80012ea:	4621      	mov	r1, r4
 80012ec:	0e4a      	lsrs	r2, r1, #25
 80012ee:	4629      	mov	r1, r5
 80012f0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012f4:	4629      	mov	r1, r5
 80012f6:	164b      	asrs	r3, r1, #25
 80012f8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	b21b      	sxth	r3, r3
 8001304:	17da      	asrs	r2, r3, #31
 8001306:	66bb      	str	r3, [r7, #104]	; 0x68
 8001308:	66fa      	str	r2, [r7, #108]	; 0x6c
 800130a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800130e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001312:	462a      	mov	r2, r5
 8001314:	fb02 f203 	mul.w	r2, r2, r3
 8001318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800131c:	4621      	mov	r1, r4
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	4413      	add	r3, r2
 8001324:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001328:	4621      	mov	r1, r4
 800132a:	fba2 1201 	umull	r1, r2, r2, r1
 800132e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001332:	460a      	mov	r2, r1
 8001334:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001338:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800133c:	4413      	add	r3, r2
 800133e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800134e:	4621      	mov	r1, r4
 8001350:	0cca      	lsrs	r2, r1, #19
 8001352:	4629      	mov	r1, r5
 8001354:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001358:	4629      	mov	r1, r5
 800135a:	14cb      	asrs	r3, r1, #19
 800135c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001360:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001364:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001368:	1884      	adds	r4, r0, r2
 800136a:	663c      	str	r4, [r7, #96]	; 0x60
 800136c:	eb41 0303 	adc.w	r3, r1, r3
 8001370:	667b      	str	r3, [r7, #100]	; 0x64
 8001372:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001376:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800137a:	4621      	mov	r1, r4
 800137c:	1889      	adds	r1, r1, r2
 800137e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001380:	4629      	mov	r1, r5
 8001382:	eb43 0101 	adc.w	r1, r3, r1
 8001386:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001388:	f04f 0000 	mov.w	r0, #0
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001394:	4623      	mov	r3, r4
 8001396:	0a18      	lsrs	r0, r3, #8
 8001398:	462b      	mov	r3, r5
 800139a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800139e:	462b      	mov	r3, r5
 80013a0:	1219      	asrs	r1, r3, #8
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 80013a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	17da      	asrs	r2, r3, #31
 80013ac:	653b      	str	r3, [r7, #80]	; 0x50
 80013ae:	657a      	str	r2, [r7, #84]	; 0x54
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80013bc:	464c      	mov	r4, r9
 80013be:	0123      	lsls	r3, r4, #4
 80013c0:	4644      	mov	r4, r8
 80013c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013c6:	4644      	mov	r4, r8
 80013c8:	0122      	lsls	r2, r4, #4
 80013ca:	1884      	adds	r4, r0, r2
 80013cc:	603c      	str	r4, [r7, #0]
 80013ce:	eb41 0303 	adc.w	r3, r1, r3
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013d8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 80013dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da00      	bge.n	80013e6 <BMP280_ReadTemperatureAndPressure+0x5ae>
 80013e4:	33ff      	adds	r3, #255	; 0xff
 80013e6:	121b      	asrs	r3, r3, #8
 80013e8:	461a      	mov	r2, r3
 80013ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013ee:	601a      	str	r2, [r3, #0]

	  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013f8:	46bd      	mov	sp, r7
 80013fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013fe:	bf00      	nop
 8001400:	2000021e 	.word	0x2000021e
 8001404:	2000021c 	.word	0x2000021c
 8001408:	2000021a 	.word	0x2000021a

0800140c <Graf>:
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x5f, 0x71, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x4e, 0x22, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x24, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x00, 0x00
	};
void Graf(){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
	char myText[] = "C";
 8001412:	2343      	movs	r3, #67	; 0x43
 8001414:	80bb      	strh	r3, [r7, #4]
	char myText2[] = "t";
 8001416:	2374      	movs	r3, #116	; 0x74
 8001418:	803b      	strh	r3, [r7, #0]
	ssd1306_Fill(Black);
 800141a:	2000      	movs	r0, #0
 800141c:	f001 f86c 	bl	80024f8 <ssd1306_Fill>
	ssd1306_Line(2, 61, 121, 61, White);
 8001420:	2301      	movs	r3, #1
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	233d      	movs	r3, #61	; 0x3d
 8001426:	2279      	movs	r2, #121	; 0x79
 8001428:	213d      	movs	r1, #61	; 0x3d
 800142a:	2002      	movs	r0, #2
 800142c:	f001 f9be 	bl	80027ac <ssd1306_Line>
	ssd1306_Line(2, 61, 2, 3, White);
 8001430:	2301      	movs	r3, #1
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2303      	movs	r3, #3
 8001436:	2202      	movs	r2, #2
 8001438:	213d      	movs	r1, #61	; 0x3d
 800143a:	2002      	movs	r0, #2
 800143c:	f001 f9b6 	bl	80027ac <ssd1306_Line>
	ssd1306_DrawCircle(5, 1, 1, White);
 8001440:	2301      	movs	r3, #1
 8001442:	2201      	movs	r2, #1
 8001444:	2101      	movs	r1, #1
 8001446:	2005      	movs	r0, #5
 8001448:	f001 fa1c 	bl	8002884 <ssd1306_DrawCircle>
	ssd1306_DrawPixel(1, 4, White);
 800144c:	2201      	movs	r2, #1
 800144e:	2104      	movs	r1, #4
 8001450:	2001      	movs	r0, #1
 8001452:	f001 f891 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(0, 5, White);
 8001456:	2201      	movs	r2, #1
 8001458:	2105      	movs	r1, #5
 800145a:	2000      	movs	r0, #0
 800145c:	f001 f88c 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(3, 4, White);
 8001460:	2201      	movs	r2, #1
 8001462:	2104      	movs	r1, #4
 8001464:	2003      	movs	r0, #3
 8001466:	f001 f887 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(4, 5, White);
 800146a:	2201      	movs	r2, #1
 800146c:	2105      	movs	r1, #5
 800146e:	2004      	movs	r0, #4
 8001470:	f001 f882 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(120, 60, White);
 8001474:	2201      	movs	r2, #1
 8001476:	213c      	movs	r1, #60	; 0x3c
 8001478:	2078      	movs	r0, #120	; 0x78
 800147a:	f001 f87d 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(119, 59, White);
 800147e:	2201      	movs	r2, #1
 8001480:	213b      	movs	r1, #59	; 0x3b
 8001482:	2077      	movs	r0, #119	; 0x77
 8001484:	f001 f878 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(120, 62, White);
 8001488:	2201      	movs	r2, #1
 800148a:	213e      	movs	r1, #62	; 0x3e
 800148c:	2078      	movs	r0, #120	; 0x78
 800148e:	f001 f873 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(119, 63, White);
 8001492:	2201      	movs	r2, #1
 8001494:	213f      	movs	r1, #63	; 0x3f
 8001496:	2077      	movs	r0, #119	; 0x77
 8001498:	f001 f86e 	bl	8002578 <ssd1306_DrawPixel>
	ssd1306_SetCursor(8, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	2008      	movs	r0, #8
 80014a0:	f001 f96c 	bl	800277c <ssd1306_SetCursor>
	ssd1306_WriteString(myText, Font_6x8, White);
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <Graf+0xc0>)
 80014a6:	1d38      	adds	r0, r7, #4
 80014a8:	2301      	movs	r3, #1
 80014aa:	ca06      	ldmia	r2, {r1, r2}
 80014ac:	f001 f940 	bl	8002730 <ssd1306_WriteString>
	ssd1306_SetCursor(122, 56);
 80014b0:	2138      	movs	r1, #56	; 0x38
 80014b2:	207a      	movs	r0, #122	; 0x7a
 80014b4:	f001 f962 	bl	800277c <ssd1306_SetCursor>
	ssd1306_WriteString(myText2, Font_6x8, White);
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <Graf+0xc0>)
 80014ba:	4638      	mov	r0, r7
 80014bc:	2301      	movs	r3, #1
 80014be:	ca06      	ldmia	r2, {r1, r2}
 80014c0:	f001 f936 	bl	8002730 <ssd1306_WriteString>
};
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000000c 	.word	0x2000000c

080014d0 <DottedLine>:

void DottedLine(int y1){
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 19; i++){
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e01c      	b.n	8001518 <DottedLine+0x48>
		ssd1306_Line((i*6) + 5, y1, (i*6) + 5 + 3, y1, White);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3305      	adds	r3, #5
 80014ee:	b2d8      	uxtb	r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	b2d9      	uxtb	r1, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	0052      	lsls	r2, r2, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3308      	adds	r3, #8
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2401      	movs	r4, #1
 800150c:	9400      	str	r4, [sp, #0]
 800150e:	f001 f94d 	bl	80027ac <ssd1306_Line>
	for (int i = 0; i < 19; i++){
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b12      	cmp	r3, #18
 800151c:	dddf      	ble.n	80014de <DottedLine+0xe>
	}
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}

08001528 <TempZadScreen>:


void TempZadScreen(float Temp, float TempZad){
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b091      	sub	sp, #68	; 0x44
 800152c:	af02      	add	r7, sp, #8
 800152e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001532:	edc7 0a00 	vstr	s1, [r7]
	char x[] = "12.12";
 8001536:	4a39      	ldr	r2, [pc, #228]	; (800161c <TempZadScreen+0xf4>)
 8001538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001540:	6018      	str	r0, [r3, #0]
 8001542:	3304      	adds	r3, #4
 8001544:	8019      	strh	r1, [r3, #0]
	snprintf(x, sizeof(x),"%f", Temp);
 8001546:	edd7 7a01 	vldr	s15, [r7, #4]
 800154a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001552:	ed8d 7b00 	vstr	d7, [sp]
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <TempZadScreen+0xf8>)
 8001558:	2106      	movs	r1, #6
 800155a:	4618      	mov	r0, r3
 800155c:	f008 fdf8 	bl	800a150 <sniprintf>
	char x1[] = "12.12";
 8001560:	4a2e      	ldr	r2, [pc, #184]	; (800161c <TempZadScreen+0xf4>)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	6018      	str	r0, [r3, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	8019      	strh	r1, [r3, #0]
	snprintf(x1, sizeof(x1),"%f", TempZad);
 8001570:	edd7 7a00 	vldr	s15, [r7]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	ed8d 7b00 	vstr	d7, [sp]
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <TempZadScreen+0xf8>)
 8001582:	2106      	movs	r1, #6
 8001584:	4618      	mov	r0, r3
 8001586:	f008 fde3 	bl	800a150 <sniprintf>
	char myText1[] = "Set Temp.";
 800158a:	4a26      	ldr	r2, [pc, #152]	; (8001624 <TempZadScreen+0xfc>)
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	ca07      	ldmia	r2, {r0, r1, r2}
 8001592:	c303      	stmia	r3!, {r0, r1}
 8001594:	801a      	strh	r2, [r3, #0]
	char myText[] = "Current Temp.";
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <TempZadScreen+0x100>)
 8001598:	f107 040c 	add.w	r4, r7, #12
 800159c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159e:	c407      	stmia	r4!, {r0, r1, r2}
 80015a0:	8023      	strh	r3, [r4, #0]
	ssd1306_Fill(Black);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 ffa8 	bl	80024f8 <ssd1306_Fill>
	ssd1306_SetCursor(10, 5);
 80015a8:	2105      	movs	r1, #5
 80015aa:	200a      	movs	r0, #10
 80015ac:	f001 f8e6 	bl	800277c <ssd1306_SetCursor>
	ssd1306_WriteString(myText, Font_6x8, White);
 80015b0:	4a1e      	ldr	r2, [pc, #120]	; (800162c <TempZadScreen+0x104>)
 80015b2:	f107 000c 	add.w	r0, r7, #12
 80015b6:	2301      	movs	r3, #1
 80015b8:	ca06      	ldmia	r2, {r1, r2}
 80015ba:	f001 f8b9 	bl	8002730 <ssd1306_WriteString>
	ssd1306_SetCursor(95, 5);
 80015be:	2105      	movs	r1, #5
 80015c0:	205f      	movs	r0, #95	; 0x5f
 80015c2:	f001 f8db 	bl	800277c <ssd1306_SetCursor>
	ssd1306_WriteString(x, Font_6x8, White);
 80015c6:	4a19      	ldr	r2, [pc, #100]	; (800162c <TempZadScreen+0x104>)
 80015c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80015cc:	2301      	movs	r3, #1
 80015ce:	ca06      	ldmia	r2, {r1, r2}
 80015d0:	f001 f8ae 	bl	8002730 <ssd1306_WriteString>
	ssd1306_SetCursor(95, 20);
 80015d4:	2114      	movs	r1, #20
 80015d6:	205f      	movs	r0, #95	; 0x5f
 80015d8:	f001 f8d0 	bl	800277c <ssd1306_SetCursor>
	ssd1306_WriteString(x1, Font_6x8, White);
 80015dc:	4a13      	ldr	r2, [pc, #76]	; (800162c <TempZadScreen+0x104>)
 80015de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015e2:	2301      	movs	r3, #1
 80015e4:	ca06      	ldmia	r2, {r1, r2}
 80015e6:	f001 f8a3 	bl	8002730 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 20);
 80015ea:	2114      	movs	r1, #20
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 f8c5 	bl	800277c <ssd1306_SetCursor>
	ssd1306_WriteString(myText1, Font_6x8, White);
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <TempZadScreen+0x104>)
 80015f4:	f107 001c 	add.w	r0, r7, #28
 80015f8:	2301      	movs	r3, #1
 80015fa:	ca06      	ldmia	r2, {r1, r2}
 80015fc:	f001 f898 	bl	8002730 <ssd1306_WriteString>
	ssd1306_DrawBitmap(0, 37, termometr, 128, 27, White);
 8001600:	2301      	movs	r3, #1
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	231b      	movs	r3, #27
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <TempZadScreen+0x108>)
 800160c:	2125      	movs	r1, #37	; 0x25
 800160e:	2000      	movs	r0, #0
 8001610:	f001 f9bf 	bl	8002992 <ssd1306_DrawBitmap>
};
 8001614:	bf00      	nop
 8001616:	373c      	adds	r7, #60	; 0x3c
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	0800e2d4 	.word	0x0800e2d4
 8001620:	0800e2d0 	.word	0x0800e2d0
 8001624:	0800e2dc 	.word	0x0800e2dc
 8001628:	0800e2e8 	.word	0x0800e2e8
 800162c:	2000000c 	.word	0x2000000c
 8001630:	0800e33c 	.word	0x0800e33c

08001634 <rysuj_wykres>:

void rysuj_wykres(int wykres[118]){
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 116; i++){
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	e06d      	b.n	800171e <rysuj_wykres+0xea>
		ssd1306_DrawPixel(i + 3, wykres[i], White);
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	3303      	adds	r3, #3
 8001648:	b2d8      	uxtb	r0, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	f000 ff8d 	bl	8002578 <ssd1306_DrawPixel>
		int ilosc = abs(wykres[i] - wykres[i + 1] - 1);
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	440b      	add	r3, r1
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	bfb8      	it	lt
 800167c:	425b      	neglt	r3, r3
 800167e:	613b      	str	r3, [r7, #16]
		if (ilosc > 1){
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b01      	cmp	r3, #1
 8001684:	dd48      	ble.n	8001718 <rysuj_wykres+0xe4>
			int y = wykres[i] - wykres[i + 1];
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	440b      	add	r3, r1
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
			if (y < 0){
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da1c      	bge.n	80016e0 <rysuj_wykres+0xac>
				for (int j = 0; j < ilosc; j++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	e014      	b.n	80016d6 <rysuj_wykres+0xa2>
					ssd1306_DrawPixel(i + 3, wykres[i] + j, White);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3303      	adds	r3, #3
 80016b2:	b2d8      	uxtb	r0, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	f000 ff54 	bl	8002578 <ssd1306_DrawPixel>
				for (int j = 0; j < ilosc; j++){
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbe6      	blt.n	80016ac <rysuj_wykres+0x78>
 80016de:	e01b      	b.n	8001718 <rysuj_wykres+0xe4>
				}
			}else{
				for (int j = 0; j < ilosc; j++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e014      	b.n	8001710 <rysuj_wykres+0xdc>
					ssd1306_DrawPixel(i + 3, wykres[i] - j, White);
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3303      	adds	r3, #3
 80016ec:	b2d8      	uxtb	r0, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2201      	movs	r2, #1
 8001704:	4619      	mov	r1, r3
 8001706:	f000 ff37 	bl	8002578 <ssd1306_DrawPixel>
				for (int j = 0; j < ilosc; j++){
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbe6      	blt.n	80016e6 <rysuj_wykres+0xb2>
	for(int i = 0; i < 116; i++){
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3301      	adds	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	2b73      	cmp	r3, #115	; 0x73
 8001722:	dd8e      	ble.n	8001642 <rysuj_wykres+0xe>
				}
			}
		}
	}
	ssd1306_DrawPixel(119, wykres[117], White);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2201      	movs	r2, #1
 8001730:	4619      	mov	r1, r3
 8001732:	2077      	movs	r0, #119	; 0x77
 8001734:	f000 ff20 	bl	8002578 <ssd1306_DrawPixel>
}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <convertTempPx>:
#include "Other_Functions.h"
#include "string.h"
#include "stdio.h"


int convertTempPx(float Temp){
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
	int px = (int)(Temp * (-2.5) + 110);
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001752:	eeb8 6b04 	vmov.f64	d6, #132	; 0xc0200000 -2.5
 8001756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800175a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001780 <convertTempPx+0x40>
 800175e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001762:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001766:	ee17 3a90 	vmov	r3, s15
 800176a:	60fb      	str	r3, [r7, #12]
	return px;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	405b8000 	.word	0x405b8000

08001788 <transmitData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmitData(float send){
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af02      	add	r7, sp, #8
 800178e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t size =
            sprintf(buffer1,
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <transmitData+0x48>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <transmitData+0x4c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017a6:	ed8d 7b00 	vstr	d7, [sp]
 80017aa:	ec53 2b16 	vmov	r2, r3, d6
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <transmitData+0x50>)
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <transmitData+0x54>)
 80017b2:	f008 fd01 	bl	800a1b8 <siprintf>
 80017b6:	4603      	mov	r3, r0
    uint8_t size =
 80017b8:	73fb      	strb	r3, [r7, #15]
                    "{\"Temperatura\": %.2f, \"TemperaturaZadana\": %.2f}\n",
                     Temperatura, TemperaturaZadana);
    HAL_UART_Transmit(&huart3, (uint8_t*) buffer1, size, 100);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <transmitData+0x54>)
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <transmitData+0x58>)
 80017c4:	f006 f80c 	bl	80077e0 <HAL_UART_Transmit>
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000b4c 	.word	0x20000b4c
 80017d4:	20000004 	.word	0x20000004
 80017d8:	0800e2f8 	.word	0x0800e2f8
 80017dc:	20000b50 	.word	0x20000b50
 80017e0:	200003b0 	.word	0x200003b0

080017e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)  // Sprawdź, czy przerwanie pochodzi z USART3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a3f      	ldr	r2, [pc, #252]	; (80018f0 <HAL_UART_RxCpltCallback+0x10c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d177      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0x102>
    {

		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80017f6:	2101      	movs	r1, #1
 80017f8:	483e      	ldr	r0, [pc, #248]	; (80018f4 <HAL_UART_RxCpltCallback+0x110>)
 80017fa:	f002 fd38 	bl	800426e <HAL_GPIO_TogglePin>
        if (msg[i] == '\n')  // Sprawdź, czy odebrano znak końca linii
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 8001808:	5c9b      	ldrb	r3, [r3, r2]
 800180a:	2b0a      	cmp	r3, #10
 800180c:	d153      	bne.n	80018b6 <HAL_UART_RxCpltCallback+0xd2>
        {
            dataReceivedFlag = 1;  // Ustaw flagę o odebraniu pełnej wiadomości
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_UART_RxCpltCallback+0x11c>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
            msg[i] = '\0';  // Zamień znak końca linii na znak końca łańcucha
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 800181e:	2100      	movs	r1, #0
 8001820:	5499      	strb	r1, [r3, r2]
            i = 0;  // Resetuj indeks bufora
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 8001824:	2200      	movs	r2, #0
 8001826:	801a      	strh	r2, [r3, #0]
            sscanf(msg,"%f",&TempZad);
 8001828:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_UART_RxCpltCallback+0x120>)
 800182a:	4937      	ldr	r1, [pc, #220]	; (8001908 <HAL_UART_RxCpltCallback+0x124>)
 800182c:	4833      	ldr	r0, [pc, #204]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 800182e:	f008 fce3 	bl	800a1f8 <siscanf>
            if (TempZad == 0){
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_UART_RxCpltCallback+0x120>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eef5 7a40 	vcmp.f32	s15, #0.0
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d12c      	bne.n	800189c <HAL_UART_RxCpltCallback+0xb8>
            	*controlX = &msg[5];
 8001842:	4a32      	ldr	r2, [pc, #200]	; (800190c <HAL_UART_RxCpltCallback+0x128>)
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_UART_RxCpltCallback+0x12c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	701a      	strb	r2, [r3, #0]
            	for (int v = 5; v < 128; v++){
 800184c:	2305      	movs	r3, #5
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e007      	b.n	8001862 <HAL_UART_RxCpltCallback+0x7e>
            		msg[v] = '\0';
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
            	for (int v = 5; v < 128; v++){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b7f      	cmp	r3, #127	; 0x7f
 8001866:	ddf4      	ble.n	8001852 <HAL_UART_RxCpltCallback+0x6e>
            	}
            	sscanf(msg,"%f",&TempZad);
 8001868:	4a26      	ldr	r2, [pc, #152]	; (8001904 <HAL_UART_RxCpltCallback+0x120>)
 800186a:	4927      	ldr	r1, [pc, #156]	; (8001908 <HAL_UART_RxCpltCallback+0x124>)
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 800186e:	f008 fcc3 	bl	800a1f8 <siscanf>
            	if (TempZad == 0){
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_UART_RxCpltCallback+0x120>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eef5 7a40 	vcmp.f32	s15, #0.0
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d107      	bne.n	8001892 <HAL_UART_RxCpltCallback+0xae>
            		*controlX = &msg[4];
 8001882:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_UART_RxCpltCallback+0x130>)
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_UART_RxCpltCallback+0x12c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
            		msg[4] = '\0';
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 800188e:	2200      	movs	r2, #0
 8001890:	711a      	strb	r2, [r3, #4]
            	}
            	sscanf(msg,"%f",&TempZad);
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_UART_RxCpltCallback+0x120>)
 8001894:	491c      	ldr	r1, [pc, #112]	; (8001908 <HAL_UART_RxCpltCallback+0x124>)
 8001896:	4819      	ldr	r0, [pc, #100]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 8001898:	f008 fcae 	bl	800a1f8 <siscanf>
            }
            if (*controlX == 'A'){
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_UART_RxCpltCallback+0x12c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b41      	cmp	r3, #65	; 0x41
 80018a4:	d103      	bne.n	80018ae <HAL_UART_RxCpltCallback+0xca>
            	Auto = true;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_UART_RxCpltCallback+0x134>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e010      	b.n	80018d0 <HAL_UART_RxCpltCallback+0xec>
            }else{
            	Auto = false;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_UART_RxCpltCallback+0x134>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e00c      	b.n	80018d0 <HAL_UART_RxCpltCallback+0xec>
            }

        }
        else
        {
            if (++i >= 128)  // Inkrementuj indeks i sprawdź przepełnienie
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 80018c2:	4619      	mov	r1, r3
 80018c4:	8011      	strh	r1, [r2, #0]
 80018c6:	2b7f      	cmp	r3, #127	; 0x7f
 80018c8:	d902      	bls.n	80018d0 <HAL_UART_RxCpltCallback+0xec>
            {
                i = 0;  // Resetuj indeks bufora
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&msg[i], 1);  // Ponownie włącz przerwanie
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_UART_RxCpltCallback+0x114>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_UART_RxCpltCallback+0x118>)
 80018da:	4413      	add	r3, r2
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	480e      	ldr	r0, [pc, #56]	; (800191c <HAL_UART_RxCpltCallback+0x138>)
 80018e2:	f006 f800 	bl	80078e6 <HAL_UART_Receive_IT>
    }
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40004800 	.word	0x40004800
 80018f4:	40020400 	.word	0x40020400
 80018f8:	20000c9c 	.word	0x20000c9c
 80018fc:	20000c1c 	.word	0x20000c1c
 8001900:	20000c9e 	.word	0x20000c9e
 8001904:	20000c18 	.word	0x20000c18
 8001908:	0800e32c 	.word	0x0800e32c
 800190c:	20000c21 	.word	0x20000c21
 8001910:	20000008 	.word	0x20000008
 8001914:	20000c20 	.word	0x20000c20
 8001918:	20000c9f 	.word	0x20000c9f
 800191c:	200003b0 	.word	0x200003b0

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f001 fc72 	bl	800320e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 f9f9 	bl	8001d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192e:	f000 fc49 	bl	80021c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001932:	f000 fbe9 	bl	8002108 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001936:	f000 fc17 	bl	8002168 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800193a:	f000 fa63 	bl	8001e04 <MX_ADC1_Init>
  MX_I2C1_Init();
 800193e:	f000 fab3 	bl	8001ea8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001942:	f000 faf1 	bl	8001f28 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001946:	f000 fb2f 	bl	8001fa8 <MX_TIM3_Init>
  MX_TIM7_Init();
 800194a:	f000 fba5 	bl	8002098 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
      BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 800194e:	2301      	movs	r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	2101      	movs	r1, #1
 8001954:	487a      	ldr	r0, [pc, #488]	; (8001b40 <main+0x220>)
 8001956:	f7ff f925 	bl	8000ba4 <BMP280_Init>
      HAL_Delay(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f001 fcb3 	bl	80032c8 <HAL_Delay>
      ssd1306_Init();
 8001962:	f000 fd5f 	bl	8002424 <ssd1306_Init>
      HAL_Delay(200);
 8001966:	20c8      	movs	r0, #200	; 0xc8
 8001968:	f001 fcae 	bl	80032c8 <HAL_Delay>
      HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800196c:	2108      	movs	r1, #8
 800196e:	4875      	ldr	r0, [pc, #468]	; (8001b44 <main+0x224>)
 8001970:	f004 fe5e 	bl	8006630 <HAL_TIM_PWM_Start>

      HAL_TIM_Base_Start_IT(&htim7);
 8001974:	4874      	ldr	r0, [pc, #464]	; (8001b48 <main+0x228>)
 8001976:	f004 fd81 	bl	800647c <HAL_TIM_Base_Start_IT>
      /* USER CODE END 2 */

      /* Infinite loop */
      /* USER CODE BEGIN WHILE */
      int z = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

      int Choose_PID = 2;
 800197e:	2302      	movs	r3, #2
 8001980:	603b      	str	r3, [r7, #0]
      if (Choose_PID == 1){
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d109      	bne.n	800199c <main+0x7c>
    	  //nastawy PID Normal V
    	  kp = 8.5292;
 8001988:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <main+0x22c>)
 800198a:	4a71      	ldr	r2, [pc, #452]	; (8001b50 <main+0x230>)
 800198c:	601a      	str	r2, [r3, #0]
    	  ki = 0.0046146;
 800198e:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <main+0x234>)
 8001990:	4a71      	ldr	r2, [pc, #452]	; (8001b58 <main+0x238>)
 8001992:	601a      	str	r2, [r3, #0]
    	  kd = 1774.5473;
 8001994:	4b71      	ldr	r3, [pc, #452]	; (8001b5c <main+0x23c>)
 8001996:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <main+0x240>)
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e009      	b.n	80019b0 <main+0x90>
      }else{
    	  //nastawy PID Low V
    	  kp = 18.1264;
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <main+0x22c>)
 800199e:	4a71      	ldr	r2, [pc, #452]	; (8001b64 <main+0x244>)
 80019a0:	601a      	str	r2, [r3, #0]
    	  ki = 0.041887;
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <main+0x234>)
 80019a4:	4a70      	ldr	r2, [pc, #448]	; (8001b68 <main+0x248>)
 80019a6:	601a      	str	r2, [r3, #0]
    	  kd = 0;
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <main+0x23c>)
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
      }

        //int rys = 20;
      for (int i = 0; i < 118; i++){
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	e00b      	b.n	80019ce <main+0xae>
        tabela_temp[i] = convertTempPx(30);
 80019b6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80019ba:	f7ff fec1 	bl	8001740 <convertTempPx>
 80019be:	4602      	mov	r2, r0
 80019c0:	496a      	ldr	r1, [pc, #424]	; (8001b6c <main+0x24c>)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < 118; i++){
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b75      	cmp	r3, #117	; 0x75
 80019d2:	ddf0      	ble.n	80019b6 <main+0x96>
      }

      HAL_UART_Receive_IT(&huart3, (uint8_t*)&msg[i], 1);
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <main+0x250>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <main+0x254>)
 80019de:	4413      	add	r3, r2
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	4864      	ldr	r0, [pc, #400]	; (8001b78 <main+0x258>)
 80019e6:	f005 ff7e 	bl	80078e6 <HAL_UART_Receive_IT>
      while (1)
            	  {
                /* USER CODE END WHILE */
            	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 80019ea:	4964      	ldr	r1, [pc, #400]	; (8001b7c <main+0x25c>)
 80019ec:	4864      	ldr	r0, [pc, #400]	; (8001b80 <main+0x260>)
 80019ee:	f7ff fa23 	bl	8000e38 <BMP280_ReadTemperatureAndPressure>
            	  HAL_Delay(250);
 80019f2:	20fa      	movs	r0, #250	; 0xfa
 80019f4:	f001 fc68 	bl	80032c8 <HAL_Delay>
            	  HAL_ADC_Start(&hadc1);
 80019f8:	4862      	ldr	r0, [pc, #392]	; (8001b84 <main+0x264>)
 80019fa:	f001 fccd 	bl	8003398 <HAL_ADC_Start>
           	      HAL_ADC_PollForConversion(&hadc1,1000);
 80019fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a02:	4860      	ldr	r0, [pc, #384]	; (8001b84 <main+0x264>)
 8001a04:	f001 fdca 	bl	800359c <HAL_ADC_PollForConversion>
           	      readValue = HAL_ADC_GetValue(&hadc1);
 8001a08:	485e      	ldr	r0, [pc, #376]	; (8001b84 <main+0x264>)
 8001a0a:	f001 fe52 	bl	80036b2 <HAL_ADC_GetValue>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <main+0x268>)
 8001a14:	801a      	strh	r2, [r3, #0]
         	      HAL_ADC_Stop(&hadc1);
 8001a16:	485b      	ldr	r0, [pc, #364]	; (8001b84 <main+0x264>)
 8001a18:	f001 fd8c 	bl	8003534 <HAL_ADC_Stop>
            	  if (rys == 40){
            		  rys = 20;
            	  }
            	  rys++;
            	  */
            	  Temperatura = temperature; // = rys;
 8001a1c:	4b58      	ldr	r3, [pc, #352]	; (8001b80 <main+0x260>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <main+0x26c>)
 8001a22:	6013      	str	r3, [r2, #0]
            	  if (Auto == true){
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <main+0x270>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <main+0x116>
            		TemperaturaZadana = TempZad;
 8001a2c:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <main+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <main+0x278>)
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e034      	b.n	8001aa0 <main+0x180>
            	  }else{
            		TemperaturaZadana = readValue;
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <main+0x268>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a42:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <main+0x278>)
 8001a44:	edc3 7a00 	vstr	s15, [r3]
            		TemperaturaZadana = trunc(2. * (round(TemperaturaZadana / 20)/10 + 20) + .5) / 2.;
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <main+0x278>)
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a5e:	f00c fbb7 	bl	800e1d0 <round>
 8001a62:	eeb0 6b40 	vmov.f64	d6, d0
 8001a66:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001a6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a6e:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001a72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a7a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001a7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a82:	eeb0 0b47 	vmov.f64	d0, d7
 8001a86:	f00c fbe7 	bl	800e258 <trunc>
 8001a8a:	eeb0 6b40 	vmov.f64	d6, d0
 8001a8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001a92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <main+0x278>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
            	  }
            	   if (z == 2){
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d11f      	bne.n	8001ae6 <main+0x1c6>
            		  for (int i = 0; i < (117); i++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	e00b      	b.n	8001ac4 <main+0x1a4>
            		  	  tabela_temp[i] = tabela_temp[i+1];
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	; (8001b6c <main+0x24c>)
 8001ab2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ab6:	492d      	ldr	r1, [pc, #180]	; (8001b6c <main+0x24c>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            		  for (int i = 0; i < (117); i++){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b74      	cmp	r3, #116	; 0x74
 8001ac8:	ddf0      	ble.n	8001aac <main+0x18c>
            		    }
            		  tabela_temp[117] = convertTempPx(Temperatura);
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <main+0x26c>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f7ff fe34 	bl	8001740 <convertTempPx>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <main+0x24c>)
 8001adc:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
            		  z = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e002      	b.n	8001aec <main+0x1cc>
            	  }else{
            		  z++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
            	  }
            	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8001aec:	2104      	movs	r1, #4
 8001aee:	482b      	ldr	r0, [pc, #172]	; (8001b9c <main+0x27c>)
 8001af0:	f002 fb8c 	bl	800420c <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d110      	bne.n	8001b1c <main+0x1fc>
            	  	Graf();
 8001afa:	f7ff fc87 	bl	800140c <Graf>
            	  	rysuj_wykres(tabela_temp);
 8001afe:	481b      	ldr	r0, [pc, #108]	; (8001b6c <main+0x24c>)
 8001b00:	f7ff fd98 	bl	8001634 <rysuj_wykres>
            	  	DottedLine(convertTempPx(TemperaturaZadana));
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <main+0x278>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	f7ff fe17 	bl	8001740 <convertTempPx>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fcdb 	bl	80014d0 <DottedLine>
 8001b1a:	e00b      	b.n	8001b34 <main+0x214>
            	  } else {
            	  	TempZadScreen(Temperatura, TemperaturaZadana);
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <main+0x26c>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <main+0x278>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	eef0 0a47 	vmov.f32	s1, s14
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	f7ff fcfa 	bl	8001528 <TempZadScreen>
            	  }
            	  ssd1306_UpdateScreen();
 8001b34:	f000 fcf8 	bl	8002528 <ssd1306_UpdateScreen>


            	  HAL_Delay(250);
 8001b38:	20fa      	movs	r0, #250	; 0xfa
 8001b3a:	f001 fbc5 	bl	80032c8 <HAL_Delay>
            	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001b3e:	e754      	b.n	80019ea <main+0xca>
 8001b40:	20000270 	.word	0x20000270
 8001b44:	20000318 	.word	0x20000318
 8001b48:	20000364 	.word	0x20000364
 8001b4c:	20000b24 	.word	0x20000b24
 8001b50:	4108779a 	.word	0x4108779a
 8001b54:	20000b28 	.word	0x20000b28
 8001b58:	3b973612 	.word	0x3b973612
 8001b5c:	20000b2c 	.word	0x20000b2c
 8001b60:	44ddd183 	.word	0x44ddd183
 8001b64:	419102de 	.word	0x419102de
 8001b68:	3d2b91b4 	.word	0x3d2b91b4
 8001b6c:	2000094c 	.word	0x2000094c
 8001b70:	20000c9c 	.word	0x20000c9c
 8001b74:	20000c1c 	.word	0x20000c1c
 8001b78:	200003b0 	.word	0x200003b0
 8001b7c:	20000944 	.word	0x20000944
 8001b80:	20000940 	.word	0x20000940
 8001b84:	20000228 	.word	0x20000228
 8001b88:	20000948 	.word	0x20000948
 8001b8c:	20000b4c 	.word	0x20000b4c
 8001b90:	20000c9f 	.word	0x20000c9f
 8001b94:	20000c18 	.word	0x20000c18
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
              /* USER CODE END 3 */
    }


    void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    	if (htim->Instance ==TIM7){
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f040 808b 	bne.w	8001cca <HAL_TIM_PeriodElapsedCallback+0x12a>

    		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001bb4:	4948      	ldr	r1, [pc, #288]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001bb6:	4849      	ldr	r0, [pc, #292]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001bb8:	f7ff f93e 	bl	8000e38 <BMP280_ReadTemperatureAndPressure>
    		transmitData(Temperatura);
 8001bbc:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f7ff fddf 	bl	8001788 <transmitData>
    	//PID
    	  	  poprzednia_probka = uchyb;
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001bd0:	6013      	str	r3, [r2, #0]
            	  uchyb = TemperaturaZadana - Temperatura;
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001bd4:	ed93 7a00 	vldr	s14, [r3]
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
            	  I = I + uchyb * ki * tp;
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
            	  D = (kd * (uchyb - poprzednia_probka)/tp);
 8001c12:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c14:	ed93 7a00 	vldr	s14, [r3]
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c38:	edc3 7a00 	vstr	s15, [r3]
            	  P = uchyb * kp;
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]
            	  yzad = P + I + D;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
            	  if(yzad > 99){
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001d10 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	dd03      	ble.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0xee>
            		  yzad = 100;
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x106>
            	  }else if(yzad < 0){
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	d503      	bpl.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x106>
            		  yzad = 0;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
            	  }
            	  yINTzad = (int)(yzad * 10);
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb8:	ee17 2a90 	vmov	r2, s15
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001cbe:	601a      	str	r2, [r3, #0]
            	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,yINTzad);
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    	}
    }
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40001400 	.word	0x40001400
 8001cd8:	20000944 	.word	0x20000944
 8001cdc:	20000940 	.word	0x20000940
 8001ce0:	20000b4c 	.word	0x20000b4c
 8001ce4:	20000b48 	.word	0x20000b48
 8001ce8:	20000b44 	.word	0x20000b44
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	20000b28 	.word	0x20000b28
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000b38 	.word	0x20000b38
 8001cfc:	20000b2c 	.word	0x20000b2c
 8001d00:	20000b3c 	.word	0x20000b3c
 8001d04:	20000b24 	.word	0x20000b24
 8001d08:	20000b40 	.word	0x20000b40
 8001d0c:	20000b30 	.word	0x20000b30
 8001d10:	42c60000 	.word	0x42c60000
 8001d14:	42c80000 	.word	0x42c80000
 8001d18:	20000b34 	.word	0x20000b34
 8001d1c:	20000318 	.word	0x20000318

08001d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b094      	sub	sp, #80	; 0x50
 8001d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	2234      	movs	r2, #52	; 0x34
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f008 fad3 	bl	800a2da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d44:	f003 f9e6 	bl	8005114 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <SystemClock_Config+0xdc>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <SystemClock_Config+0xdc>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
 8001d54:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <SystemClock_Config+0xdc>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <SystemClock_Config+0xe0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <SystemClock_Config+0xe0>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <SystemClock_Config+0xe0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d86:	2302      	movs	r3, #2
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d90:	2304      	movs	r3, #4
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d94:	2360      	movs	r3, #96	; 0x60
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fa13 	bl	80051d4 <HAL_RCC_OscConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001db4:	f000 faf8 	bl	80023a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001db8:	f003 f9bc 	bl	8005134 <HAL_PWREx_EnableOverDrive>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dc2:	f000 faf1 	bl	80023a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	2103      	movs	r1, #3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fca4 	bl	8005730 <HAL_RCC_ClockConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001dee:	f000 fadb 	bl	80023a8 <Error_Handler>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3750      	adds	r7, #80	; 0x50
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <MX_ADC1_Init+0x9c>)
 8001e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <MX_ADC1_Init+0xa0>)
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e66:	f001 fa53 	bl	8003310 <HAL_ADC_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e70:	f000 fa9a 	bl	80023a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_ADC1_Init+0x98>)
 8001e86:	f001 fc21 	bl	80036cc <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e90:	f000 fa8a 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000228 	.word	0x20000228
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	0f000001 	.word	0x0f000001

08001ea8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <MX_I2C1_Init+0x7c>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ee4:	f002 f9de 	bl	80042a4 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001eee:	f000 fa5b 	bl	80023a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001ef6:	f002 ff2d 	bl	8004d54 <HAL_I2CEx_ConfigAnalogFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f00:	f000 fa52 	bl	80023a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_I2C1_Init+0x74>)
 8001f08:	f002 ff6f 	bl	8004dea <HAL_I2CEx_ConfigDigitalFilter>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f000 fa49 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000270 	.word	0x20000270
 8001f20:	40005400 	.word	0x40005400
 8001f24:	20303e5d 	.word	0x20303e5d

08001f28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <MX_I2C2_Init+0x78>)
 8001f30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <MX_I2C2_Init+0x7c>)
 8001f36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f62:	480e      	ldr	r0, [pc, #56]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f64:	f002 f99e 	bl	80042a4 <HAL_I2C_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f6e:	f000 fa1b 	bl	80023a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f76:	f002 feed 	bl	8004d54 <HAL_I2CEx_ConfigAnalogFilter>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f80:	f000 fa12 	bl	80023a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_I2C2_Init+0x74>)
 8001f88:	f002 ff2f 	bl	8004dea <HAL_I2CEx_ConfigDigitalFilter>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f92:	f000 fa09 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200002c4 	.word	0x200002c4
 8001fa0:	40005800 	.word	0x40005800
 8001fa4:	20303e5d 	.word	0x20303e5d

08001fa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc8:	463b      	mov	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	615a      	str	r2, [r3, #20]
 8001fd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <MX_TIM3_Init+0xe8>)
 8001fdc:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <MX_TIM3_Init+0xec>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <MX_TIM3_Init+0xe8>)
 8001fe2:	225f      	movs	r2, #95	; 0x5f
 8001fe4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <MX_TIM3_Init+0xe8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <MX_TIM3_Init+0xe8>)
 8001fee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <MX_TIM3_Init+0xe8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <MX_TIM3_Init+0xe8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002000:	4823      	ldr	r0, [pc, #140]	; (8002090 <MX_TIM3_Init+0xe8>)
 8002002:	f004 f9e3 	bl	80063cc <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800200c:	f000 f9cc 	bl	80023a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201a:	4619      	mov	r1, r3
 800201c:	481c      	ldr	r0, [pc, #112]	; (8002090 <MX_TIM3_Init+0xe8>)
 800201e:	f004 fe35 	bl	8006c8c <HAL_TIM_ConfigClockSource>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002028:	f000 f9be 	bl	80023a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800202c:	4818      	ldr	r0, [pc, #96]	; (8002090 <MX_TIM3_Init+0xe8>)
 800202e:	f004 fa9d 	bl	800656c <HAL_TIM_PWM_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002038:	f000 f9b6 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	4811      	ldr	r0, [pc, #68]	; (8002090 <MX_TIM3_Init+0xe8>)
 800204c:	f005 face 	bl	80075ec <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002056:	f000 f9a7 	bl	80023a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205a:	2360      	movs	r3, #96	; 0x60
 800205c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	2208      	movs	r2, #8
 800206e:	4619      	mov	r1, r3
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <MX_TIM3_Init+0xe8>)
 8002072:	f004 fcf7 	bl	8006a64 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800207c:	f000 f994 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <MX_TIM3_Init+0xe8>)
 8002082:	f000 fe61 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 8002086:	bf00      	nop
 8002088:	3738      	adds	r7, #56	; 0x38
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000318 	.word	0x20000318
 8002094:	40000400 	.word	0x40000400

08002098 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_TIM7_Init+0x68>)
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <MX_TIM7_Init+0x6c>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 23999;
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <MX_TIM7_Init+0x68>)
 80020b0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80020b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_TIM7_Init+0x68>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3999;
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_TIM7_Init+0x68>)
 80020be:	f640 729f 	movw	r2, #3999	; 0xf9f
 80020c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <MX_TIM7_Init+0x68>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <MX_TIM7_Init+0x68>)
 80020cc:	f004 f97e 	bl	80063cc <HAL_TIM_Base_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80020d6:	f000 f967 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <MX_TIM7_Init+0x68>)
 80020e8:	f005 fa80 	bl	80075ec <HAL_TIMEx_MasterConfigSynchronization>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80020f2:	f000 f959 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000364 	.word	0x20000364
 8002104:	40001400 	.word	0x40001400

08002108 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_USART3_UART_Init+0x58>)
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <MX_USART3_UART_Init+0x5c>)
 8002110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <MX_USART3_UART_Init+0x58>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_USART3_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_USART3_UART_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_USART3_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_USART3_UART_Init+0x58>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_USART3_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_USART3_UART_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_USART3_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_USART3_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_USART3_UART_Init+0x58>)
 800214c:	f005 fafa 	bl	8007744 <HAL_UART_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002156:	f000 f927 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200003b0 	.word	0x200003b0
 8002164:	40004800 	.word	0x40004800

08002168 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800216e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002176:	2206      	movs	r2, #6
 8002178:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217c:	2202      	movs	r2, #2
 800217e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002188:	2202      	movs	r2, #2
 800218a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800218e:	2201      	movs	r2, #1
 8002190:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ac:	f002 fe69 	bl	8004e82 <HAL_PCD_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021b6:	f000 f8f7 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000438 	.word	0x20000438

080021c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b6e      	ldr	r3, [pc, #440]	; (8002394 <MX_GPIO_Init+0x1d0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a6d      	ldr	r2, [pc, #436]	; (8002394 <MX_GPIO_Init+0x1d0>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <MX_GPIO_Init+0x1d0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021f2:	4b68      	ldr	r3, [pc, #416]	; (8002394 <MX_GPIO_Init+0x1d0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a67      	ldr	r2, [pc, #412]	; (8002394 <MX_GPIO_Init+0x1d0>)
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800220a:	4b62      	ldr	r3, [pc, #392]	; (8002394 <MX_GPIO_Init+0x1d0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a61      	ldr	r2, [pc, #388]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a5b      	ldr	r2, [pc, #364]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <MX_GPIO_Init+0x1d0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a55      	ldr	r2, [pc, #340]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <MX_GPIO_Init+0x1d0>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a49      	ldr	r2, [pc, #292]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <MX_GPIO_Init+0x1d0>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f244 0181 	movw	r1, #16513	; 0x4081
 8002288:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_GPIO_Init+0x1d4>)
 800228a:	f001 ffd7 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	4842      	ldr	r0, [pc, #264]	; (800239c <MX_GPIO_Init+0x1d8>)
 8002294:	f001 ffd2 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	483c      	ldr	r0, [pc, #240]	; (80023a0 <MX_GPIO_Init+0x1dc>)
 80022b0:	f001 fe00 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022b4:	2332      	movs	r3, #50	; 0x32
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022c4:	230b      	movs	r3, #11
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4834      	ldr	r0, [pc, #208]	; (80023a0 <MX_GPIO_Init+0x1dc>)
 80022d0:	f001 fdf0 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022d4:	2386      	movs	r3, #134	; 0x86
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022e4:	230b      	movs	r3, #11
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	482d      	ldr	r0, [pc, #180]	; (80023a4 <MX_GPIO_Init+0x1e0>)
 80022f0:	f001 fde0 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80022f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	4822      	ldr	r0, [pc, #136]	; (8002398 <MX_GPIO_Init+0x1d4>)
 800230e:	f001 fdd1 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002324:	230b      	movs	r3, #11
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	481a      	ldr	r0, [pc, #104]	; (8002398 <MX_GPIO_Init+0x1d4>)
 8002330:	f001 fdc0 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002334:	2340      	movs	r3, #64	; 0x40
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4814      	ldr	r0, [pc, #80]	; (800239c <MX_GPIO_Init+0x1d8>)
 800234c:	f001 fdb2 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	480e      	ldr	r0, [pc, #56]	; (800239c <MX_GPIO_Init+0x1d8>)
 8002364:	f001 fda6 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002368:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800237a:	230b      	movs	r3, #11
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_GPIO_Init+0x1d8>)
 8002386:	f001 fd95 	bl	8003eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	; 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40020400 	.word	0x40020400
 800239c:	40021800 	.word	0x40021800
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020000 	.word	0x40020000

080023a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
}
 80023ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <Error_Handler+0x8>

080023b2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af04      	add	r7, sp, #16
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2301      	movs	r3, #1
 80023da:	2200      	movs	r2, #0
 80023dc:	2178      	movs	r1, #120	; 0x78
 80023de:	4803      	ldr	r0, [pc, #12]	; (80023ec <ssd1306_WriteCommand+0x2c>)
 80023e0:	f001 fff0 	bl	80043c4 <HAL_I2C_Mem_Write>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200002c4 	.word	0x200002c4

080023f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af04      	add	r7, sp, #16
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002402:	9202      	str	r2, [sp, #8]
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2301      	movs	r3, #1
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	2178      	movs	r1, #120	; 0x78
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <ssd1306_WriteData+0x30>)
 8002412:	f001 ffd7 	bl	80043c4 <HAL_I2C_Mem_Write>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200002c4 	.word	0x200002c4

08002424 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002428:	f7ff ffc3 	bl	80023b2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f000 ff4b 	bl	80032c8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002432:	2000      	movs	r0, #0
 8002434:	f000 fb1c 	bl	8002a70 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002438:	2020      	movs	r0, #32
 800243a:	f7ff ffc1 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800243e:	2000      	movs	r0, #0
 8002440:	f7ff ffbe 	bl	80023c0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002444:	20b0      	movs	r0, #176	; 0xb0
 8002446:	f7ff ffbb 	bl	80023c0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800244a:	20c8      	movs	r0, #200	; 0xc8
 800244c:	f7ff ffb8 	bl	80023c0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff ffb5 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002456:	2010      	movs	r0, #16
 8002458:	f7ff ffb2 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800245c:	2040      	movs	r0, #64	; 0x40
 800245e:	f7ff ffaf 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002462:	20ff      	movs	r0, #255	; 0xff
 8002464:	f000 faf0 	bl	8002a48 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002468:	20a1      	movs	r0, #161	; 0xa1
 800246a:	f7ff ffa9 	bl	80023c0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800246e:	20a6      	movs	r0, #166	; 0xa6
 8002470:	f7ff ffa6 	bl	80023c0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002474:	20a8      	movs	r0, #168	; 0xa8
 8002476:	f7ff ffa3 	bl	80023c0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800247a:	203f      	movs	r0, #63	; 0x3f
 800247c:	f7ff ffa0 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002480:	20a4      	movs	r0, #164	; 0xa4
 8002482:	f7ff ff9d 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002486:	20d3      	movs	r0, #211	; 0xd3
 8002488:	f7ff ff9a 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff ff97 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002492:	20d5      	movs	r0, #213	; 0xd5
 8002494:	f7ff ff94 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002498:	20f0      	movs	r0, #240	; 0xf0
 800249a:	f7ff ff91 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800249e:	20d9      	movs	r0, #217	; 0xd9
 80024a0:	f7ff ff8e 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80024a4:	2022      	movs	r0, #34	; 0x22
 80024a6:	f7ff ff8b 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024aa:	20da      	movs	r0, #218	; 0xda
 80024ac:	f7ff ff88 	bl	80023c0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024b0:	2012      	movs	r0, #18
 80024b2:	f7ff ff85 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024b6:	20db      	movs	r0, #219	; 0xdb
 80024b8:	f7ff ff82 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024bc:	2020      	movs	r0, #32
 80024be:	f7ff ff7f 	bl	80023c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024c2:	208d      	movs	r0, #141	; 0x8d
 80024c4:	f7ff ff7c 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024c8:	2014      	movs	r0, #20
 80024ca:	f7ff ff79 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 face 	bl	8002a70 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f000 f80f 	bl	80024f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024da:	f000 f825 	bl	8002528 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <ssd1306_Init+0xd0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <ssd1306_Init+0xd0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024ea:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <ssd1306_Init+0xd0>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	711a      	strb	r2, [r3, #4]
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200010a0 	.word	0x200010a0

080024f8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <ssd1306_Fill+0x14>
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <ssd1306_Fill+0x16>
 800250c:	23ff      	movs	r3, #255	; 0xff
 800250e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002512:	4619      	mov	r1, r3
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <ssd1306_Fill+0x2c>)
 8002516:	f007 fee0 	bl	800a2da <memset>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000ca0 	.word	0x20000ca0

08002528 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	71fb      	strb	r3, [r7, #7]
 8002532:	e016      	b.n	8002562 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	3b50      	subs	r3, #80	; 0x50
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff40 	bl	80023c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002540:	2000      	movs	r0, #0
 8002542:	f7ff ff3d 	bl	80023c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002546:	2010      	movs	r0, #16
 8002548:	f7ff ff3a 	bl	80023c0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	01db      	lsls	r3, r3, #7
 8002550:	4a08      	ldr	r2, [pc, #32]	; (8002574 <ssd1306_UpdateScreen+0x4c>)
 8002552:	4413      	add	r3, r2
 8002554:	2180      	movs	r1, #128	; 0x80
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff4a 	bl	80023f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	3301      	adds	r3, #1
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2b07      	cmp	r3, #7
 8002566:	d9e5      	bls.n	8002534 <ssd1306_UpdateScreen+0xc>
    }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000ca0 	.word	0x20000ca0

08002578 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	460b      	mov	r3, r1
 8002584:	71bb      	strb	r3, [r7, #6]
 8002586:	4613      	mov	r3, r2
 8002588:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db3d      	blt.n	800260e <ssd1306_DrawPixel+0x96>
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	2b3f      	cmp	r3, #63	; 0x3f
 8002596:	d83a      	bhi.n	800260e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002598:	797b      	ldrb	r3, [r7, #5]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d11a      	bne.n	80025d4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800259e:	79fa      	ldrb	r2, [r7, #7]
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2d8      	uxtb	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4413      	add	r3, r2
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <ssd1306_DrawPixel+0xa4>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	b25a      	sxtb	r2, r3
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b259      	sxtb	r1, r3
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	4603      	mov	r3, r0
 80025c8:	01db      	lsls	r3, r3, #7
 80025ca:	4413      	add	r3, r2
 80025cc:	b2c9      	uxtb	r1, r1
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <ssd1306_DrawPixel+0xa4>)
 80025d0:	54d1      	strb	r1, [r2, r3]
 80025d2:	e01d      	b.n	8002610 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	b2d8      	uxtb	r0, r3
 80025dc:	4603      	mov	r3, r0
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	4413      	add	r3, r2
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <ssd1306_DrawPixel+0xa4>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	b25a      	sxtb	r2, r3
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	4013      	ands	r3, r2
 80025fc:	b259      	sxtb	r1, r3
 80025fe:	79fa      	ldrb	r2, [r7, #7]
 8002600:	4603      	mov	r3, r0
 8002602:	01db      	lsls	r3, r3, #7
 8002604:	4413      	add	r3, r2
 8002606:	b2c9      	uxtb	r1, r1
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <ssd1306_DrawPixel+0xa4>)
 800260a:	54d1      	strb	r1, [r2, r3]
 800260c:	e000      	b.n	8002610 <ssd1306_DrawPixel+0x98>
        return;
 800260e:	bf00      	nop
    }
}
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000ca0 	.word	0x20000ca0

08002620 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	4604      	mov	r4, r0
 8002628:	1d38      	adds	r0, r7, #4
 800262a:	e880 0006 	stmia.w	r0, {r1, r2}
 800262e:	461a      	mov	r2, r3
 8002630:	4623      	mov	r3, r4
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	4613      	mov	r3, r2
 8002636:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b1f      	cmp	r3, #31
 800263c:	d902      	bls.n	8002644 <ssd1306_WriteChar+0x24>
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b7e      	cmp	r3, #126	; 0x7e
 8002642:	d901      	bls.n	8002648 <ssd1306_WriteChar+0x28>
        return 0;
 8002644:	2300      	movs	r3, #0
 8002646:	e06d      	b.n	8002724 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <ssd1306_WriteChar+0x10c>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	793b      	ldrb	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	2b80      	cmp	r3, #128	; 0x80
 8002654:	dc06      	bgt.n	8002664 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <ssd1306_WriteChar+0x10c>)
 8002658:	885b      	ldrh	r3, [r3, #2]
 800265a:	461a      	mov	r2, r3
 800265c:	797b      	ldrb	r3, [r7, #5]
 800265e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	dd01      	ble.n	8002668 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002664:	2300      	movs	r3, #0
 8002666:	e05d      	b.n	8002724 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	e04c      	b.n	8002708 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	3b20      	subs	r3, #32
 8002674:	7979      	ldrb	r1, [r7, #5]
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4619      	mov	r1, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	440b      	add	r3, r1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e034      	b.n	80026f8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <ssd1306_WriteChar+0x10c>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <ssd1306_WriteChar+0x10c>)
 80026ae:	885b      	ldrh	r3, [r3, #2]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	7bba      	ldrb	r2, [r7, #14]
 80026bc:	4619      	mov	r1, r3
 80026be:	f7ff ff5b 	bl	8002578 <ssd1306_DrawPixel>
 80026c2:	e016      	b.n	80026f2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <ssd1306_WriteChar+0x10c>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	b2d8      	uxtb	r0, r3
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <ssd1306_WriteChar+0x10c>)
 80026d4:	885b      	ldrh	r3, [r3, #2]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4413      	add	r3, r2
 80026de:	b2d9      	uxtb	r1, r3
 80026e0:	7bbb      	ldrb	r3, [r7, #14]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	f7ff ff43 	bl	8002578 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	793b      	ldrb	r3, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d3c5      	bcc.n	800268e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	797b      	ldrb	r3, [r7, #5]
 800270a:	461a      	mov	r2, r3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4293      	cmp	r3, r2
 8002710:	d3ad      	bcc.n	800266e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <ssd1306_WriteChar+0x10c>)
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	793b      	ldrb	r3, [r7, #4]
 8002718:	b29b      	uxth	r3, r3
 800271a:	4413      	add	r3, r2
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b03      	ldr	r3, [pc, #12]	; (800272c <ssd1306_WriteChar+0x10c>)
 8002720:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3724      	adds	r7, #36	; 0x24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}
 800272c:	200010a0 	.word	0x200010a0

08002730 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	1d38      	adds	r0, r7, #4
 800273a:	e880 0006 	stmia.w	r0, {r1, r2}
 800273e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002740:	e012      	b.n	8002768 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	7818      	ldrb	r0, [r3, #0]
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	1d3a      	adds	r2, r7, #4
 800274a:	ca06      	ldmia	r2, {r1, r2}
 800274c:	f7ff ff68 	bl	8002620 <ssd1306_WriteChar>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d002      	beq.n	8002762 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	e008      	b.n	8002774 <ssd1306_WriteString+0x44>
        }
        str++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3301      	adds	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e8      	bne.n	8002742 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	781b      	ldrb	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	460a      	mov	r2, r1
 8002786:	71fb      	strb	r3, [r7, #7]
 8002788:	4613      	mov	r3, r2
 800278a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <ssd1306_SetCursor+0x2c>)
 8002792:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <ssd1306_SetCursor+0x2c>)
 800279a:	805a      	strh	r2, [r3, #2]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	200010a0 	.word	0x200010a0

080027ac <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4604      	mov	r4, r0
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	71fb      	strb	r3, [r7, #7]
 80027be:	4603      	mov	r3, r0
 80027c0:	71bb      	strb	r3, [r7, #6]
 80027c2:	460b      	mov	r3, r1
 80027c4:	717b      	strb	r3, [r7, #5]
 80027c6:	4613      	mov	r3, r2
 80027c8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80027ca:	797a      	ldrb	r2, [r7, #5]
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bfb8      	it	lt
 80027d4:	425b      	neglt	r3, r3
 80027d6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80027d8:	793a      	ldrb	r2, [r7, #4]
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bfb8      	it	lt
 80027e2:	425b      	neglt	r3, r3
 80027e4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80027e6:	79fa      	ldrb	r2, [r7, #7]
 80027e8:	797b      	ldrb	r3, [r7, #5]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d201      	bcs.n	80027f2 <ssd1306_Line+0x46>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e001      	b.n	80027f6 <ssd1306_Line+0x4a>
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80027f8:	79ba      	ldrb	r2, [r7, #6]
 80027fa:	793b      	ldrb	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d201      	bcs.n	8002804 <ssd1306_Line+0x58>
 8002800:	2301      	movs	r3, #1
 8002802:	e001      	b.n	8002808 <ssd1306_Line+0x5c>
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002812:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002816:	7939      	ldrb	r1, [r7, #4]
 8002818:	797b      	ldrb	r3, [r7, #5]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff feac 	bl	8002578 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002820:	e024      	b.n	800286c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002822:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002826:	79b9      	ldrb	r1, [r7, #6]
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fea4 	bl	8002578 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	425b      	negs	r3, r3
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	dd08      	ble.n	8002852 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4413      	add	r3, r2
 8002850:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	429a      	cmp	r2, r3
 8002858:	da08      	bge.n	800286c <ssd1306_Line+0xc0>
            error += deltaX;
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	79bb      	ldrb	r3, [r7, #6]
 8002868:	4413      	add	r3, r2
 800286a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	797b      	ldrb	r3, [r7, #5]
 8002870:	429a      	cmp	r2, r3
 8002872:	d1d6      	bne.n	8002822 <ssd1306_Line+0x76>
 8002874:	79ba      	ldrb	r2, [r7, #6]
 8002876:	793b      	ldrb	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	d1d2      	bne.n	8002822 <ssd1306_Line+0x76>
        }
    }
    return;
 800287c:	bf00      	nop
}
 800287e:	3724      	adds	r7, #36	; 0x24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}

08002884 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4623      	mov	r3, r4
 8002894:	71fb      	strb	r3, [r7, #7]
 8002896:	4603      	mov	r3, r0
 8002898:	71bb      	strb	r3, [r7, #6]
 800289a:	460b      	mov	r3, r1
 800289c:	717b      	strb	r3, [r7, #5]
 800289e:	4613      	mov	r3, r2
 80028a0:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80028a2:	797b      	ldrb	r3, [r7, #5]
 80028a4:	425b      	negs	r3, r3
 80028a6:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80028ac:	797b      	ldrb	r3, [r7, #5]
 80028ae:	f1c3 0301 	rsb	r3, r3, #1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db65      	blt.n	800298a <ssd1306_DrawCircle+0x106>
 80028be:	79bb      	ldrb	r3, [r7, #6]
 80028c0:	2b3f      	cmp	r3, #63	; 0x3f
 80028c2:	d862      	bhi.n	800298a <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	79fa      	ldrb	r2, [r7, #7]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	b2d8      	uxtb	r0, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	79bb      	ldrb	r3, [r7, #6]
 80028d4:	4413      	add	r3, r2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	793a      	ldrb	r2, [r7, #4]
 80028da:	4619      	mov	r1, r3
 80028dc:	f7ff fe4c 	bl	8002578 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	4413      	add	r3, r2
 80028e8:	b2d8      	uxtb	r0, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	4413      	add	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	793a      	ldrb	r2, [r7, #4]
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7ff fe3e 	bl	8002578 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4413      	add	r3, r2
 8002904:	b2d8      	uxtb	r0, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	79ba      	ldrb	r2, [r7, #6]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	793a      	ldrb	r2, [r7, #4]
 8002912:	4619      	mov	r1, r3
 8002914:	f7ff fe30 	bl	8002578 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	b2d8      	uxtb	r0, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	79ba      	ldrb	r2, [r7, #6]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	793a      	ldrb	r2, [r7, #4]
 800292e:	4619      	mov	r1, r3
 8002930:	f7ff fe22 	bl	8002578 <ssd1306_DrawPixel>
        e2 = err;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	dc13      	bgt.n	8002968 <ssd1306_DrawCircle+0xe4>
            y++;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	3301      	adds	r3, #1
 8002944:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	3301      	adds	r3, #1
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	425b      	negs	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d105      	bne.n	8002968 <ssd1306_DrawCircle+0xe4>
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	dc01      	bgt.n	8002968 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	dd08      	ble.n	8002982 <ssd1306_DrawCircle+0xfe>
            x++;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	3301      	adds	r3, #1
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	dd9d      	ble.n	80028c4 <ssd1306_DrawCircle+0x40>

    return;
 8002988:	e000      	b.n	800298c <ssd1306_DrawCircle+0x108>
        return;
 800298a:	bf00      	nop
}
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd90      	pop	{r4, r7, pc}

08002992 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	603a      	str	r2, [r7, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
 80029a0:	460b      	mov	r3, r1
 80029a2:	71bb      	strb	r3, [r7, #6]
 80029a4:	4613      	mov	r3, r2
 80029a6:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80029a8:	797b      	ldrb	r3, [r7, #5]
 80029aa:	3307      	adds	r3, #7
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da00      	bge.n	80029b2 <ssd1306_DrawBitmap+0x20>
 80029b0:	3307      	adds	r3, #7
 80029b2:	10db      	asrs	r3, r3, #3
 80029b4:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db3e      	blt.n	8002a40 <ssd1306_DrawBitmap+0xae>
 80029c2:	79bb      	ldrb	r3, [r7, #6]
 80029c4:	2b3f      	cmp	r3, #63	; 0x3f
 80029c6:	d83b      	bhi.n	8002a40 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80029c8:	2300      	movs	r3, #0
 80029ca:	73bb      	strb	r3, [r7, #14]
 80029cc:	e033      	b.n	8002a36 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80029ce:	2300      	movs	r3, #0
 80029d0:	737b      	strb	r3, [r7, #13]
 80029d2:	e026      	b.n	8002a22 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80029d4:	7b7b      	ldrb	r3, [r7, #13]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	e00d      	b.n	8002a02 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	7b7a      	ldrb	r2, [r7, #13]
 80029f2:	08d2      	lsrs	r2, r2, #3
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	4413      	add	r3, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da08      	bge.n	8002a1c <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002a0a:	79fa      	ldrb	r2, [r7, #7]
 8002a0c:	7b7b      	ldrb	r3, [r7, #13]
 8002a0e:	4413      	add	r3, r2
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	7f3a      	ldrb	r2, [r7, #28]
 8002a14:	79b9      	ldrb	r1, [r7, #6]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fdae 	bl	8002578 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002a1c:	7b7b      	ldrb	r3, [r7, #13]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	737b      	strb	r3, [r7, #13]
 8002a22:	7b7a      	ldrb	r2, [r7, #13]
 8002a24:	797b      	ldrb	r3, [r7, #5]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3d4      	bcc.n	80029d4 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73bb      	strb	r3, [r7, #14]
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	3301      	adds	r3, #1
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	7bba      	ldrb	r2, [r7, #14]
 8002a38:	7e3b      	ldrb	r3, [r7, #24]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3c7      	bcc.n	80029ce <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002a3e:	e000      	b.n	8002a42 <ssd1306_DrawBitmap+0xb0>
        return;
 8002a40:	bf00      	nop
}
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002a52:	2381      	movs	r3, #129	; 0x81
 8002a54:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fcb1 	bl	80023c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fcad 	bl	80023c0 <ssd1306_WriteCommand>
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002a80:	23af      	movs	r3, #175	; 0xaf
 8002a82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <ssd1306_SetDisplayOn+0x38>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	715a      	strb	r2, [r3, #5]
 8002a8a:	e004      	b.n	8002a96 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002a8c:	23ae      	movs	r3, #174	; 0xae
 8002a8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <ssd1306_SetDisplayOn+0x38>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fc91 	bl	80023c0 <ssd1306_WriteCommand>
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200010a0 	.word	0x200010a0

08002aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_MspInit+0x44>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_MspInit+0x44>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_MspInit+0x44>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_MspInit+0x44>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_MspInit+0x44>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_MspInit+0x44>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_ADC_MspInit+0x74>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d123      	bne.n	8002b5e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_ADC_MspInit+0x78>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_ADC_MspInit+0x78>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_ADC_MspInit+0x78>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_ADC_MspInit+0x78>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_ADC_MspInit+0x78>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_ADC_MspInit+0x78>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	4805      	ldr	r0, [pc, #20]	; (8002b70 <HAL_ADC_MspInit+0x7c>)
 8002b5a:	f001 f9ab 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40012000 	.word	0x40012000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020000 	.word	0x40020000

08002b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b0b0      	sub	sp, #192	; 0xc0
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	2290      	movs	r2, #144	; 0x90
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f007 fba0 	bl	800a2da <memset>
  if(hi2c->Instance==I2C1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a44      	ldr	r2, [pc, #272]	; (8002cb0 <HAL_I2C_MspInit+0x13c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d13e      	bne.n	8002c22 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 ffe1 	bl	8005b7c <HAL_RCCEx_PeriphCLKConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002bc0:	f7ff fbf2 	bl	80023a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002bdc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be4:	2312      	movs	r3, #18
 8002be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c00:	4619      	mov	r1, r3
 8002c02:	482d      	ldr	r0, [pc, #180]	; (8002cb8 <HAL_I2C_MspInit+0x144>)
 8002c04:	f001 f956 	bl	8003eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c12:	6413      	str	r3, [r2, #64]	; 0x40
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c20:	e041      	b.n	8002ca6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_I2C_MspInit+0x148>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d13c      	bne.n	8002ca6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c30:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 ff9d 	bl	8005b7c <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002c48:	f7ff fbae 	bl	80023a8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c52:	f043 0320 	orr.w	r3, r3, #32
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c64:	2303      	movs	r3, #3
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6a:	2312      	movs	r3, #18
 8002c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c86:	4619      	mov	r1, r3
 8002c88:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <HAL_I2C_MspInit+0x14c>)
 8002c8a:	f001 f913 	bl	8003eb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_I2C_MspInit+0x140>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	37c0      	adds	r7, #192	; 0xc0
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40005800 	.word	0x40005800
 8002cc0:	40021400 	.word	0x40021400

08002cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_TIM_Base_MspInit+0x78>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d114      	bne.n	8002d00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_TIM_Base_MspInit+0x7c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_TIM_Base_MspInit+0x7c>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_TIM_Base_MspInit+0x7c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	201d      	movs	r0, #29
 8002cf4:	f001 f815 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cf8:	201d      	movs	r0, #29
 8002cfa:	f001 f82e 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002cfe:	e018      	b.n	8002d32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <HAL_TIM_Base_MspInit+0x80>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d113      	bne.n	8002d32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_TIM_Base_MspInit+0x7c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_TIM_Base_MspInit+0x7c>)
 8002d10:	f043 0320 	orr.w	r3, r3, #32
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_TIM_Base_MspInit+0x7c>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2037      	movs	r0, #55	; 0x37
 8002d28:	f000 fffb 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d2c:	2037      	movs	r0, #55	; 0x37
 8002d2e:	f001 f814 	bl	8003d5a <HAL_NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40001400 	.word	0x40001400

08002d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_TIM_MspPostInit+0x64>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d11c      	bne.n	8002da4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d94:	2302      	movs	r3, #2
 8002d96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <HAL_TIM_MspPostInit+0x6c>)
 8002da0:	f001 f888 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002da4:	bf00      	nop
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020800 	.word	0x40020800

08002db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0ae      	sub	sp, #184	; 0xb8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2290      	movs	r2, #144	; 0x90
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f007 fa7e 	bl	800a2da <memset>
  if(huart->Instance==USART3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <HAL_UART_MspInit+0xc4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d144      	bne.n	8002e72 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fec0 	bl	8005b7c <HAL_RCCEx_PeriphCLKConfig>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e02:	f7ff fad1 	bl	80023a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_UART_MspInit+0xc8>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_UART_MspInit+0xc8>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_UART_MspInit+0xc8>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_UART_MspInit+0xc8>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_UART_MspInit+0xc8>)
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_UART_MspInit+0xc8>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e50:	2307      	movs	r3, #7
 8002e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <HAL_UART_MspInit+0xcc>)
 8002e5e:	f001 f829 	bl	8003eb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2027      	movs	r0, #39	; 0x27
 8002e68:	f000 ff5b 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e6c:	2027      	movs	r0, #39	; 0x27
 8002e6e:	f000 ff74 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e72:	bf00      	nop
 8002e74:	37b8      	adds	r7, #184	; 0xb8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40004800 	.word	0x40004800
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020c00 	.word	0x40020c00

08002e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b0ae      	sub	sp, #184	; 0xb8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2290      	movs	r2, #144	; 0x90
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f007 fa16 	bl	800a2da <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb6:	d159      	bne.n	8002f6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ebc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fe57 	bl	8005b7c <HAL_RCCEx_PeriphCLKConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002ed4:	f7ff fa68 	bl	80023a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ef0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4818      	ldr	r0, [pc, #96]	; (8002f78 <HAL_PCD_MspInit+0xf0>)
 8002f18:	f000 ffcc 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4810      	ldr	r0, [pc, #64]	; (8002f78 <HAL_PCD_MspInit+0xf0>)
 8002f38:	f000 ffbc 	bl	8003eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	6353      	str	r3, [r2, #52]	; 0x34
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	4a06      	ldr	r2, [pc, #24]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <HAL_PCD_MspInit+0xec>)
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f6c:	bf00      	nop
 8002f6e:	37b8      	adds	r7, #184	; 0xb8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020000 	.word	0x40020000

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <NMI_Handler+0x4>

08002f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <MemManage_Handler+0x4>

08002f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <BusFault_Handler+0x4>

08002f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <UsageFault_Handler+0x4>

08002f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc8:	f000 f95e 	bl	8003288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <TIM3_IRQHandler+0x10>)
 8002fd6:	f003 fc25 	bl	8006824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000318 	.word	0x20000318

08002fe4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <USART3_IRQHandler+0x10>)
 8002fea:	f004 fcc1 	bl	8007970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200003b0 	.word	0x200003b0

08002ff8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <TIM7_IRQHandler+0x10>)
 8002ffe:	f003 fc11 	bl	8006824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000364 	.word	0x20000364

0800300c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_kill>:

int _kill(int pid, int sig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003026:	f007 f9ab 	bl	800a380 <__errno>
 800302a:	4603      	mov	r3, r0
 800302c:	2216      	movs	r2, #22
 800302e:	601a      	str	r2, [r3, #0]
  return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_exit>:

void _exit (int status)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ffe7 	bl	800301c <_kill>
  while (1) {}    /* Make sure we hang here */
 800304e:	e7fe      	b.n	800304e <_exit+0x12>

08003050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00a      	b.n	8003078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003062:	f3af 8000 	nop.w
 8003066:	4601      	mov	r1, r0
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	60ba      	str	r2, [r7, #8]
 800306e:	b2ca      	uxtb	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf0      	blt.n	8003062 <_read+0x12>
  }

  return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e009      	b.n	80030b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	60ba      	str	r2, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf1      	blt.n	800309c <_write+0x12>
  }
  return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_close>:

int _close(int file)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ea:	605a      	str	r2, [r3, #4]
  return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <_isatty>:

int _isatty(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f007 f910 	bl	800a380 <__errno>
 8003160:	4603      	mov	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <_sbrk+0x64>)
 800317c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20080000 	.word	0x20080000
 800318c:	00000400 	.word	0x00000400
 8003190:	200010a8 	.word	0x200010a8
 8003194:	20001200 	.word	0x20001200

08003198 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <SystemInit+0x20>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <SystemInit+0x20>)
 80031a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c0:	480d      	ldr	r0, [pc, #52]	; (80031f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031c2:	490e      	ldr	r1, [pc, #56]	; (80031fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031c4:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031d8:	4c0b      	ldr	r4, [pc, #44]	; (8003208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031e6:	f7ff ffd7 	bl	8003198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ea:	f007 f8cf 	bl	800a38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ee:	f7fe fb97 	bl	8001920 <main>
  bx  lr    
 80031f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80031f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003200:	0800ef4c 	.word	0x0800ef4c
  ldr r2, =_sbss
 8003204:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003208:	200011fc 	.word	0x200011fc

0800320c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800320c:	e7fe      	b.n	800320c <ADC_IRQHandler>

0800320e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003212:	2003      	movs	r0, #3
 8003214:	f000 fd7a 	bl	8003d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003218:	2000      	movs	r0, #0
 800321a:	f000 f805 	bl	8003228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321e:	f7ff fc45 	bl	8002aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_InitTick+0x54>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_InitTick+0x58>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800323e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fd95 	bl	8003d76 <HAL_SYSTICK_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e00e      	b.n	8003274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b0f      	cmp	r3, #15
 800325a:	d80a      	bhi.n	8003272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800325c:	2200      	movs	r2, #0
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f000 fd5d 	bl	8003d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003268:	4a06      	ldr	r2, [pc, #24]	; (8003284 <HAL_InitTick+0x5c>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e000      	b.n	8003274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000014 	.word	0x20000014
 8003280:	2000001c 	.word	0x2000001c
 8003284:	20000018 	.word	0x20000018

08003288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x20>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x24>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_IncTick+0x24>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000001c 	.word	0x2000001c
 80032ac:	200010ac 	.word	0x200010ac

080032b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_GetTick+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	200010ac 	.word	0x200010ac

080032c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff ffee 	bl	80032b0 <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d005      	beq.n	80032ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_Delay+0x44>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ee:	bf00      	nop
 80032f0:	f7ff ffde 	bl	80032b0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d8f7      	bhi.n	80032f0 <HAL_Delay+0x28>
  {
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000001c 	.word	0x2000001c

08003310 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e031      	b.n	800338a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fbe0 	bl	8002af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_ADC_Init+0x84>)
 8003354:	4013      	ands	r3, r2
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fb0a 	bl	8003978 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
 800337a:	e001      	b.n	8003380 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	ffffeefd 	.word	0xffffeefd

08003398 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Start+0x1a>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0ad      	b.n	800350e <HAL_ADC_Start+0x176>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d018      	beq.n	80033fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_ADC_Start+0x184>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a50      	ldr	r2, [pc, #320]	; (8003520 <HAL_ADC_Start+0x188>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9a      	lsrs	r2, r3, #18
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033ec:	e002      	b.n	80033f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f9      	bne.n	80033ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d175      	bne.n	80034f4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_ADC_Start+0x18c>)
 800340e:	4013      	ands	r3, r2
 8003410:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800342e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003442:	d106      	bne.n	8003452 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f023 0206 	bic.w	r2, r3, #6
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
 8003450:	e002      	b.n	8003458 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003468:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_ADC_Start+0x190>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10f      	bne.n	8003496 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d143      	bne.n	800350c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	e03a      	b.n	800350c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <HAL_ADC_Start+0x194>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10e      	bne.n	80034be <HAL_ADC_Start+0x126>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034bc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_ADC_Start+0x190>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d120      	bne.n	800350c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_ADC_Start+0x198>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d11b      	bne.n	800350c <HAL_ADC_Start+0x174>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d114      	bne.n	800350c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	e00b      	b.n	800350c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0210 	orr.w	r2, r3, #16
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000014 	.word	0x20000014
 8003520:	431bde83 	.word	0x431bde83
 8003524:	fffff8fe 	.word	0xfffff8fe
 8003528:	40012300 	.word	0x40012300
 800352c:	40012000 	.word	0x40012000
 8003530:	40012200 	.word	0x40012200

08003534 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_ADC_Stop+0x16>
 8003546:	2302      	movs	r3, #2
 8003548:	e01f      	b.n	800358a <HAL_ADC_Stop+0x56>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_ADC_Stop+0x64>)
 8003576:	4013      	ands	r3, r2
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	ffffeefe 	.word	0xffffeefe

0800359c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b8:	d113      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	d10b      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e063      	b.n	80036aa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035e2:	f7ff fe65 	bl	80032b0 <HAL_GetTick>
 80035e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035e8:	e021      	b.n	800362e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d01d      	beq.n	800362e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_ADC_PollForConversion+0x6c>
 80035f8:	f7ff fe5a 	bl	80032b0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d212      	bcs.n	800362e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d00b      	beq.n	800362e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e03d      	b.n	80036aa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d1d6      	bne.n	80035ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0212 	mvn.w	r2, #18
 8003644:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d123      	bne.n	80036a8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11f      	bne.n	80036a8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e136      	b.n	8003956 <HAL_ADC_ConfigChannel+0x28a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	d93a      	bls.n	800376e <HAL_ADC_ConfigChannel+0xa2>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003700:	d035      	beq.n	800376e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68d9      	ldr	r1, [r3, #12]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	3b1e      	subs	r3, #30
 8003718:	2207      	movs	r2, #7
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43da      	mvns	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	400a      	ands	r2, r1
 8003726:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a8d      	ldr	r2, [pc, #564]	; (8003964 <HAL_ADC_ConfigChannel+0x298>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10a      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68d9      	ldr	r1, [r3, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	061a      	lsls	r2, r3, #24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003746:	e035      	b.n	80037b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4618      	mov	r0, r3
 800375a:	4603      	mov	r3, r0
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4403      	add	r3, r0
 8003760:	3b1e      	subs	r3, #30
 8003762:	409a      	lsls	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800376c:	e022      	b.n	80037b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6919      	ldr	r1, [r3, #16]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	2207      	movs	r2, #7
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43da      	mvns	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	400a      	ands	r2, r1
 8003790:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6919      	ldr	r1, [r3, #16]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4403      	add	r3, r0
 80037aa:	409a      	lsls	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d824      	bhi.n	8003806 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b05      	subs	r3, #5
 80037ce:	221f      	movs	r2, #31
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43da      	mvns	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	400a      	ands	r2, r1
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	3b05      	subs	r3, #5
 80037f8:	fa00 f203 	lsl.w	r2, r0, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	635a      	str	r2, [r3, #52]	; 0x34
 8003804:	e04c      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d824      	bhi.n	8003858 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	3b23      	subs	r3, #35	; 0x23
 8003820:	221f      	movs	r2, #31
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	400a      	ands	r2, r1
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	4618      	mov	r0, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	3b23      	subs	r3, #35	; 0x23
 800384a:	fa00 f203 	lsl.w	r2, r0, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
 8003856:	e023      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	3b41      	subs	r3, #65	; 0x41
 800386a:	221f      	movs	r2, #31
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	4618      	mov	r0, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3b41      	subs	r3, #65	; 0x41
 8003894:	fa00 f203 	lsl.w	r2, r0, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a30      	ldr	r2, [pc, #192]	; (8003968 <HAL_ADC_ConfigChannel+0x29c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10a      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x1f4>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b2:	d105      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038b4:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 80038ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_ADC_ConfigChannel+0x29c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10f      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x21e>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b12      	cmp	r3, #18
 80038d0:	d10b      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 80038d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4a22      	ldr	r2, [pc, #136]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 80038e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <HAL_ADC_ConfigChannel+0x29c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d12b      	bne.n	800394c <HAL_ADC_ConfigChannel+0x280>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_ADC_ConfigChannel+0x298>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <HAL_ADC_ConfigChannel+0x23a>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b11      	cmp	r3, #17
 8003904:	d122      	bne.n	800394c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 800390c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003910:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <HAL_ADC_ConfigChannel+0x2a0>)
 8003918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800391c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_ADC_ConfigChannel+0x298>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_ADC_ConfigChannel+0x2a4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a11      	ldr	r2, [pc, #68]	; (8003974 <HAL_ADC_ConfigChannel+0x2a8>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9a      	lsrs	r2, r3, #18
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800393e:	e002      	b.n	8003946 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3b01      	subs	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f9      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	10000012 	.word	0x10000012
 8003968:	40012000 	.word	0x40012000
 800396c:	40012300 	.word	0x40012300
 8003970:	20000014 	.word	0x20000014
 8003974:	431bde83 	.word	0x431bde83

08003978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003980:	4b78      	ldr	r3, [pc, #480]	; (8003b64 <ADC_Init+0x1ec>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a77      	ldr	r2, [pc, #476]	; (8003b64 <ADC_Init+0x1ec>)
 8003986:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800398a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800398c:	4b75      	ldr	r3, [pc, #468]	; (8003b64 <ADC_Init+0x1ec>)
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4973      	ldr	r1, [pc, #460]	; (8003b64 <ADC_Init+0x1ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <ADC_Init+0x1f0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	e00f      	b.n	8003a72 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0202 	bic.w	r2, r2, #2
 8003a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6899      	ldr	r1, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	005a      	lsls	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01b      	beq.n	8003ad8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003abe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	3b01      	subs	r3, #1
 8003acc:	035a      	lsls	r2, r3, #13
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	e007      	b.n	8003ae8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	051a      	lsls	r2, r3, #20
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b2a:	025a      	lsls	r2, r3, #9
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	029a      	lsls	r2, r3, #10
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40012300 	.word	0x40012300
 8003b68:	0f000001 	.word	0x0f000001

08003b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <__NVIC_SetPriorityGrouping+0x40>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <__NVIC_SetPriorityGrouping+0x40>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00
 8003bb0:	05fa0000 	.word	0x05fa0000

08003bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <__NVIC_GetPriorityGrouping+0x18>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 0307 	and.w	r3, r3, #7
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	db0b      	blt.n	8003bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	4907      	ldr	r1, [pc, #28]	; (8003c08 <__NVIC_EnableIRQ+0x38>)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000e100 	.word	0xe000e100

08003c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	db0a      	blt.n	8003c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	490c      	ldr	r1, [pc, #48]	; (8003c58 <__NVIC_SetPriority+0x4c>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c34:	e00a      	b.n	8003c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4908      	ldr	r1, [pc, #32]	; (8003c5c <__NVIC_SetPriority+0x50>)
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	3b04      	subs	r3, #4
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	440b      	add	r3, r1
 8003c4a:	761a      	strb	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f1c3 0307 	rsb	r3, r3, #7
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf28      	it	cs
 8003c7e:	2304      	movcs	r3, #4
 8003c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d902      	bls.n	8003c90 <NVIC_EncodePriority+0x30>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3b03      	subs	r3, #3
 8003c8e:	e000      	b.n	8003c92 <NVIC_EncodePriority+0x32>
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43d9      	mvns	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	4313      	orrs	r3, r2
         );
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd8:	d301      	bcc.n	8003cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00f      	b.n	8003cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <SysTick_Config+0x40>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f7ff ff8e 	bl	8003c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <SysTick_Config+0x40>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <SysTick_Config+0x40>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000e010 	.word	0xe000e010

08003d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff29 	bl	8003b6c <__NVIC_SetPriorityGrouping>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d34:	f7ff ff3e 	bl	8003bb4 <__NVIC_GetPriorityGrouping>
 8003d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f7ff ff8e 	bl	8003c60 <NVIC_EncodePriority>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff5d 	bl	8003c0c <__NVIC_SetPriority>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff31 	bl	8003bd0 <__NVIC_EnableIRQ>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffa2 	bl	8003cc8 <SysTick_Config>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d9c:	f7ff fa88 	bl	80032b0 <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d008      	beq.n	8003dc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e052      	b.n	8003e66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0216 	bic.w	r2, r2, #22
 8003dce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <HAL_DMA_Abort+0x62>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0208 	bic.w	r2, r2, #8
 8003dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e10:	e013      	b.n	8003e3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e12:	f7ff fa4d 	bl	80032b0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d90c      	bls.n	8003e3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e015      	b.n	8003e66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e4      	bne.n	8003e12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	223f      	movs	r2, #63	; 0x3f
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d004      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e00c      	b.n	8003ea6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	e175      	b.n	80041c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	f040 8164 	bne.w	80041ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d005      	beq.n	8003f0a <HAL_GPIO_Init+0x56>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d130      	bne.n	8003f6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f40:	2201      	movs	r2, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 0201 	and.w	r2, r3, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d017      	beq.n	8003fa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d123      	bne.n	8003ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	08da      	lsrs	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3208      	adds	r2, #8
 8003fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	220f      	movs	r2, #15
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	08da      	lsrs	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3208      	adds	r2, #8
 8003ff6:	69b9      	ldr	r1, [r7, #24]
 8003ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	2203      	movs	r2, #3
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0203 	and.w	r2, r3, #3
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80be 	beq.w	80041ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403e:	4b66      	ldr	r3, [pc, #408]	; (80041d8 <HAL_GPIO_Init+0x324>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	4a65      	ldr	r2, [pc, #404]	; (80041d8 <HAL_GPIO_Init+0x324>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004048:	6453      	str	r3, [r2, #68]	; 0x44
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_GPIO_Init+0x324>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004056:	4a61      	ldr	r2, [pc, #388]	; (80041dc <HAL_GPIO_Init+0x328>)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a58      	ldr	r2, [pc, #352]	; (80041e0 <HAL_GPIO_Init+0x32c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d037      	beq.n	80040f2 <HAL_GPIO_Init+0x23e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a57      	ldr	r2, [pc, #348]	; (80041e4 <HAL_GPIO_Init+0x330>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_GPIO_Init+0x23a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a56      	ldr	r2, [pc, #344]	; (80041e8 <HAL_GPIO_Init+0x334>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02b      	beq.n	80040ea <HAL_GPIO_Init+0x236>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a55      	ldr	r2, [pc, #340]	; (80041ec <HAL_GPIO_Init+0x338>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d025      	beq.n	80040e6 <HAL_GPIO_Init+0x232>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a54      	ldr	r2, [pc, #336]	; (80041f0 <HAL_GPIO_Init+0x33c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01f      	beq.n	80040e2 <HAL_GPIO_Init+0x22e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a53      	ldr	r2, [pc, #332]	; (80041f4 <HAL_GPIO_Init+0x340>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d019      	beq.n	80040de <HAL_GPIO_Init+0x22a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_GPIO_Init+0x344>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_GPIO_Init+0x226>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a51      	ldr	r2, [pc, #324]	; (80041fc <HAL_GPIO_Init+0x348>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00d      	beq.n	80040d6 <HAL_GPIO_Init+0x222>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a50      	ldr	r2, [pc, #320]	; (8004200 <HAL_GPIO_Init+0x34c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <HAL_GPIO_Init+0x21e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4f      	ldr	r2, [pc, #316]	; (8004204 <HAL_GPIO_Init+0x350>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_GPIO_Init+0x21a>
 80040ca:	2309      	movs	r3, #9
 80040cc:	e012      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040ce:	230a      	movs	r3, #10
 80040d0:	e010      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040d2:	2308      	movs	r3, #8
 80040d4:	e00e      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040d6:	2307      	movs	r3, #7
 80040d8:	e00c      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040da:	2306      	movs	r3, #6
 80040dc:	e00a      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040de:	2305      	movs	r3, #5
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040e2:	2304      	movs	r3, #4
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004104:	4935      	ldr	r1, [pc, #212]	; (80041dc <HAL_GPIO_Init+0x328>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_GPIO_Init+0x354>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a34      	ldr	r2, [pc, #208]	; (8004208 <HAL_GPIO_Init+0x354>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_GPIO_Init+0x354>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a29      	ldr	r2, [pc, #164]	; (8004208 <HAL_GPIO_Init+0x354>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_GPIO_Init+0x354>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_GPIO_Init+0x354>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_GPIO_Init+0x354>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <HAL_GPIO_Init+0x354>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f ae86 	bls.w	8003ed4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	; 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40021400 	.word	0x40021400
 80041f8:	40021800 	.word	0x40021800
 80041fc:	40021c00 	.word	0x40021c00
 8004200:	40022000 	.word	0x40022000
 8004204:	40022400 	.word	0x40022400
 8004208:	40013c00 	.word	0x40013c00

0800420c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e001      	b.n	800422e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
 8004248:	4613      	mov	r3, r2
 800424a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004258:	e003      	b.n	8004262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	041a      	lsls	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	619a      	str	r2, [r3, #24]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	041a      	lsls	r2, r3, #16
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43d9      	mvns	r1, r3
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	400b      	ands	r3, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	619a      	str	r2, [r3, #24]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fe fc52 	bl	8002b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004304:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d107      	bne.n	800431e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	e006      	b.n	800432c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800432a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d104      	bne.n	800433e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800433c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <HAL_I2C_Init+0x11c>)
 800434a:	430b      	orrs	r3, r1
 800434c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800435c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	02008000 	.word	0x02008000

080043c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	460b      	mov	r3, r1
 80043d8:	813b      	strh	r3, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	f040 80f9 	bne.w	80045de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x34>
 80043f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0ed      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2C_Mem_Write+0x4e>
 800440e:	2302      	movs	r3, #2
 8004410:	e0e6      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800441a:	f7fe ff49 	bl	80032b0 <HAL_GetTick>
 800441e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2319      	movs	r3, #25
 8004426:	2201      	movs	r2, #1
 8004428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fac3 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0d1      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2221      	movs	r2, #33	; 0x21
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2240      	movs	r2, #64	; 0x40
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004464:	88f8      	ldrh	r0, [r7, #6]
 8004466:	893a      	ldrh	r2, [r7, #8]
 8004468:	8979      	ldrh	r1, [r7, #10]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4603      	mov	r3, r0
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f9d3 	bl	8004820 <I2C_RequestMemoryWrite>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0a9      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2bff      	cmp	r3, #255	; 0xff
 8004494:	d90e      	bls.n	80044b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	22ff      	movs	r2, #255	; 0xff
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8979      	ldrh	r1, [r7, #10]
 80044a4:	2300      	movs	r3, #0
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fc1f 	bl	8004cf0 <I2C_TransferConfig>
 80044b2:	e00f      	b.n	80044d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	8979      	ldrh	r1, [r7, #10]
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fc0e 	bl	8004cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 faad 	bl	8004a38 <I2C_WaitOnTXISFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e07b      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d034      	beq.n	800458c <HAL_I2C_Mem_Write+0x1c8>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d130      	bne.n	800458c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	2200      	movs	r2, #0
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fa3f 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e04d      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2bff      	cmp	r3, #255	; 0xff
 800454c:	d90e      	bls.n	800456c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	22ff      	movs	r2, #255	; 0xff
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	b2da      	uxtb	r2, r3
 800455a:	8979      	ldrh	r1, [r7, #10]
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fbc3 	bl	8004cf0 <I2C_TransferConfig>
 800456a:	e00f      	b.n	800458c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	b2da      	uxtb	r2, r3
 800457c:	8979      	ldrh	r1, [r7, #10]
 800457e:	2300      	movs	r3, #0
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fbb2 	bl	8004cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d19e      	bne.n	80044d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa8c 	bl	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e01a      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2220      	movs	r2, #32
 80045b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <HAL_I2C_Mem_Write+0x224>)
 80045be:	400b      	ands	r3, r1
 80045c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b20      	cmp	r3, #32
 8004610:	f040 80fd 	bne.w	800480e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_I2C_Mem_Read+0x34>
 800461a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004626:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0f1      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_I2C_Mem_Read+0x4e>
 8004636:	2302      	movs	r3, #2
 8004638:	e0ea      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004642:	f7fe fe35 	bl	80032b0 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2319      	movs	r3, #25
 800464e:	2201      	movs	r2, #1
 8004650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f9af 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0d5      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2222      	movs	r2, #34	; 0x22
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2240      	movs	r2, #64	; 0x40
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468c:	88f8      	ldrh	r0, [r7, #6]
 800468e:	893a      	ldrh	r2, [r7, #8]
 8004690:	8979      	ldrh	r1, [r7, #10]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4603      	mov	r3, r0
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f913 	bl	80048c8 <I2C_RequestMemoryRead>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0ad      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2bff      	cmp	r3, #255	; 0xff
 80046bc:	d90e      	bls.n	80046dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	4b52      	ldr	r3, [pc, #328]	; (8004818 <HAL_I2C_Mem_Read+0x22c>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fb0b 	bl	8004cf0 <I2C_TransferConfig>
 80046da:	e00f      	b.n	80046fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	8979      	ldrh	r1, [r7, #10]
 80046ee:	4b4a      	ldr	r3, [pc, #296]	; (8004818 <HAL_I2C_Mem_Read+0x22c>)
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fafa 	bl	8004cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2200      	movs	r2, #0
 8004704:	2104      	movs	r1, #4
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f956 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e07c      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d034      	beq.n	80047bc <HAL_I2C_Mem_Read+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d130      	bne.n	80047bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	2200      	movs	r2, #0
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f927 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e04d      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2bff      	cmp	r3, #255	; 0xff
 800477c:	d90e      	bls.n	800479c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	b2da      	uxtb	r2, r3
 800478a:	8979      	ldrh	r1, [r7, #10]
 800478c:	2300      	movs	r3, #0
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 faab 	bl	8004cf0 <I2C_TransferConfig>
 800479a:	e00f      	b.n	80047bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	8979      	ldrh	r1, [r7, #10]
 80047ae:	2300      	movs	r3, #0
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fa9a 	bl	8004cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d19a      	bne.n	80046fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f974 	bl	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e01a      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2220      	movs	r2, #32
 80047e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_I2C_Mem_Read+0x230>)
 80047ee:	400b      	ands	r3, r1
 80047f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	80002400 	.word	0x80002400
 800481c:	fe00e800 	.word	0xfe00e800

08004820 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	460b      	mov	r3, r1
 8004834:	813b      	strh	r3, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	8979      	ldrh	r1, [r7, #10]
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <I2C_RequestMemoryWrite+0xa4>)
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa51 	bl	8004cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f8f0 	bl	8004a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e02c      	b.n	80048bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
 8004872:	e015      	b.n	80048a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	b29b      	uxth	r3, r3
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8d6 	bl	8004a38 <I2C_WaitOnTXISFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e012      	b.n	80048bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004896:	893b      	ldrh	r3, [r7, #8]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f884 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	80002000 	.word	0x80002000

080048c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	4608      	mov	r0, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	461a      	mov	r2, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	817b      	strh	r3, [r7, #10]
 80048da:	460b      	mov	r3, r1
 80048dc:	813b      	strh	r3, [r7, #8]
 80048de:	4613      	mov	r3, r2
 80048e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	8979      	ldrh	r1, [r7, #10]
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <I2C_RequestMemoryRead+0xa4>)
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f9fe 	bl	8004cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f89d 	bl	8004a38 <I2C_WaitOnTXISFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e02c      	b.n	8004962 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800490e:	893b      	ldrh	r3, [r7, #8]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e015      	b.n	8004946 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800491a:	893b      	ldrh	r3, [r7, #8]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	b29b      	uxth	r3, r3
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	69b9      	ldr	r1, [r7, #24]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f883 	bl	8004a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e012      	b.n	8004962 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800493c:	893b      	ldrh	r3, [r7, #8]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2200      	movs	r2, #0
 800494e:	2140      	movs	r1, #64	; 0x40
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f831 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	80002000 	.word	0x80002000

08004970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b02      	cmp	r3, #2
 8004984:	d103      	bne.n	800498e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d007      	beq.n	80049ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	619a      	str	r2, [r3, #24]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c8:	e022      	b.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d01e      	beq.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7fe fc6d 	bl	80032b0 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d113      	bne.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e00f      	b.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d0cd      	beq.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a44:	e02c      	b.n	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f870 	bl	8004b30 <I2C_IsErrorOccurred>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e02a      	b.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d01e      	beq.n	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe fc25 	bl	80032b0 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d113      	bne.n	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e007      	b.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d1cb      	bne.n	8004a46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac4:	e028      	b.n	8004b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f830 	bl	8004b30 <I2C_IsErrorOccurred>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e026      	b.n	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ada:	f7fe fbe9 	bl	80032b0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d113      	bne.n	8004b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e007      	b.n	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d1cf      	bne.n	8004ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d068      	beq.n	8004c2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2210      	movs	r2, #16
 8004b62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b64:	e049      	b.n	8004bfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d045      	beq.n	8004bfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fe fb9f 	bl	80032b0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_IsErrorOccurred+0x54>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d13a      	bne.n	8004bfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	d121      	bne.n	8004bec <I2C_IsErrorOccurred+0xbc>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bae:	d01d      	beq.n	8004bec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d01a      	beq.n	8004bec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004bc6:	f7fe fb73 	bl	80032b0 <HAL_GetTick>
 8004bca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bcc:	e00e      	b.n	8004bec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bce:	f7fe fb6f 	bl	80032b0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b19      	cmp	r3, #25
 8004bda:	d907      	bls.n	8004bec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004bea:	e006      	b.n	8004bfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d1e9      	bne.n	8004bce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d003      	beq.n	8004c10 <I2C_IsErrorOccurred+0xe0>
 8004c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0aa      	beq.n	8004b66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f043 0304 	orr.w	r3, r3, #4
 8004c26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f043 0308 	orr.w	r3, r3, #8
 8004c68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00b      	beq.n	8004c9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f043 0302 	orr.w	r3, r3, #2
 8004c8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff fe63 	bl	8004970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <I2C_IsErrorOccurred+0x1bc>)
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3728      	adds	r7, #40	; 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	fe00e800 	.word	0xfe00e800

08004cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d02:	897b      	ldrh	r3, [r7, #10]
 8004d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d08:	7a7b      	ldrb	r3, [r7, #9]
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	0d5b      	lsrs	r3, r3, #21
 8004d2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <I2C_TransferConfig+0x60>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	43db      	mvns	r3, r3
 8004d34:	ea02 0103 	and.w	r1, r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	03ff63ff 	.word	0x03ff63ff

08004d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d138      	bne.n	8004ddc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e032      	b.n	8004dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	; 0x24
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004da6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6819      	ldr	r1, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e000      	b.n	8004dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d139      	bne.n	8004e74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e033      	b.n	8004e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2224      	movs	r2, #36	; 0x24
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e84:	b08f      	sub	sp, #60	; 0x3c
 8004e86:	af0a      	add	r7, sp, #40	; 0x28
 8004e88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e116      	b.n	80050c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fd ffea 	bl	8002e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f003 ffa0 	bl	8008e18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	687e      	ldr	r6, [r7, #4]
 8004ee0:	466d      	mov	r5, sp
 8004ee2:	f106 0410 	add.w	r4, r6, #16
 8004ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ef2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ef6:	1d33      	adds	r3, r6, #4
 8004ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004efa:	6838      	ldr	r0, [r7, #0]
 8004efc:	f003 ff34 	bl	8008d68 <USB_CoreInit>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0d7      	b.n	80050c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f003 ff8e 	bl	8008e3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	e04a      	b.n	8004fba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f24:	7bfa      	ldrb	r2, [r7, #15]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	333d      	adds	r3, #61	; 0x3d
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	333c      	adds	r3, #60	; 0x3c
 8004f48:	7bfa      	ldrb	r2, [r7, #15]
 8004f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f4c:	7bfa      	ldrb	r2, [r7, #15]
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	b298      	uxth	r0, r3
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3344      	adds	r3, #68	; 0x44
 8004f60:	4602      	mov	r2, r0
 8004f62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f64:	7bfa      	ldrb	r2, [r7, #15]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3340      	adds	r3, #64	; 0x40
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	3348      	adds	r3, #72	; 0x48
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f8c:	7bfa      	ldrb	r2, [r7, #15]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	334c      	adds	r3, #76	; 0x4c
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	3354      	adds	r3, #84	; 0x54
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3af      	bcc.n	8004f24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e044      	b.n	8005054 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fca:	7bfa      	ldrb	r2, [r7, #15]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fe0:	7bfa      	ldrb	r2, [r7, #15]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ff2:	7bfa      	ldrb	r2, [r7, #15]
 8004ff4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800500c:	7bfa      	ldrb	r2, [r7, #15]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	3301      	adds	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d3b5      	bcc.n	8004fca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	687e      	ldr	r6, [r7, #4]
 8005066:	466d      	mov	r5, sp
 8005068:	f106 0410 	add.w	r4, r6, #16
 800506c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800506e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005078:	e885 0003 	stmia.w	r5, {r0, r1}
 800507c:	1d33      	adds	r3, r6, #4
 800507e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f003 ff27 	bl	8008ed4 <USB_DevInit>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e014      	b.n	80050c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d102      	bne.n	80050b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f80b 	bl	80050cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f004 f8e5 	bl	800928a <USB_DevDisconnect>

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080050cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_PCDEx_ActivateLPM+0x44>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	10000003 	.word	0x10000003

08005114 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800511e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40007000 	.word	0x40007000

08005134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_PWREx_EnableOverDrive+0x98>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_PWREx_EnableOverDrive+0x98>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6413      	str	r3, [r2, #64]	; 0x40
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_PWREx_EnableOverDrive+0x98>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005162:	f7fe f8a5 	bl	80032b0 <HAL_GetTick>
 8005166:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005168:	e009      	b.n	800517e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800516a:	f7fe f8a1 	bl	80032b0 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005178:	d901      	bls.n	800517e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e022      	b.n	80051c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d1ee      	bne.n	800516a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800518c:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0f      	ldr	r2, [pc, #60]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005196:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005198:	f7fe f88a 	bl	80032b0 <HAL_GetTick>
 800519c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800519e:	e009      	b.n	80051b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051a0:	f7fe f886 	bl	80032b0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ae:	d901      	bls.n	80051b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e007      	b.n	80051c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c0:	d1ee      	bne.n	80051a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40007000 	.word	0x40007000

080051d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80051dc:	2300      	movs	r3, #0
 80051de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e29b      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8087 	beq.w	8005306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051f8:	4b96      	ldr	r3, [pc, #600]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 030c 	and.w	r3, r3, #12
 8005200:	2b04      	cmp	r3, #4
 8005202:	d00c      	beq.n	800521e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005204:	4b93      	ldr	r3, [pc, #588]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d112      	bne.n	8005236 <HAL_RCC_OscConfig+0x62>
 8005210:	4b90      	ldr	r3, [pc, #576]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521c:	d10b      	bne.n	8005236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521e:	4b8d      	ldr	r3, [pc, #564]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d06c      	beq.n	8005304 <HAL_RCC_OscConfig+0x130>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d168      	bne.n	8005304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e275      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x7a>
 8005240:	4b84      	ldr	r3, [pc, #528]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a83      	ldr	r2, [pc, #524]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e02e      	b.n	80052ac <HAL_RCC_OscConfig+0xd8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x9c>
 8005256:	4b7f      	ldr	r3, [pc, #508]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a7e      	ldr	r2, [pc, #504]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800525c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b7c      	ldr	r3, [pc, #496]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7b      	ldr	r2, [pc, #492]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e01d      	b.n	80052ac <HAL_RCC_OscConfig+0xd8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0xc0>
 800527a:	4b76      	ldr	r3, [pc, #472]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a75      	ldr	r2, [pc, #468]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b73      	ldr	r3, [pc, #460]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a72      	ldr	r2, [pc, #456]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0xd8>
 8005294:	4b6f      	ldr	r3, [pc, #444]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6e      	ldr	r2, [pc, #440]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	4b6c      	ldr	r3, [pc, #432]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6b      	ldr	r2, [pc, #428]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80052a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d013      	beq.n	80052dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fd fffc 	bl	80032b0 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fd fff8 	bl	80032b0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e229      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b61      	ldr	r3, [pc, #388]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0xe8>
 80052da:	e014      	b.n	8005306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fd ffe8 	bl	80032b0 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e4:	f7fd ffe4 	bl	80032b0 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e215      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f6:	4b57      	ldr	r3, [pc, #348]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x110>
 8005302:	e000      	b.n	8005306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d069      	beq.n	80053e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005312:	4b50      	ldr	r3, [pc, #320]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b08      	cmp	r3, #8
 8005328:	d11c      	bne.n	8005364 <HAL_RCC_OscConfig+0x190>
 800532a:	4b4a      	ldr	r3, [pc, #296]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d116      	bne.n	8005364 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005336:	4b47      	ldr	r3, [pc, #284]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_RCC_OscConfig+0x17a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e1e9      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	4b41      	ldr	r3, [pc, #260]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	493d      	ldr	r1, [pc, #244]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	e040      	b.n	80053e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d023      	beq.n	80053b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536c:	4b39      	ldr	r3, [pc, #228]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a38      	ldr	r2, [pc, #224]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd ff9a 	bl	80032b0 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005380:	f7fd ff96 	bl	80032b0 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1c7      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b30      	ldr	r3, [pc, #192]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539e:	4b2d      	ldr	r3, [pc, #180]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4929      	ldr	r1, [pc, #164]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
 80053b2:	e018      	b.n	80053e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b4:	4b27      	ldr	r3, [pc, #156]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a26      	ldr	r2, [pc, #152]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd ff76 	bl	80032b0 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c8:	f7fd ff72 	bl	80032b0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e1a3      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053da:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d038      	beq.n	8005464 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d019      	beq.n	800542e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 80053fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fe:	4a15      	ldr	r2, [pc, #84]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fd ff53 	bl	80032b0 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540e:	f7fd ff4f 	bl	80032b0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e180      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x23a>
 800542c:	e01a      	b.n	8005464 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_RCC_OscConfig+0x280>)
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543a:	f7fd ff39 	bl	80032b0 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005440:	e00a      	b.n	8005458 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005442:	f7fd ff35 	bl	80032b0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d903      	bls.n	8005458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e166      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
 8005454:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005458:	4b92      	ldr	r3, [pc, #584]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800545a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ee      	bne.n	8005442 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80a4 	beq.w	80055ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005472:	4b8c      	ldr	r3, [pc, #560]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800547e:	4b89      	ldr	r3, [pc, #548]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a88      	ldr	r2, [pc, #544]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b86      	ldr	r3, [pc, #536]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549a:	4b83      	ldr	r3, [pc, #524]	; (80056a8 <HAL_RCC_OscConfig+0x4d4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80054a6:	4b80      	ldr	r3, [pc, #512]	; (80056a8 <HAL_RCC_OscConfig+0x4d4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a7f      	ldr	r2, [pc, #508]	; (80056a8 <HAL_RCC_OscConfig+0x4d4>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7fd fefd 	bl	80032b0 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fd fef9 	bl	80032b0 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b64      	cmp	r3, #100	; 0x64
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e12a      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054cc:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCC_OscConfig+0x4d4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x31a>
 80054e0:	4b70      	ldr	r3, [pc, #448]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a6f      	ldr	r2, [pc, #444]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	e02d      	b.n	800554a <HAL_RCC_OscConfig+0x376>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0x33c>
 80054f6:	4b6b      	ldr	r3, [pc, #428]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a6a      	ldr	r2, [pc, #424]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
 800550e:	e01c      	b.n	800554a <HAL_RCC_OscConfig+0x376>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b05      	cmp	r3, #5
 8005516:	d10c      	bne.n	8005532 <HAL_RCC_OscConfig+0x35e>
 8005518:	4b62      	ldr	r3, [pc, #392]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4a61      	ldr	r2, [pc, #388]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	6713      	str	r3, [r2, #112]	; 0x70
 8005524:	4b5f      	ldr	r3, [pc, #380]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4a5e      	ldr	r2, [pc, #376]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
 8005530:	e00b      	b.n	800554a <HAL_RCC_OscConfig+0x376>
 8005532:	4b5c      	ldr	r3, [pc, #368]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	4a5b      	ldr	r2, [pc, #364]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6713      	str	r3, [r2, #112]	; 0x70
 800553e:	4b59      	ldr	r3, [pc, #356]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a58      	ldr	r2, [pc, #352]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005544:	f023 0304 	bic.w	r3, r3, #4
 8005548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d015      	beq.n	800557e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fd fead 	bl	80032b0 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555a:	f7fd fea9 	bl	80032b0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f241 3288 	movw	r2, #5000	; 0x1388
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e0d8      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005570:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0ee      	beq.n	800555a <HAL_RCC_OscConfig+0x386>
 800557c:	e014      	b.n	80055a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fd fe97 	bl	80032b0 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005584:	e00a      	b.n	800559c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fd fe93 	bl	80032b0 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f241 3288 	movw	r2, #5000	; 0x1388
 8005594:	4293      	cmp	r3, r2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e0c2      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559c:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1ee      	bne.n	8005586 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ae:	4b3d      	ldr	r3, [pc, #244]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80055b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80ae 	beq.w	8005720 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c4:	4b37      	ldr	r3, [pc, #220]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d06d      	beq.n	80056ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d14b      	bne.n	8005670 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d8:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a31      	ldr	r2, [pc, #196]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fd fe64 	bl	80032b0 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fd fe60 	bl	80032b0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e091      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	3b01      	subs	r3, #1
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	071b      	lsls	r3, r3, #28
 8005636:	491b      	ldr	r1, [pc, #108]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800563c:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fd fe32 	bl	80032b0 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005650:	f7fd fe2e 	bl	80032b0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e05f      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x47c>
 800566e:	e057      	b.n	8005720 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a0b      	ldr	r2, [pc, #44]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd fe18 	bl	80032b0 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005684:	f7fd fe14 	bl	80032b0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e045      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_OscConfig+0x4d0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x4b0>
 80056a2:	e03d      	b.n	8005720 <HAL_RCC_OscConfig+0x54c>
 80056a4:	40023800 	.word	0x40023800
 80056a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80056ac:	4b1f      	ldr	r3, [pc, #124]	; (800572c <HAL_RCC_OscConfig+0x558>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d030      	beq.n	800571c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d129      	bne.n	800571c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d122      	bne.n	800571c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d119      	bne.n	800571c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	3b01      	subs	r3, #1
 80056f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d10f      	bne.n	800571c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0d0      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b67      	ldr	r3, [pc, #412]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 020f 	bic.w	r2, r3, #15
 800575e:	4965      	ldr	r1, [pc, #404]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b63      	ldr	r3, [pc, #396]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0b8      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d020      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005790:	4b59      	ldr	r3, [pc, #356]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	4a58      	ldr	r2, [pc, #352]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800579a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057a8:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a52      	ldr	r2, [pc, #328]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b4:	4b50      	ldr	r3, [pc, #320]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	494d      	ldr	r1, [pc, #308]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d040      	beq.n	8005854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d107      	bne.n	80057ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d115      	bne.n	8005812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e07f      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f2:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e073      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005802:	4b3d      	ldr	r3, [pc, #244]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e06b      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005812:	4b39      	ldr	r3, [pc, #228]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 0203 	bic.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4936      	ldr	r1, [pc, #216]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fd fd44 	bl	80032b0 <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582a:	e00a      	b.n	8005842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582c:	f7fd fd40 	bl	80032b0 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e053      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 020c 	and.w	r2, r3, #12
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	429a      	cmp	r2, r3
 8005852:	d1eb      	bne.n	800582c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005854:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d210      	bcs.n	8005884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 020f 	bic.w	r2, r3, #15
 800586a:	4922      	ldr	r1, [pc, #136]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e032      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005890:	4b19      	ldr	r3, [pc, #100]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4916      	ldr	r1, [pc, #88]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	490e      	ldr	r1, [pc, #56]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058c2:	f000 f821 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 80058c6:	4602      	mov	r2, r0
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	490a      	ldr	r1, [pc, #40]	; (80058fc <HAL_RCC_ClockConfig+0x1cc>)
 80058d4:	5ccb      	ldrb	r3, [r1, r3]
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	4a09      	ldr	r2, [pc, #36]	; (8005900 <HAL_RCC_ClockConfig+0x1d0>)
 80058dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <HAL_RCC_ClockConfig+0x1d4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fd fca0 	bl	8003228 <HAL_InitTick>

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40023c00 	.word	0x40023c00
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800eadc 	.word	0x0800eadc
 8005900:	20000014 	.word	0x20000014
 8005904:	20000018 	.word	0x20000018

08005908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800590c:	b094      	sub	sp, #80	; 0x50
 800590e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	647b      	str	r3, [r7, #68]	; 0x44
 8005914:	2300      	movs	r3, #0
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005918:	2300      	movs	r3, #0
 800591a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005920:	4b79      	ldr	r3, [pc, #484]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b08      	cmp	r3, #8
 800592a:	d00d      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x40>
 800592c:	2b08      	cmp	r3, #8
 800592e:	f200 80e1 	bhi.w	8005af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x34>
 8005936:	2b04      	cmp	r3, #4
 8005938:	d003      	beq.n	8005942 <HAL_RCC_GetSysClockFreq+0x3a>
 800593a:	e0db      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800593c:	4b73      	ldr	r3, [pc, #460]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005940:	e0db      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005942:	4b73      	ldr	r3, [pc, #460]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8005944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005946:	e0d8      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005948:	4b6f      	ldr	r3, [pc, #444]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005952:	4b6d      	ldr	r3, [pc, #436]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d063      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595e:	4b6a      	ldr	r3, [pc, #424]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	099b      	lsrs	r3, r3, #6
 8005964:	2200      	movs	r2, #0
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
 8005968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005970:	633b      	str	r3, [r7, #48]	; 0x30
 8005972:	2300      	movs	r3, #0
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
 8005976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800597a:	4622      	mov	r2, r4
 800597c:	462b      	mov	r3, r5
 800597e:	f04f 0000 	mov.w	r0, #0
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	0159      	lsls	r1, r3, #5
 8005988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800598c:	0150      	lsls	r0, r2, #5
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4621      	mov	r1, r4
 8005994:	1a51      	subs	r1, r2, r1
 8005996:	6139      	str	r1, [r7, #16]
 8005998:	4629      	mov	r1, r5
 800599a:	eb63 0301 	sbc.w	r3, r3, r1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059ac:	4659      	mov	r1, fp
 80059ae:	018b      	lsls	r3, r1, #6
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059b6:	4651      	mov	r1, sl
 80059b8:	018a      	lsls	r2, r1, #6
 80059ba:	4651      	mov	r1, sl
 80059bc:	ebb2 0801 	subs.w	r8, r2, r1
 80059c0:	4659      	mov	r1, fp
 80059c2:	eb63 0901 	sbc.w	r9, r3, r1
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059da:	4690      	mov	r8, r2
 80059dc:	4699      	mov	r9, r3
 80059de:	4623      	mov	r3, r4
 80059e0:	eb18 0303 	adds.w	r3, r8, r3
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	462b      	mov	r3, r5
 80059e8:	eb49 0303 	adc.w	r3, r9, r3
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059fa:	4629      	mov	r1, r5
 80059fc:	024b      	lsls	r3, r1, #9
 80059fe:	4621      	mov	r1, r4
 8005a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a04:	4621      	mov	r1, r4
 8005a06:	024a      	lsls	r2, r1, #9
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0e:	2200      	movs	r2, #0
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a18:	f7fa fe76 	bl	8000708 <__aeabi_uldivmod>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4613      	mov	r3, r2
 8005a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a24:	e058      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a26:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	4611      	mov	r1, r2
 8005a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a36:	623b      	str	r3, [r7, #32]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a40:	4642      	mov	r2, r8
 8005a42:	464b      	mov	r3, r9
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a52:	0150      	lsls	r0, r2, #5
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a5e:	4649      	mov	r1, r9
 8005a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a78:	ebb2 040a 	subs.w	r4, r2, sl
 8005a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	00eb      	lsls	r3, r5, #3
 8005a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a8e:	00e2      	lsls	r2, r4, #3
 8005a90:	4614      	mov	r4, r2
 8005a92:	461d      	mov	r5, r3
 8005a94:	4643      	mov	r3, r8
 8005a96:	18e3      	adds	r3, r4, r3
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	eb45 0303 	adc.w	r3, r5, r3
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aae:	4629      	mov	r1, r5
 8005ab0:	028b      	lsls	r3, r1, #10
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ab8:	4621      	mov	r1, r4
 8005aba:	028a      	lsls	r2, r1, #10
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	61fa      	str	r2, [r7, #28]
 8005ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005acc:	f7fa fe1c 	bl	8000708 <__aeabi_uldivmod>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005af2:	e002      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3750      	adds	r7, #80	; 0x50
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	00f42400 	.word	0x00f42400
 8005b10:	007a1200 	.word	0x007a1200

08005b14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000014 	.word	0x20000014

08005b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b30:	f7ff fff0 	bl	8005b14 <HAL_RCC_GetHCLKFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	0a9b      	lsrs	r3, r3, #10
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	4903      	ldr	r1, [pc, #12]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	0800eaec 	.word	0x0800eaec

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b58:	f7ff ffdc 	bl	8005b14 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0b5b      	lsrs	r3, r3, #13
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4903      	ldr	r1, [pc, #12]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40023800 	.word	0x40023800
 8005b78:	0800eaec 	.word	0x0800eaec

08005b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ba4:	4b69      	ldr	r3, [pc, #420]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4a68      	ldr	r2, [pc, #416]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005baa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005bae:	6093      	str	r3, [r2, #8]
 8005bb0:	4b66      	ldr	r3, [pc, #408]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	4964      	ldr	r1, [pc, #400]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d017      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bd6:	4b5d      	ldr	r3, [pc, #372]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	4959      	ldr	r1, [pc, #356]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c12:	4b4e      	ldr	r3, [pc, #312]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	494a      	ldr	r1, [pc, #296]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c30:	d101      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005c32:	2301      	movs	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 808b 	beq.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c60:	4b3a      	ldr	r3, [pc, #232]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	4a39      	ldr	r2, [pc, #228]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6c:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c84:	f7fd fb14 	bl	80032b0 <HAL_GetTick>
 8005c88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8c:	f7fd fb10 	bl	80032b0 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b64      	cmp	r3, #100	; 0x64
 8005c98:	d901      	bls.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e38f      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005caa:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d035      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d02e      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cc8:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d114      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fd fad8 	bl	80032b0 <HAL_GetTick>
 8005d00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fd fad4 	bl	80032b0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e351      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ee      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d32:	d111      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d42:	400b      	ands	r3, r1
 8005d44:	4901      	ldr	r1, [pc, #4]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40007000 	.word	0x40007000
 8005d54:	0ffffcff 	.word	0x0ffffcff
 8005d58:	4bac      	ldr	r3, [pc, #688]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	4aab      	ldr	r2, [pc, #684]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d62:	6093      	str	r3, [r2, #8]
 8005d64:	4ba9      	ldr	r3, [pc, #676]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d70:	49a6      	ldr	r1, [pc, #664]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d010      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d82:	4ba2      	ldr	r3, [pc, #648]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d88:	4aa0      	ldr	r2, [pc, #640]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d92:	4b9e      	ldr	r3, [pc, #632]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	499b      	ldr	r1, [pc, #620]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005db0:	4b96      	ldr	r3, [pc, #600]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dbe:	4993      	ldr	r1, [pc, #588]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dd2:	4b8e      	ldr	r3, [pc, #568]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de0:	498a      	ldr	r1, [pc, #552]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005df4:	4b85      	ldr	r3, [pc, #532]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e02:	4982      	ldr	r1, [pc, #520]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e16:	4b7d      	ldr	r3, [pc, #500]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4979      	ldr	r1, [pc, #484]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e38:	4b74      	ldr	r3, [pc, #464]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	4971      	ldr	r1, [pc, #452]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e5a:	4b6c      	ldr	r3, [pc, #432]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e60:	f023 020c 	bic.w	r2, r3, #12
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e68:	4968      	ldr	r1, [pc, #416]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e7c:	4b63      	ldr	r3, [pc, #396]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	4960      	ldr	r1, [pc, #384]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e9e:	4b5b      	ldr	r3, [pc, #364]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eac:	4957      	ldr	r1, [pc, #348]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ec0:	4b52      	ldr	r3, [pc, #328]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	494f      	ldr	r1, [pc, #316]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef0:	4946      	ldr	r1, [pc, #280]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005f04:	4b41      	ldr	r3, [pc, #260]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	493e      	ldr	r1, [pc, #248]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005f26:	4b39      	ldr	r3, [pc, #228]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f34:	4935      	ldr	r1, [pc, #212]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f48:	4b30      	ldr	r3, [pc, #192]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f56:	492d      	ldr	r1, [pc, #180]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f6a:	4b28      	ldr	r3, [pc, #160]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f78:	4924      	ldr	r1, [pc, #144]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f88:	d101      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb8:	4914      	ldr	r1, [pc, #80]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fdc:	490b      	ldr	r1, [pc, #44]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00f      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005ff0:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006000:	4902      	ldr	r1, [pc, #8]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800600a:	bf00      	nop
 800600c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800601c:	4b8a      	ldr	r3, [pc, #552]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800601e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006022:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	4986      	ldr	r1, [pc, #536]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006040:	4b81      	ldr	r3, [pc, #516]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006046:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006050:	497d      	ldr	r1, [pc, #500]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d006      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80d6 	beq.w	8006218 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800606c:	4b76      	ldr	r3, [pc, #472]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a75      	ldr	r2, [pc, #468]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006078:	f7fd f91a 	bl	80032b0 <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006080:	f7fd f916 	bl	80032b0 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e195      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006092:	4b6d      	ldr	r3, [pc, #436]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d021      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11d      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80060b2:	4b65      	ldr	r3, [pc, #404]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060c0:	4b61      	ldr	r3, [pc, #388]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c6:	0e1b      	lsrs	r3, r3, #24
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	019a      	lsls	r2, r3, #6
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	071b      	lsls	r3, r3, #28
 80060e6:	4958      	ldr	r1, [pc, #352]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800610c:	2b00      	cmp	r3, #0
 800610e:	d02e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006118:	d129      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800611a:	4b4b      	ldr	r3, [pc, #300]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800611c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006128:	4b47      	ldr	r3, [pc, #284]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800612a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800612e:	0f1b      	lsrs	r3, r3, #28
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	019a      	lsls	r2, r3, #6
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	041b      	lsls	r3, r3, #16
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	061b      	lsls	r3, r3, #24
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	071b      	lsls	r3, r3, #28
 800614e:	493e      	ldr	r1, [pc, #248]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006156:	4b3c      	ldr	r3, [pc, #240]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800615c:	f023 021f 	bic.w	r2, r3, #31
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	3b01      	subs	r3, #1
 8006166:	4938      	ldr	r1, [pc, #224]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d01d      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800617a:	4b33      	ldr	r3, [pc, #204]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006180:	0e1b      	lsrs	r3, r3, #24
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006188:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800618a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	019a      	lsls	r2, r3, #6
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	041b      	lsls	r3, r3, #16
 80061a2:	431a      	orrs	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	061b      	lsls	r3, r3, #24
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	071b      	lsls	r3, r3, #28
 80061ae:	4926      	ldr	r1, [pc, #152]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	019a      	lsls	r2, r3, #6
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	061b      	lsls	r3, r3, #24
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	071b      	lsls	r3, r3, #28
 80061de:	491a      	ldr	r1, [pc, #104]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f2:	f7fd f85d 	bl	80032b0 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061fa:	f7fd f859 	bl	80032b0 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b64      	cmp	r3, #100	; 0x64
 8006206:	d901      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e0d8      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b01      	cmp	r3, #1
 800621c:	f040 80ce 	bne.w	80063bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a08      	ldr	r2, [pc, #32]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800622a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622c:	f7fd f840 	bl	80032b0 <HAL_GetTick>
 8006230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006232:	e00b      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006234:	f7fd f83c 	bl	80032b0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	; 0x64
 8006240:	d904      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e0bb      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006246:	bf00      	nop
 8006248:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800624c:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006258:	d0ec      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02e      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d12a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006282:	4b51      	ldr	r3, [pc, #324]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006290:	4b4d      	ldr	r3, [pc, #308]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006296:	0f1b      	lsrs	r3, r3, #28
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	019a      	lsls	r2, r3, #6
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	061b      	lsls	r3, r3, #24
 80062b0:	431a      	orrs	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	071b      	lsls	r3, r3, #28
 80062b6:	4944      	ldr	r1, [pc, #272]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062be:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	3b01      	subs	r3, #1
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	493d      	ldr	r1, [pc, #244]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d022      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ec:	d11d      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062ee:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062fc:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	0f1b      	lsrs	r3, r3, #28
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	019a      	lsls	r2, r3, #6
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	431a      	orrs	r2, r3
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	061b      	lsls	r3, r3, #24
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	071b      	lsls	r3, r3, #28
 8006322:	4929      	ldr	r1, [pc, #164]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d028      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	0e1b      	lsrs	r3, r3, #24
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006344:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	019a      	lsls	r2, r3, #6
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	431a      	orrs	r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	061b      	lsls	r3, r3, #24
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	071b      	lsls	r3, r3, #28
 800636a:	4917      	ldr	r1, [pc, #92]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006372:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	4911      	ldr	r1, [pc, #68]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a0e      	ldr	r2, [pc, #56]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800638e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006394:	f7fc ff8c 	bl	80032b0 <HAL_GetTick>
 8006398:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800639c:	f7fc ff88 	bl	80032b0 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	; 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e007      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ba:	d1ef      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800

080063cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e049      	b.n	8006472 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fc fc66 	bl	8002cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f000 fd30 	bl	8006e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e054      	b.n	800653e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a26      	ldr	r2, [pc, #152]	; (800654c <HAL_TIM_Base_Start_IT+0xd0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d022      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064be:	d01d      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <HAL_TIM_Base_Start_IT+0xd4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d018      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a21      	ldr	r2, [pc, #132]	; (8006554 <HAL_TIM_Base_Start_IT+0xd8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d013      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_TIM_Base_Start_IT+0xdc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00e      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1e      	ldr	r2, [pc, #120]	; (800655c <HAL_TIM_Base_Start_IT+0xe0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d009      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_TIM_Base_Start_IT+0xe4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <HAL_TIM_Base_Start_IT+0xe8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d115      	bne.n	8006528 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	4b19      	ldr	r3, [pc, #100]	; (8006568 <HAL_TIM_Base_Start_IT+0xec>)
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b06      	cmp	r3, #6
 800650c:	d015      	beq.n	800653a <HAL_TIM_Base_Start_IT+0xbe>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006514:	d011      	beq.n	800653a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	e008      	b.n	800653a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e000      	b.n	800653c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40010000 	.word	0x40010000
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40010400 	.word	0x40010400
 8006560:	40014000 	.word	0x40014000
 8006564:	40001800 	.word	0x40001800
 8006568:	00010007 	.word	0x00010007

0800656c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e049      	b.n	8006612 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f841 	bl	800661a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4619      	mov	r1, r3
 80065aa:	4610      	mov	r0, r2
 80065ac:	f000 fc60 	bl	8006e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_TIM_PWM_Start+0x24>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	e03c      	b.n	80066ce <HAL_TIM_PWM_Start+0x9e>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b04      	cmp	r3, #4
 8006658:	d109      	bne.n	800666e <HAL_TIM_PWM_Start+0x3e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b01      	cmp	r3, #1
 8006664:	bf14      	ite	ne
 8006666:	2301      	movne	r3, #1
 8006668:	2300      	moveq	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e02f      	b.n	80066ce <HAL_TIM_PWM_Start+0x9e>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b08      	cmp	r3, #8
 8006672:	d109      	bne.n	8006688 <HAL_TIM_PWM_Start+0x58>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	bf14      	ite	ne
 8006680:	2301      	movne	r3, #1
 8006682:	2300      	moveq	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e022      	b.n	80066ce <HAL_TIM_PWM_Start+0x9e>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d109      	bne.n	80066a2 <HAL_TIM_PWM_Start+0x72>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b01      	cmp	r3, #1
 8006698:	bf14      	ite	ne
 800669a:	2301      	movne	r3, #1
 800669c:	2300      	moveq	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	e015      	b.n	80066ce <HAL_TIM_PWM_Start+0x9e>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d109      	bne.n	80066bc <HAL_TIM_PWM_Start+0x8c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	e008      	b.n	80066ce <HAL_TIM_PWM_Start+0x9e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	bf14      	ite	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	2300      	moveq	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e092      	b.n	80067fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_TIM_PWM_Start+0xb6>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e4:	e023      	b.n	800672e <HAL_TIM_PWM_Start+0xfe>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d104      	bne.n	80066f6 <HAL_TIM_PWM_Start+0xc6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f4:	e01b      	b.n	800672e <HAL_TIM_PWM_Start+0xfe>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_PWM_Start+0xd6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006704:	e013      	b.n	800672e <HAL_TIM_PWM_Start+0xfe>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b0c      	cmp	r3, #12
 800670a:	d104      	bne.n	8006716 <HAL_TIM_PWM_Start+0xe6>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006714:	e00b      	b.n	800672e <HAL_TIM_PWM_Start+0xfe>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b10      	cmp	r3, #16
 800671a:	d104      	bne.n	8006726 <HAL_TIM_PWM_Start+0xf6>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006724:	e003      	b.n	800672e <HAL_TIM_PWM_Start+0xfe>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2201      	movs	r2, #1
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 ff32 	bl	80075a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a30      	ldr	r2, [pc, #192]	; (8006804 <HAL_TIM_PWM_Start+0x1d4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_TIM_PWM_Start+0x120>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2f      	ldr	r2, [pc, #188]	; (8006808 <HAL_TIM_PWM_Start+0x1d8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d101      	bne.n	8006754 <HAL_TIM_PWM_Start+0x124>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <HAL_TIM_PWM_Start+0x126>
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a25      	ldr	r2, [pc, #148]	; (8006804 <HAL_TIM_PWM_Start+0x1d4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d022      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677c:	d01d      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a22      	ldr	r2, [pc, #136]	; (800680c <HAL_TIM_PWM_Start+0x1dc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d018      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <HAL_TIM_PWM_Start+0x1e0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_TIM_PWM_Start+0x1e4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00e      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a19      	ldr	r2, [pc, #100]	; (8006808 <HAL_TIM_PWM_Start+0x1d8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d009      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_TIM_PWM_Start+0x1e8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <HAL_TIM_PWM_Start+0x18a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a19      	ldr	r2, [pc, #100]	; (800681c <HAL_TIM_PWM_Start+0x1ec>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d115      	bne.n	80067e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <HAL_TIM_PWM_Start+0x1f0>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b06      	cmp	r3, #6
 80067ca:	d015      	beq.n	80067f8 <HAL_TIM_PWM_Start+0x1c8>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d011      	beq.n	80067f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e4:	e008      	b.n	80067f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0201 	orr.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e000      	b.n	80067fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40010000 	.word	0x40010000
 8006808:	40010400 	.word	0x40010400
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40014000 	.word	0x40014000
 800681c:	40001800 	.word	0x40001800
 8006820:	00010007 	.word	0x00010007

08006824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d122      	bne.n	8006880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d11b      	bne.n	8006880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0202 	mvn.w	r2, #2
 8006850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fae4 	bl	8006e34 <HAL_TIM_IC_CaptureCallback>
 800686c:	e005      	b.n	800687a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fad6 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fae7 	bl	8006e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b04      	cmp	r3, #4
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b04      	cmp	r3, #4
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0204 	mvn.w	r2, #4
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 faba 	bl	8006e34 <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 faac 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fabd 	bl	8006e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0208 	mvn.w	r2, #8
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa90 	bl	8006e34 <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa82 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa93 	bl	8006e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b10      	cmp	r3, #16
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0310 	and.w	r3, r3, #16
 8006940:	2b10      	cmp	r3, #16
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0210 	mvn.w	r2, #16
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2208      	movs	r2, #8
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa66 	bl	8006e34 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa58 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa69 	bl	8006e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d10e      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0201 	mvn.w	r2, #1
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fb f8fc 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d10e      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d107      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fea4 	bl	800771c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e2:	d10e      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d107      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fe97 	bl	8007730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d10e      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d107      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa17 	bl	8006e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d10e      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d107      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f06f 0220 	mvn.w	r2, #32
 8006a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fe57 	bl	8007708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0ff      	b.n	8006c82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b14      	cmp	r3, #20
 8006a8e:	f200 80f0 	bhi.w	8006c72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006c73 	.word	0x08006c73
 8006aa0:	08006c73 	.word	0x08006c73
 8006aa4:	08006c73 	.word	0x08006c73
 8006aa8:	08006b2d 	.word	0x08006b2d
 8006aac:	08006c73 	.word	0x08006c73
 8006ab0:	08006c73 	.word	0x08006c73
 8006ab4:	08006c73 	.word	0x08006c73
 8006ab8:	08006b6f 	.word	0x08006b6f
 8006abc:	08006c73 	.word	0x08006c73
 8006ac0:	08006c73 	.word	0x08006c73
 8006ac4:	08006c73 	.word	0x08006c73
 8006ac8:	08006baf 	.word	0x08006baf
 8006acc:	08006c73 	.word	0x08006c73
 8006ad0:	08006c73 	.word	0x08006c73
 8006ad4:	08006c73 	.word	0x08006c73
 8006ad8:	08006bf1 	.word	0x08006bf1
 8006adc:	08006c73 	.word	0x08006c73
 8006ae0:	08006c73 	.word	0x08006c73
 8006ae4:	08006c73 	.word	0x08006c73
 8006ae8:	08006c31 	.word	0x08006c31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fa5c 	bl	8006fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0204 	bic.w	r2, r2, #4
 8006b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6999      	ldr	r1, [r3, #24]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	619a      	str	r2, [r3, #24]
      break;
 8006b2a:	e0a5      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 faae 	bl	8007094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6999      	ldr	r1, [r3, #24]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	021a      	lsls	r2, r3, #8
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	619a      	str	r2, [r3, #24]
      break;
 8006b6c:	e084      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fb05 	bl	8007184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0208 	orr.w	r2, r2, #8
 8006b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0204 	bic.w	r2, r2, #4
 8006b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69d9      	ldr	r1, [r3, #28]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	61da      	str	r2, [r3, #28]
      break;
 8006bac:	e064      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fb5b 	bl	8007270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	021a      	lsls	r2, r3, #8
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	61da      	str	r2, [r3, #28]
      break;
 8006bee:	e043      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fb92 	bl	8007320 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0208 	orr.w	r2, r2, #8
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c2e:	e023      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fbc4 	bl	80073c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c70:	e002      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	75fb      	strb	r3, [r7, #23]
      break;
 8006c76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop

08006c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e0b4      	b.n	8006e12 <HAL_TIM_ConfigClockSource+0x186>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4b56      	ldr	r3, [pc, #344]	; (8006e1c <HAL_TIM_ConfigClockSource+0x190>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce0:	d03e      	beq.n	8006d60 <HAL_TIM_ConfigClockSource+0xd4>
 8006ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce6:	f200 8087 	bhi.w	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	f000 8086 	beq.w	8006dfe <HAL_TIM_ConfigClockSource+0x172>
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d87f      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf8:	2b70      	cmp	r3, #112	; 0x70
 8006cfa:	d01a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0xa6>
 8006cfc:	2b70      	cmp	r3, #112	; 0x70
 8006cfe:	d87b      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d00:	2b60      	cmp	r3, #96	; 0x60
 8006d02:	d050      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x11a>
 8006d04:	2b60      	cmp	r3, #96	; 0x60
 8006d06:	d877      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d03c      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0xfa>
 8006d0c:	2b50      	cmp	r3, #80	; 0x50
 8006d0e:	d873      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d058      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d86f      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d064      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d86b      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d060      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d867      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05c      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d05a      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d30:	e062      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d42:	f000 fc0d 	bl	8007560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	609a      	str	r2, [r3, #8]
      break;
 8006d5e:	e04f      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d70:	f000 fbf6 	bl	8007560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d82:	609a      	str	r2, [r3, #8]
      break;
 8006d84:	e03c      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d92:	461a      	mov	r2, r3
 8006d94:	f000 fb6a 	bl	800746c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2150      	movs	r1, #80	; 0x50
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fbc3 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 8006da4:	e02c      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db2:	461a      	mov	r2, r3
 8006db4:	f000 fb89 	bl	80074ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2160      	movs	r1, #96	; 0x60
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fbb3 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 8006dc4:	e01c      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f000 fb4a 	bl	800746c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fba3 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 8006de4:	e00c      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f000 fb9a 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 8006df6:	e003      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfc:	e000      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	fffeff88 	.word	0xfffeff88

08006e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a40      	ldr	r2, [pc, #256]	; (8006f84 <TIM_Base_SetConfig+0x114>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d013      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8e:	d00f      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3d      	ldr	r2, [pc, #244]	; (8006f88 <TIM_Base_SetConfig+0x118>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3c      	ldr	r2, [pc, #240]	; (8006f8c <TIM_Base_SetConfig+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d007      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3b      	ldr	r2, [pc, #236]	; (8006f90 <TIM_Base_SetConfig+0x120>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a3a      	ldr	r2, [pc, #232]	; (8006f94 <TIM_Base_SetConfig+0x124>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <TIM_Base_SetConfig+0x114>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02b      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d027      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2c      	ldr	r2, [pc, #176]	; (8006f88 <TIM_Base_SetConfig+0x118>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d023      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <TIM_Base_SetConfig+0x11c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01f      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <TIM_Base_SetConfig+0x120>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01b      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a29      	ldr	r2, [pc, #164]	; (8006f94 <TIM_Base_SetConfig+0x124>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d017      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a28      	ldr	r2, [pc, #160]	; (8006f98 <TIM_Base_SetConfig+0x128>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d013      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <TIM_Base_SetConfig+0x12c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00f      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <TIM_Base_SetConfig+0x130>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00b      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <TIM_Base_SetConfig+0x134>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d007      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a24      	ldr	r2, [pc, #144]	; (8006fa8 <TIM_Base_SetConfig+0x138>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <TIM_Base_SetConfig+0x13c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d108      	bne.n	8006f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <TIM_Base_SetConfig+0x114>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_Base_SetConfig+0xf8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <TIM_Base_SetConfig+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d103      	bne.n	8006f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	615a      	str	r2, [r3, #20]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40000800 	.word	0x40000800
 8006f90:	40000c00 	.word	0x40000c00
 8006f94:	40010400 	.word	0x40010400
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800
 8006fa4:	40001800 	.word	0x40001800
 8006fa8:	40001c00 	.word	0x40001c00
 8006fac:	40002000 	.word	0x40002000

08006fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f023 0201 	bic.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4b2b      	ldr	r3, [pc, #172]	; (8007088 <TIM_OC1_SetConfig+0xd8>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f023 0302 	bic.w	r3, r3, #2
 8006ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a21      	ldr	r2, [pc, #132]	; (800708c <TIM_OC1_SetConfig+0xdc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d003      	beq.n	8007014 <TIM_OC1_SetConfig+0x64>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a20      	ldr	r2, [pc, #128]	; (8007090 <TIM_OC1_SetConfig+0xe0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d10c      	bne.n	800702e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f023 0308 	bic.w	r3, r3, #8
 800701a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 0304 	bic.w	r3, r3, #4
 800702c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a16      	ldr	r2, [pc, #88]	; (800708c <TIM_OC1_SetConfig+0xdc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <TIM_OC1_SetConfig+0x8e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <TIM_OC1_SetConfig+0xe0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d111      	bne.n	8007062 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800704c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	621a      	str	r2, [r3, #32]
}
 800707c:	bf00      	nop
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	fffeff8f 	.word	0xfffeff8f
 800708c:	40010000 	.word	0x40010000
 8007090:	40010400 	.word	0x40010400

08007094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0210 	bic.w	r2, r3, #16
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <TIM_OC2_SetConfig+0xe4>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0320 	bic.w	r3, r3, #32
 80070de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a23      	ldr	r2, [pc, #140]	; (800717c <TIM_OC2_SetConfig+0xe8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_OC2_SetConfig+0x68>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a22      	ldr	r2, [pc, #136]	; (8007180 <TIM_OC2_SetConfig+0xec>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d10d      	bne.n	8007118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a18      	ldr	r2, [pc, #96]	; (800717c <TIM_OC2_SetConfig+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC2_SetConfig+0x94>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a17      	ldr	r2, [pc, #92]	; (8007180 <TIM_OC2_SetConfig+0xec>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d113      	bne.n	8007150 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800712e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	feff8fff 	.word	0xfeff8fff
 800717c:	40010000 	.word	0x40010000
 8007180:	40010400 	.word	0x40010400

08007184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <TIM_OC3_SetConfig+0xe0>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a22      	ldr	r2, [pc, #136]	; (8007268 <TIM_OC3_SetConfig+0xe4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_OC3_SetConfig+0x66>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <TIM_OC3_SetConfig+0xe8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d10d      	bne.n	8007206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <TIM_OC3_SetConfig+0xe4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d003      	beq.n	8007216 <TIM_OC3_SetConfig+0x92>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a16      	ldr	r2, [pc, #88]	; (800726c <TIM_OC3_SetConfig+0xe8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d113      	bne.n	800723e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800721c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	621a      	str	r2, [r3, #32]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	fffeff8f 	.word	0xfffeff8f
 8007268:	40010000 	.word	0x40010000
 800726c:	40010400 	.word	0x40010400

08007270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <TIM_OC4_SetConfig+0xa4>)
 800729c:	4013      	ands	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	031b      	lsls	r3, r3, #12
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <TIM_OC4_SetConfig+0xa8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_OC4_SetConfig+0x68>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <TIM_OC4_SetConfig+0xac>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d109      	bne.n	80072ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	019b      	lsls	r3, r3, #6
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	feff8fff 	.word	0xfeff8fff
 8007318:	40010000 	.word	0x40010000
 800731c:	40010400 	.word	0x40010400

08007320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <TIM_OC5_SetConfig+0x98>)
 800734c:	4013      	ands	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007360:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a12      	ldr	r2, [pc, #72]	; (80073bc <TIM_OC5_SetConfig+0x9c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_OC5_SetConfig+0x5e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <TIM_OC5_SetConfig+0xa0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d109      	bne.n	8007392 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	021b      	lsls	r3, r3, #8
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	621a      	str	r2, [r3, #32]
}
 80073ac:	bf00      	nop
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	fffeff8f 	.word	0xfffeff8f
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40010400 	.word	0x40010400

080073c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4b1c      	ldr	r3, [pc, #112]	; (8007460 <TIM_OC6_SetConfig+0x9c>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	051b      	lsls	r3, r3, #20
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a13      	ldr	r2, [pc, #76]	; (8007464 <TIM_OC6_SetConfig+0xa0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d003      	beq.n	8007424 <TIM_OC6_SetConfig+0x60>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a12      	ldr	r2, [pc, #72]	; (8007468 <TIM_OC6_SetConfig+0xa4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d109      	bne.n	8007438 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800742a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	029b      	lsls	r3, r3, #10
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	feff8fff 	.word	0xfeff8fff
 8007464:	40010000 	.word	0x40010000
 8007468:	40010400 	.word	0x40010400

0800746c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f023 0201 	bic.w	r2, r3, #1
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f023 030a 	bic.w	r3, r3, #10
 80074a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f023 0210 	bic.w	r2, r3, #16
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	f043 0307 	orr.w	r3, r3, #7
 800754c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	609a      	str	r2, [r3, #8]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800757a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	021a      	lsls	r2, r3, #8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	431a      	orrs	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4313      	orrs	r3, r2
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	609a      	str	r2, [r3, #8]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	2201      	movs	r2, #1
 80075b4:	fa02 f303 	lsl.w	r3, r2, r3
 80075b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1a      	ldr	r2, [r3, #32]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	43db      	mvns	r3, r3
 80075c2:	401a      	ands	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1a      	ldr	r2, [r3, #32]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	fa01 f303 	lsl.w	r3, r1, r3
 80075d8:	431a      	orrs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007600:	2302      	movs	r3, #2
 8007602:	e06d      	b.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a30      	ldr	r2, [pc, #192]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2f      	ldr	r2, [pc, #188]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d108      	bne.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800763e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a20      	ldr	r2, [pc, #128]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d022      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007676:	d01d      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d018      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1c      	ldr	r2, [pc, #112]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d013      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00e      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d009      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a16      	ldr	r2, [pc, #88]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a15      	ldr	r2, [pc, #84]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d10c      	bne.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40010400 	.word	0x40010400
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40000c00 	.word	0x40000c00
 8007700:	40014000 	.word	0x40014000
 8007704:	40001800 	.word	0x40001800

08007708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e040      	b.n	80077d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fb fb26 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2224      	movs	r2, #36	; 0x24
 8007770:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fc06 	bl	8007f94 <UART_SetConfig>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e022      	b.n	80077d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fe5e 	bl	800845c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fee5 	bl	80085a0 <UART_CheckIdleState>
 80077d6:	4603      	mov	r3, r0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	; 0x28
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d171      	bne.n	80078dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_UART_Transmit+0x24>
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e06a      	b.n	80078de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2221      	movs	r2, #33	; 0x21
 8007814:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007816:	f7fb fd4b 	bl	80032b0 <HAL_GetTick>
 800781a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	88fa      	ldrh	r2, [r7, #6]
 8007820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007834:	d108      	bne.n	8007848 <HAL_UART_Transmit+0x68>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	e003      	b.n	8007850 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007850:	e02c      	b.n	80078ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2200      	movs	r2, #0
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 feec 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e038      	b.n	80078de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007880:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	3302      	adds	r3, #2
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e007      	b.n	800789a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	3301      	adds	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1cc      	bne.n	8007852 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2200      	movs	r2, #0
 80078c0:	2140      	movs	r1, #64	; 0x40
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 feb9 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e005      	b.n	80078de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3720      	adds	r7, #32
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08a      	sub	sp, #40	; 0x28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d132      	bne.n	8007964 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_UART_Receive_IT+0x24>
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e02b      	b.n	8007966 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d018      	beq.n	8007954 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	613b      	str	r3, [r7, #16]
   return(result);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	6a3a      	ldr	r2, [r7, #32]
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	61bb      	str	r3, [r7, #24]
   return(result);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	461a      	mov	r2, r3
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 ff34 	bl	80087c8 <UART_Start_Receive_IT>
 8007960:	4603      	mov	r3, r0
 8007962:	e000      	b.n	8007966 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3728      	adds	r7, #40	; 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b0ba      	sub	sp, #232	; 0xe8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007996:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800799a:	f640 030f 	movw	r3, #2063	; 0x80f
 800799e:	4013      	ands	r3, r2
 80079a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d115      	bne.n	80079d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00f      	beq.n	80079d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 82ac 	beq.w	8007f26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
      }
      return;
 80079d6:	e2a6      	b.n	8007f26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8117 	beq.w	8007c10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079f2:	4b85      	ldr	r3, [pc, #532]	; (8007c08 <HAL_UART_IRQHandler+0x298>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 810a 	beq.w	8007c10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d011      	beq.n	8007a2c <HAL_UART_IRQHandler+0xbc>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a22:	f043 0201 	orr.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d011      	beq.n	8007a5c <HAL_UART_IRQHandler+0xec>
 8007a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a52:	f043 0204 	orr.w	r2, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_UART_IRQHandler+0x11c>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a82:	f043 0202 	orr.w	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d017      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007abe:	f043 0208 	orr.w	r2, r3, #8
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d012      	beq.n	8007afa <HAL_UART_IRQHandler+0x18a>
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af0:	f043 0220 	orr.w	r2, r3, #32
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8212 	beq.w	8007f2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d005      	beq.n	8007b52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d04f      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fefe 	bl	8008954 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d141      	bne.n	8007bea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1d9      	bne.n	8007b66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <HAL_UART_IRQHandler+0x29c>)
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fc f951 	bl	8003e6e <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	e00f      	b.n	8007c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9b6 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e00b      	b.n	8007c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9b2 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e007      	b.n	8007c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9ae 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c00:	e193      	b.n	8007f2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c02:	bf00      	nop
    return;
 8007c04:	e191      	b.n	8007f2a <HAL_UART_IRQHandler+0x5ba>
 8007c06:	bf00      	nop
 8007c08:	04000120 	.word	0x04000120
 8007c0c:	08008a1d 	.word	0x08008a1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	f040 814c 	bne.w	8007eb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 8145 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 813e 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	f040 80b6 	bne.w	8007dba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8165 	beq.w	8007f2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	f080 815d 	bcs.w	8007f2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c88:	f000 8086 	beq.w	8007d98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1da      	bne.n	8007c8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e1      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3308      	adds	r3, #8
 8007d18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e3      	bne.n	8007d12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d68:	f023 0310 	bic.w	r3, r3, #16
 8007d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e4      	bne.n	8007d58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fb fffb 	bl	8003d8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f8d8 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007db8:	e0b9      	b.n	8007f2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 80ab 	beq.w	8007f32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80a6 	beq.w	8007f32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e08:	647b      	str	r3, [r7, #68]	; 0x44
 8007e0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e4      	bne.n	8007de6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3308      	adds	r3, #8
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	f023 0301 	bic.w	r3, r3, #1
 8007e32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e40:	633a      	str	r2, [r7, #48]	; 0x30
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e3      	bne.n	8007e1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f023 0310 	bic.w	r3, r3, #16
 8007e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	69b9      	ldr	r1, [r7, #24]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	617b      	str	r3, [r7, #20]
   return(result);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e4      	bne.n	8007e68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f85c 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007eb0:	e03f      	b.n	8007f32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00e      	beq.n	8007edc <HAL_UART_IRQHandler+0x56c>
 8007ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f853 	bl	8007f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eda:	e02d      	b.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00e      	beq.n	8007f06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d008      	beq.n	8007f06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01c      	beq.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4798      	blx	r3
    }
    return;
 8007f04:	e017      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d012      	beq.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fd92 	bl	8008a48 <UART_EndTransmit_IT>
    return;
 8007f24:	e008      	b.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f26:	bf00      	nop
 8007f28:	e006      	b.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007f2a:	bf00      	nop
 8007f2c:	e004      	b.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f2e:	bf00      	nop
 8007f30:	e002      	b.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f32:	bf00      	nop
 8007f34:	e000      	b.n	8007f38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007f36:	bf00      	nop
  }

}
 8007f38:	37e8      	adds	r7, #232	; 0xe8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop

08007f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4ba6      	ldr	r3, [pc, #664]	; (8008258 <UART_SetConfig+0x2c4>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	430a      	orrs	r2, r1
 8008004:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a94      	ldr	r2, [pc, #592]	; (800825c <UART_SetConfig+0x2c8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d120      	bne.n	8008052 <UART_SetConfig+0xbe>
 8008010:	4b93      	ldr	r3, [pc, #588]	; (8008260 <UART_SetConfig+0x2cc>)
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d816      	bhi.n	800804c <UART_SetConfig+0xb8>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <UART_SetConfig+0x90>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008035 	.word	0x08008035
 8008028:	08008041 	.word	0x08008041
 800802c:	0800803b 	.word	0x0800803b
 8008030:	08008047 	.word	0x08008047
 8008034:	2301      	movs	r3, #1
 8008036:	77fb      	strb	r3, [r7, #31]
 8008038:	e150      	b.n	80082dc <UART_SetConfig+0x348>
 800803a:	2302      	movs	r3, #2
 800803c:	77fb      	strb	r3, [r7, #31]
 800803e:	e14d      	b.n	80082dc <UART_SetConfig+0x348>
 8008040:	2304      	movs	r3, #4
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	e14a      	b.n	80082dc <UART_SetConfig+0x348>
 8008046:	2308      	movs	r3, #8
 8008048:	77fb      	strb	r3, [r7, #31]
 800804a:	e147      	b.n	80082dc <UART_SetConfig+0x348>
 800804c:	2310      	movs	r3, #16
 800804e:	77fb      	strb	r3, [r7, #31]
 8008050:	e144      	b.n	80082dc <UART_SetConfig+0x348>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a83      	ldr	r2, [pc, #524]	; (8008264 <UART_SetConfig+0x2d0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d132      	bne.n	80080c2 <UART_SetConfig+0x12e>
 800805c:	4b80      	ldr	r3, [pc, #512]	; (8008260 <UART_SetConfig+0x2cc>)
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	f003 030c 	and.w	r3, r3, #12
 8008066:	2b0c      	cmp	r3, #12
 8008068:	d828      	bhi.n	80080bc <UART_SetConfig+0x128>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <UART_SetConfig+0xdc>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	080080a5 	.word	0x080080a5
 8008074:	080080bd 	.word	0x080080bd
 8008078:	080080bd 	.word	0x080080bd
 800807c:	080080bd 	.word	0x080080bd
 8008080:	080080b1 	.word	0x080080b1
 8008084:	080080bd 	.word	0x080080bd
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080080bd 	.word	0x080080bd
 8008090:	080080ab 	.word	0x080080ab
 8008094:	080080bd 	.word	0x080080bd
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080bd 	.word	0x080080bd
 80080a0:	080080b7 	.word	0x080080b7
 80080a4:	2300      	movs	r3, #0
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e118      	b.n	80082dc <UART_SetConfig+0x348>
 80080aa:	2302      	movs	r3, #2
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e115      	b.n	80082dc <UART_SetConfig+0x348>
 80080b0:	2304      	movs	r3, #4
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e112      	b.n	80082dc <UART_SetConfig+0x348>
 80080b6:	2308      	movs	r3, #8
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	e10f      	b.n	80082dc <UART_SetConfig+0x348>
 80080bc:	2310      	movs	r3, #16
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	e10c      	b.n	80082dc <UART_SetConfig+0x348>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a68      	ldr	r2, [pc, #416]	; (8008268 <UART_SetConfig+0x2d4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d120      	bne.n	800810e <UART_SetConfig+0x17a>
 80080cc:	4b64      	ldr	r3, [pc, #400]	; (8008260 <UART_SetConfig+0x2cc>)
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080d6:	2b30      	cmp	r3, #48	; 0x30
 80080d8:	d013      	beq.n	8008102 <UART_SetConfig+0x16e>
 80080da:	2b30      	cmp	r3, #48	; 0x30
 80080dc:	d814      	bhi.n	8008108 <UART_SetConfig+0x174>
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d009      	beq.n	80080f6 <UART_SetConfig+0x162>
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d810      	bhi.n	8008108 <UART_SetConfig+0x174>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <UART_SetConfig+0x15c>
 80080ea:	2b10      	cmp	r3, #16
 80080ec:	d006      	beq.n	80080fc <UART_SetConfig+0x168>
 80080ee:	e00b      	b.n	8008108 <UART_SetConfig+0x174>
 80080f0:	2300      	movs	r3, #0
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e0f2      	b.n	80082dc <UART_SetConfig+0x348>
 80080f6:	2302      	movs	r3, #2
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e0ef      	b.n	80082dc <UART_SetConfig+0x348>
 80080fc:	2304      	movs	r3, #4
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e0ec      	b.n	80082dc <UART_SetConfig+0x348>
 8008102:	2308      	movs	r3, #8
 8008104:	77fb      	strb	r3, [r7, #31]
 8008106:	e0e9      	b.n	80082dc <UART_SetConfig+0x348>
 8008108:	2310      	movs	r3, #16
 800810a:	77fb      	strb	r3, [r7, #31]
 800810c:	e0e6      	b.n	80082dc <UART_SetConfig+0x348>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a56      	ldr	r2, [pc, #344]	; (800826c <UART_SetConfig+0x2d8>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d120      	bne.n	800815a <UART_SetConfig+0x1c6>
 8008118:	4b51      	ldr	r3, [pc, #324]	; (8008260 <UART_SetConfig+0x2cc>)
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008122:	2bc0      	cmp	r3, #192	; 0xc0
 8008124:	d013      	beq.n	800814e <UART_SetConfig+0x1ba>
 8008126:	2bc0      	cmp	r3, #192	; 0xc0
 8008128:	d814      	bhi.n	8008154 <UART_SetConfig+0x1c0>
 800812a:	2b80      	cmp	r3, #128	; 0x80
 800812c:	d009      	beq.n	8008142 <UART_SetConfig+0x1ae>
 800812e:	2b80      	cmp	r3, #128	; 0x80
 8008130:	d810      	bhi.n	8008154 <UART_SetConfig+0x1c0>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <UART_SetConfig+0x1a8>
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d006      	beq.n	8008148 <UART_SetConfig+0x1b4>
 800813a:	e00b      	b.n	8008154 <UART_SetConfig+0x1c0>
 800813c:	2300      	movs	r3, #0
 800813e:	77fb      	strb	r3, [r7, #31]
 8008140:	e0cc      	b.n	80082dc <UART_SetConfig+0x348>
 8008142:	2302      	movs	r3, #2
 8008144:	77fb      	strb	r3, [r7, #31]
 8008146:	e0c9      	b.n	80082dc <UART_SetConfig+0x348>
 8008148:	2304      	movs	r3, #4
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e0c6      	b.n	80082dc <UART_SetConfig+0x348>
 800814e:	2308      	movs	r3, #8
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e0c3      	b.n	80082dc <UART_SetConfig+0x348>
 8008154:	2310      	movs	r3, #16
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e0c0      	b.n	80082dc <UART_SetConfig+0x348>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a44      	ldr	r2, [pc, #272]	; (8008270 <UART_SetConfig+0x2dc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d125      	bne.n	80081b0 <UART_SetConfig+0x21c>
 8008164:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <UART_SetConfig+0x2cc>)
 8008166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008172:	d017      	beq.n	80081a4 <UART_SetConfig+0x210>
 8008174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008178:	d817      	bhi.n	80081aa <UART_SetConfig+0x216>
 800817a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817e:	d00b      	beq.n	8008198 <UART_SetConfig+0x204>
 8008180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008184:	d811      	bhi.n	80081aa <UART_SetConfig+0x216>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <UART_SetConfig+0x1fe>
 800818a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818e:	d006      	beq.n	800819e <UART_SetConfig+0x20a>
 8008190:	e00b      	b.n	80081aa <UART_SetConfig+0x216>
 8008192:	2300      	movs	r3, #0
 8008194:	77fb      	strb	r3, [r7, #31]
 8008196:	e0a1      	b.n	80082dc <UART_SetConfig+0x348>
 8008198:	2302      	movs	r3, #2
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e09e      	b.n	80082dc <UART_SetConfig+0x348>
 800819e:	2304      	movs	r3, #4
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e09b      	b.n	80082dc <UART_SetConfig+0x348>
 80081a4:	2308      	movs	r3, #8
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	e098      	b.n	80082dc <UART_SetConfig+0x348>
 80081aa:	2310      	movs	r3, #16
 80081ac:	77fb      	strb	r3, [r7, #31]
 80081ae:	e095      	b.n	80082dc <UART_SetConfig+0x348>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a2f      	ldr	r2, [pc, #188]	; (8008274 <UART_SetConfig+0x2e0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d125      	bne.n	8008206 <UART_SetConfig+0x272>
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <UART_SetConfig+0x2cc>)
 80081bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c8:	d017      	beq.n	80081fa <UART_SetConfig+0x266>
 80081ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081ce:	d817      	bhi.n	8008200 <UART_SetConfig+0x26c>
 80081d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d4:	d00b      	beq.n	80081ee <UART_SetConfig+0x25a>
 80081d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081da:	d811      	bhi.n	8008200 <UART_SetConfig+0x26c>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <UART_SetConfig+0x254>
 80081e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e4:	d006      	beq.n	80081f4 <UART_SetConfig+0x260>
 80081e6:	e00b      	b.n	8008200 <UART_SetConfig+0x26c>
 80081e8:	2301      	movs	r3, #1
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e076      	b.n	80082dc <UART_SetConfig+0x348>
 80081ee:	2302      	movs	r3, #2
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e073      	b.n	80082dc <UART_SetConfig+0x348>
 80081f4:	2304      	movs	r3, #4
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e070      	b.n	80082dc <UART_SetConfig+0x348>
 80081fa:	2308      	movs	r3, #8
 80081fc:	77fb      	strb	r3, [r7, #31]
 80081fe:	e06d      	b.n	80082dc <UART_SetConfig+0x348>
 8008200:	2310      	movs	r3, #16
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	e06a      	b.n	80082dc <UART_SetConfig+0x348>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <UART_SetConfig+0x2e4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d138      	bne.n	8008282 <UART_SetConfig+0x2ee>
 8008210:	4b13      	ldr	r3, [pc, #76]	; (8008260 <UART_SetConfig+0x2cc>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008216:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800821a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800821e:	d017      	beq.n	8008250 <UART_SetConfig+0x2bc>
 8008220:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008224:	d82a      	bhi.n	800827c <UART_SetConfig+0x2e8>
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822a:	d00b      	beq.n	8008244 <UART_SetConfig+0x2b0>
 800822c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008230:	d824      	bhi.n	800827c <UART_SetConfig+0x2e8>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <UART_SetConfig+0x2aa>
 8008236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823a:	d006      	beq.n	800824a <UART_SetConfig+0x2b6>
 800823c:	e01e      	b.n	800827c <UART_SetConfig+0x2e8>
 800823e:	2300      	movs	r3, #0
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e04b      	b.n	80082dc <UART_SetConfig+0x348>
 8008244:	2302      	movs	r3, #2
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e048      	b.n	80082dc <UART_SetConfig+0x348>
 800824a:	2304      	movs	r3, #4
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e045      	b.n	80082dc <UART_SetConfig+0x348>
 8008250:	2308      	movs	r3, #8
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e042      	b.n	80082dc <UART_SetConfig+0x348>
 8008256:	bf00      	nop
 8008258:	efff69f3 	.word	0xefff69f3
 800825c:	40011000 	.word	0x40011000
 8008260:	40023800 	.word	0x40023800
 8008264:	40004400 	.word	0x40004400
 8008268:	40004800 	.word	0x40004800
 800826c:	40004c00 	.word	0x40004c00
 8008270:	40005000 	.word	0x40005000
 8008274:	40011400 	.word	0x40011400
 8008278:	40007800 	.word	0x40007800
 800827c:	2310      	movs	r3, #16
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e02c      	b.n	80082dc <UART_SetConfig+0x348>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a72      	ldr	r2, [pc, #456]	; (8008450 <UART_SetConfig+0x4bc>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d125      	bne.n	80082d8 <UART_SetConfig+0x344>
 800828c:	4b71      	ldr	r3, [pc, #452]	; (8008454 <UART_SetConfig+0x4c0>)
 800828e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008292:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008296:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800829a:	d017      	beq.n	80082cc <UART_SetConfig+0x338>
 800829c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082a0:	d817      	bhi.n	80082d2 <UART_SetConfig+0x33e>
 80082a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a6:	d00b      	beq.n	80082c0 <UART_SetConfig+0x32c>
 80082a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ac:	d811      	bhi.n	80082d2 <UART_SetConfig+0x33e>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <UART_SetConfig+0x326>
 80082b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b6:	d006      	beq.n	80082c6 <UART_SetConfig+0x332>
 80082b8:	e00b      	b.n	80082d2 <UART_SetConfig+0x33e>
 80082ba:	2300      	movs	r3, #0
 80082bc:	77fb      	strb	r3, [r7, #31]
 80082be:	e00d      	b.n	80082dc <UART_SetConfig+0x348>
 80082c0:	2302      	movs	r3, #2
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e00a      	b.n	80082dc <UART_SetConfig+0x348>
 80082c6:	2304      	movs	r3, #4
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e007      	b.n	80082dc <UART_SetConfig+0x348>
 80082cc:	2308      	movs	r3, #8
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e004      	b.n	80082dc <UART_SetConfig+0x348>
 80082d2:	2310      	movs	r3, #16
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e001      	b.n	80082dc <UART_SetConfig+0x348>
 80082d8:	2310      	movs	r3, #16
 80082da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082e4:	d15b      	bne.n	800839e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80082e6:	7ffb      	ldrb	r3, [r7, #31]
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d828      	bhi.n	800833e <UART_SetConfig+0x3aa>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <UART_SetConfig+0x360>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008329 	.word	0x08008329
 8008300:	0800833f 	.word	0x0800833f
 8008304:	0800832f 	.word	0x0800832f
 8008308:	0800833f 	.word	0x0800833f
 800830c:	0800833f 	.word	0x0800833f
 8008310:	0800833f 	.word	0x0800833f
 8008314:	08008337 	.word	0x08008337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008318:	f7fd fc08 	bl	8005b2c <HAL_RCC_GetPCLK1Freq>
 800831c:	61b8      	str	r0, [r7, #24]
        break;
 800831e:	e013      	b.n	8008348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008320:	f7fd fc18 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8008324:	61b8      	str	r0, [r7, #24]
        break;
 8008326:	e00f      	b.n	8008348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008328:	4b4b      	ldr	r3, [pc, #300]	; (8008458 <UART_SetConfig+0x4c4>)
 800832a:	61bb      	str	r3, [r7, #24]
        break;
 800832c:	e00c      	b.n	8008348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800832e:	f7fd faeb 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 8008332:	61b8      	str	r0, [r7, #24]
        break;
 8008334:	e008      	b.n	8008348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800833a:	61bb      	str	r3, [r7, #24]
        break;
 800833c:	e004      	b.n	8008348 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	77bb      	strb	r3, [r7, #30]
        break;
 8008346:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d074      	beq.n	8008438 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	005a      	lsls	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	085b      	lsrs	r3, r3, #1
 8008358:	441a      	add	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b0f      	cmp	r3, #15
 8008368:	d916      	bls.n	8008398 <UART_SetConfig+0x404>
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008370:	d212      	bcs.n	8008398 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f023 030f 	bic.w	r3, r3, #15
 800837a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	b29a      	uxth	r2, r3
 8008388:	89fb      	ldrh	r3, [r7, #14]
 800838a:	4313      	orrs	r3, r2
 800838c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	89fa      	ldrh	r2, [r7, #14]
 8008394:	60da      	str	r2, [r3, #12]
 8008396:	e04f      	b.n	8008438 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	77bb      	strb	r3, [r7, #30]
 800839c:	e04c      	b.n	8008438 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800839e:	7ffb      	ldrb	r3, [r7, #31]
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d828      	bhi.n	80083f6 <UART_SetConfig+0x462>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <UART_SetConfig+0x418>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083d1 	.word	0x080083d1
 80083b0:	080083d9 	.word	0x080083d9
 80083b4:	080083e1 	.word	0x080083e1
 80083b8:	080083f7 	.word	0x080083f7
 80083bc:	080083e7 	.word	0x080083e7
 80083c0:	080083f7 	.word	0x080083f7
 80083c4:	080083f7 	.word	0x080083f7
 80083c8:	080083f7 	.word	0x080083f7
 80083cc:	080083ef 	.word	0x080083ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd fbac 	bl	8005b2c <HAL_RCC_GetPCLK1Freq>
 80083d4:	61b8      	str	r0, [r7, #24]
        break;
 80083d6:	e013      	b.n	8008400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d8:	f7fd fbbc 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 80083dc:	61b8      	str	r0, [r7, #24]
        break;
 80083de:	e00f      	b.n	8008400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083e0:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <UART_SetConfig+0x4c4>)
 80083e2:	61bb      	str	r3, [r7, #24]
        break;
 80083e4:	e00c      	b.n	8008400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083e6:	f7fd fa8f 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 80083ea:	61b8      	str	r0, [r7, #24]
        break;
 80083ec:	e008      	b.n	8008400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083f2:	61bb      	str	r3, [r7, #24]
        break;
 80083f4:	e004      	b.n	8008400 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	77bb      	strb	r3, [r7, #30]
        break;
 80083fe:	bf00      	nop
    }

    if (pclk != 0U)
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d018      	beq.n	8008438 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	085a      	lsrs	r2, r3, #1
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	441a      	add	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	fbb2 f3f3 	udiv	r3, r2, r3
 8008418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b0f      	cmp	r3, #15
 800841e:	d909      	bls.n	8008434 <UART_SetConfig+0x4a0>
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008426:	d205      	bcs.n	8008434 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e001      	b.n	8008438 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008444:	7fbb      	ldrb	r3, [r7, #30]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40007c00 	.word	0x40007c00
 8008454:	40023800 	.word	0x40023800
 8008458:	00f42400 	.word	0x00f42400

0800845c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d01a      	beq.n	8008572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800855a:	d10a      	bne.n	8008572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085b0:	f7fa fe7e 	bl	80032b0 <HAL_GetTick>
 80085b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d10e      	bne.n	80085e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f831 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e027      	b.n	8008632 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d10e      	bne.n	800860e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f81b 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e011      	b.n	8008632 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b09c      	sub	sp, #112	; 0x70
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	603b      	str	r3, [r7, #0]
 8008646:	4613      	mov	r3, r2
 8008648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864a:	e0a7      	b.n	800879c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008652:	f000 80a3 	beq.w	800879c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008656:	f7fa fe2b 	bl	80032b0 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008662:	429a      	cmp	r2, r3
 8008664:	d302      	bcc.n	800866c <UART_WaitOnFlagUntilTimeout+0x32>
 8008666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008668:	2b00      	cmp	r3, #0
 800866a:	d13f      	bne.n	80086ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800867a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008680:	667b      	str	r3, [r7, #100]	; 0x64
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800868a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800868c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e6      	bne.n	800866c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	663b      	str	r3, [r7, #96]	; 0x60
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3308      	adds	r3, #8
 80086bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086be:	64ba      	str	r2, [r7, #72]	; 0x48
 80086c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e068      	b.n	80087be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d050      	beq.n	800879c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008708:	d148      	bne.n	800879c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008712:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008732:	637b      	str	r3, [r7, #52]	; 0x34
 8008734:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e6      	bne.n	8008714 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3308      	adds	r3, #8
 800874c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	613b      	str	r3, [r7, #16]
   return(result);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f023 0301 	bic.w	r3, r3, #1
 800875c:	66bb      	str	r3, [r7, #104]	; 0x68
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008766:	623a      	str	r2, [r7, #32]
 8008768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	69f9      	ldr	r1, [r7, #28]
 800876c:	6a3a      	ldr	r2, [r7, #32]
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	61bb      	str	r3, [r7, #24]
   return(result);
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e5      	bne.n	8008746 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2220      	movs	r2, #32
 800877e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2220      	movs	r2, #32
 8008784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e010      	b.n	80087be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69da      	ldr	r2, [r3, #28]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4013      	ands	r3, r2
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	bf0c      	ite	eq
 80087ac:	2301      	moveq	r3, #1
 80087ae:	2300      	movne	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	f43f af48 	beq.w	800864c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3770      	adds	r7, #112	; 0x70
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b097      	sub	sp, #92	; 0x5c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	88fa      	ldrh	r2, [r7, #6]
 80087e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d10e      	bne.n	800881a <UART_Start_Receive_IT+0x52>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <UART_Start_Receive_IT+0x48>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f240 12ff 	movw	r2, #511	; 0x1ff
 800880a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800880e:	e02d      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	22ff      	movs	r2, #255	; 0xff
 8008814:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008818:	e028      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <UART_Start_Receive_IT+0x76>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <UART_Start_Receive_IT+0x6c>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	22ff      	movs	r2, #255	; 0xff
 800882e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008832:	e01b      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	227f      	movs	r2, #127	; 0x7f
 8008838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800883c:	e016      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008846:	d10d      	bne.n	8008864 <UART_Start_Receive_IT+0x9c>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <UART_Start_Receive_IT+0x92>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	227f      	movs	r2, #127	; 0x7f
 8008854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008858:	e008      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	223f      	movs	r2, #63	; 0x3f
 800885e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008862:	e003      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2222      	movs	r2, #34	; 0x22
 8008878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	657b      	str	r3, [r7, #84]	; 0x54
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3308      	adds	r3, #8
 800889a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800889c:	64ba      	str	r2, [r7, #72]	; 0x48
 800889e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e5      	bne.n	800887c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d107      	bne.n	80088ca <UART_Start_Receive_IT+0x102>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a21      	ldr	r2, [pc, #132]	; (800894c <UART_Start_Receive_IT+0x184>)
 80088c6:	669a      	str	r2, [r3, #104]	; 0x68
 80088c8:	e002      	b.n	80088d0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a20      	ldr	r2, [pc, #128]	; (8008950 <UART_Start_Receive_IT+0x188>)
 80088ce:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d019      	beq.n	800890c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80088ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
 80088f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_Start_Receive_IT+0x110>
 800890a:	e018      	b.n	800893e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	613b      	str	r3, [r7, #16]
   return(result);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f043 0320 	orr.w	r3, r3, #32
 8008920:	653b      	str	r3, [r7, #80]	; 0x50
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892a:	623b      	str	r3, [r7, #32]
 800892c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	69f9      	ldr	r1, [r7, #28]
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	61bb      	str	r3, [r7, #24]
   return(result);
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e6      	bne.n	800890c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	375c      	adds	r7, #92	; 0x5c
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	08008c03 	.word	0x08008c03
 8008950:	08008a9d 	.word	0x08008a9d

08008954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008954:	b480      	push	{r7}
 8008956:	b095      	sub	sp, #84	; 0x54
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897a:	643b      	str	r3, [r7, #64]	; 0x40
 800897c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e6      	bne.n	800895c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	61fb      	str	r3, [r7, #28]
   return(result);
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e5      	bne.n	800898e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d118      	bne.n	80089fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f023 0310 	bic.w	r3, r3, #16
 80089de:	647b      	str	r3, [r7, #68]	; 0x44
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e8:	61bb      	str	r3, [r7, #24]
 80089ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6979      	ldr	r1, [r7, #20]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	613b      	str	r3, [r7, #16]
   return(result);
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a10:	bf00      	nop
 8008a12:	3754      	adds	r7, #84	; 0x54
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff fa8a 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	6979      	ldr	r1, [r7, #20]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e6      	bne.n	8008a50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fa56 	bl	8007f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a94:	bf00      	nop
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b096      	sub	sp, #88	; 0x58
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aaa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ab4:	2b22      	cmp	r3, #34	; 0x22
 8008ab6:	f040 8098 	bne.w	8008bea <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ac4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008ac8:	b2d9      	uxtb	r1, r3
 8008aca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad4:	400a      	ands	r2, r1
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d17b      	bne.n	8008bfa <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b16:	653b      	str	r3, [r7, #80]	; 0x50
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	647b      	str	r3, [r7, #68]	; 0x44
 8008b22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	623b      	str	r3, [r7, #32]
   return(result);
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3308      	adds	r3, #8
 8008b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b54:	633a      	str	r2, [r7, #48]	; 0x30
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e5      	bne.n	8008b34 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d12e      	bne.n	8008be2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0310 	bic.w	r3, r3, #16
 8008b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	69b9      	ldr	r1, [r7, #24]
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e6      	bne.n	8008b8a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	2b10      	cmp	r3, #16
 8008bc8:	d103      	bne.n	8008bd2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2210      	movs	r2, #16
 8008bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff f9c4 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008be0:	e00b      	b.n	8008bfa <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7f8 fdfe 	bl	80017e4 <HAL_UART_RxCpltCallback>
}
 8008be8:	e007      	b.n	8008bfa <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699a      	ldr	r2, [r3, #24]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 0208 	orr.w	r2, r2, #8
 8008bf8:	619a      	str	r2, [r3, #24]
}
 8008bfa:	bf00      	nop
 8008bfc:	3758      	adds	r7, #88	; 0x58
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b096      	sub	sp, #88	; 0x58
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c1a:	2b22      	cmp	r3, #34	; 0x22
 8008c1c:	f040 8098 	bne.w	8008d50 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c30:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c38:	4013      	ands	r3, r2
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c44:	1c9a      	adds	r2, r3, #2
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d17b      	bne.n	8008d60 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c86:	643b      	str	r3, [r7, #64]	; 0x40
 8008c88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e5      	bne.n	8008c9a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d12e      	bne.n	8008d48 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f023 0310 	bic.w	r3, r3, #16
 8008d04:	647b      	str	r3, [r7, #68]	; 0x44
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0e:	61bb      	str	r3, [r7, #24]
 8008d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6979      	ldr	r1, [r7, #20]
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e6      	bne.n	8008cf0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d103      	bne.n	8008d38 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2210      	movs	r2, #16
 8008d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff f911 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d46:	e00b      	b.n	8008d60 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7f8 fd4b 	bl	80017e4 <HAL_UART_RxCpltCallback>
}
 8008d4e:	e007      	b.n	8008d60 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0208 	orr.w	r2, r2, #8
 8008d5e:	619a      	str	r2, [r3, #24]
}
 8008d60:	bf00      	nop
 8008d62:	3758      	adds	r7, #88	; 0x58
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d68:	b084      	sub	sp, #16
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	f107 001c 	add.w	r0, r7, #28
 8008d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d120      	bne.n	8008dc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	4b20      	ldr	r3, [pc, #128]	; (8008e14 <USB_CoreInit+0xac>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d105      	bne.n	8008db6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa96 	bl	80092e8 <USB_CoreReset>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e010      	b.n	8008de4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa8a 	bl	80092e8 <USB_CoreReset>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10b      	bne.n	8008e02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f043 0206 	orr.w	r2, r3, #6
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f043 0220 	orr.w	r2, r3, #32
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e0e:	b004      	add	sp, #16
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	ffbdffbf 	.word	0xffbdffbf

08008e18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f023 0201 	bic.w	r2, r3, #1
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d115      	bne.n	8008e88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7fa fa2d 	bl	80032c8 <HAL_Delay>
      ms++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa29 	bl	80092cc <USB_GetMode>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d01e      	beq.n	8008ebe <USB_SetCurrentMode+0x84>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b31      	cmp	r3, #49	; 0x31
 8008e84:	d9f0      	bls.n	8008e68 <USB_SetCurrentMode+0x2e>
 8008e86:	e01a      	b.n	8008ebe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d115      	bne.n	8008eba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f7fa fa14 	bl	80032c8 <HAL_Delay>
      ms++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa10 	bl	80092cc <USB_GetMode>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <USB_SetCurrentMode+0x84>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b31      	cmp	r3, #49	; 0x31
 8008eb6:	d9f0      	bls.n	8008e9a <USB_SetCurrentMode+0x60>
 8008eb8:	e001      	b.n	8008ebe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e005      	b.n	8008eca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b32      	cmp	r3, #50	; 0x32
 8008ec2:	d101      	bne.n	8008ec8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e009      	b.n	8008f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	3340      	adds	r3, #64	; 0x40
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	3301      	adds	r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b0e      	cmp	r3, #14
 8008f0c:	d9f2      	bls.n	8008ef4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d11c      	bne.n	8008f4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f22:	f043 0302 	orr.w	r3, r3, #2
 8008f26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	e005      	b.n	8008f5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f60:	461a      	mov	r2, r3
 8008f62:	2300      	movs	r3, #0
 8008f64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	461a      	mov	r2, r3
 8008f76:	680b      	ldr	r3, [r1, #0]
 8008f78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d10c      	bne.n	8008f9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f86:	2100      	movs	r1, #0
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f965 	bl	8009258 <USB_SetDevSpeed>
 8008f8e:	e008      	b.n	8008fa2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f90:	2101      	movs	r1, #1
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f960 	bl	8009258 <USB_SetDevSpeed>
 8008f98:	e003      	b.n	8008fa2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f9a:	2103      	movs	r1, #3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f95b 	bl	8009258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f8f3 	bl	8009190 <USB_FlushTxFifo>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f91f 	bl	80091f8 <USB_FlushRxFifo>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fca:	461a      	mov	r2, r3
 8008fcc:	2300      	movs	r3, #0
 8008fce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2300      	movs	r3, #0
 8008fda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	e043      	b.n	8009076 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009004:	d118      	bne.n	8009038 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	461a      	mov	r2, r3
 800901a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	e013      	b.n	800904a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902e:	461a      	mov	r2, r3
 8009030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e008      	b.n	800904a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	461a      	mov	r2, r3
 8009046:	2300      	movs	r3, #0
 8009048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009056:	461a      	mov	r2, r3
 8009058:	2300      	movs	r3, #0
 800905a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009068:	461a      	mov	r2, r3
 800906a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800906e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3301      	adds	r3, #1
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	429a      	cmp	r2, r3
 800907c:	d3b7      	bcc.n	8008fee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	e043      	b.n	800910c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800909a:	d118      	bne.n	80090ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ae:	461a      	mov	r2, r3
 80090b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	e013      	b.n	80090e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	461a      	mov	r2, r3
 80090c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e008      	b.n	80090e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	461a      	mov	r2, r3
 80090dc:	2300      	movs	r3, #0
 80090de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	461a      	mov	r2, r3
 80090ee:	2300      	movs	r3, #0
 80090f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	461a      	mov	r2, r3
 8009100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	429a      	cmp	r2, r3
 8009112:	d3b7      	bcc.n	8009084 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	2b00      	cmp	r3, #0
 800913a:	d105      	bne.n	8009148 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f043 0210 	orr.w	r2, r3, #16
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699a      	ldr	r2, [r3, #24]
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <USB_DevInit+0x2b4>)
 800914e:	4313      	orrs	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	f043 0208 	orr.w	r2, r3, #8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d105      	bne.n	8009178 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <USB_DevInit+0x2b8>)
 8009172:	4313      	orrs	r3, r2
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009184:	b004      	add	sp, #16
 8009186:	4770      	bx	lr
 8009188:	803c3800 	.word	0x803c3800
 800918c:	40000004 	.word	0x40000004

08009190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a13      	ldr	r2, [pc, #76]	; (80091f4 <USB_FlushTxFifo+0x64>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d901      	bls.n	80091b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e01b      	b.n	80091e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	daf2      	bge.n	800919e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	019b      	lsls	r3, r3, #6
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a08      	ldr	r2, [pc, #32]	; (80091f4 <USB_FlushTxFifo+0x64>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d901      	bls.n	80091da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e006      	b.n	80091e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d0f0      	beq.n	80091c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	00030d40 	.word	0x00030d40

080091f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a11      	ldr	r2, [pc, #68]	; (8009254 <USB_FlushRxFifo+0x5c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e018      	b.n	8009248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	daf2      	bge.n	8009204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2210      	movs	r2, #16
 8009226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4a08      	ldr	r2, [pc, #32]	; (8009254 <USB_FlushRxFifo+0x5c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d901      	bls.n	800923a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e006      	b.n	8009248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2b10      	cmp	r3, #16
 8009244:	d0f0      	beq.n	8009228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	00030d40 	.word	0x00030d40

08009258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009278:	4313      	orrs	r3, r2
 800927a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092a4:	f023 0303 	bic.w	r3, r3, #3
 80092a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b8:	f043 0302 	orr.w	r3, r3, #2
 80092bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	f003 0301 	and.w	r3, r3, #1
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4a13      	ldr	r2, [pc, #76]	; (800934c <USB_CoreReset+0x64>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d901      	bls.n	8009306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e01b      	b.n	800933e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	daf2      	bge.n	80092f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f043 0201 	orr.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <USB_CoreReset+0x64>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d901      	bls.n	8009330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e006      	b.n	800933e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	d0f0      	beq.n	800931e <USB_CoreReset+0x36>

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	00030d40 	.word	0x00030d40

08009350 <__cvt>:
 8009350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009352:	ed2d 8b02 	vpush	{d8}
 8009356:	eeb0 8b40 	vmov.f64	d8, d0
 800935a:	b085      	sub	sp, #20
 800935c:	4617      	mov	r7, r2
 800935e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009360:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009362:	ee18 2a90 	vmov	r2, s17
 8009366:	f025 0520 	bic.w	r5, r5, #32
 800936a:	2a00      	cmp	r2, #0
 800936c:	bfb6      	itet	lt
 800936e:	222d      	movlt	r2, #45	; 0x2d
 8009370:	2200      	movge	r2, #0
 8009372:	eeb1 8b40 	vneglt.f64	d8, d0
 8009376:	2d46      	cmp	r5, #70	; 0x46
 8009378:	460c      	mov	r4, r1
 800937a:	701a      	strb	r2, [r3, #0]
 800937c:	d004      	beq.n	8009388 <__cvt+0x38>
 800937e:	2d45      	cmp	r5, #69	; 0x45
 8009380:	d100      	bne.n	8009384 <__cvt+0x34>
 8009382:	3401      	adds	r4, #1
 8009384:	2102      	movs	r1, #2
 8009386:	e000      	b.n	800938a <__cvt+0x3a>
 8009388:	2103      	movs	r1, #3
 800938a:	ab03      	add	r3, sp, #12
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	ab02      	add	r3, sp, #8
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	4622      	mov	r2, r4
 8009394:	4633      	mov	r3, r6
 8009396:	eeb0 0b48 	vmov.f64	d0, d8
 800939a:	f001 f8bd 	bl	800a518 <_dtoa_r>
 800939e:	2d47      	cmp	r5, #71	; 0x47
 80093a0:	d101      	bne.n	80093a6 <__cvt+0x56>
 80093a2:	07fb      	lsls	r3, r7, #31
 80093a4:	d51a      	bpl.n	80093dc <__cvt+0x8c>
 80093a6:	2d46      	cmp	r5, #70	; 0x46
 80093a8:	eb00 0204 	add.w	r2, r0, r4
 80093ac:	d10c      	bne.n	80093c8 <__cvt+0x78>
 80093ae:	7803      	ldrb	r3, [r0, #0]
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d107      	bne.n	80093c4 <__cvt+0x74>
 80093b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093bc:	bf1c      	itt	ne
 80093be:	f1c4 0401 	rsbne	r4, r4, #1
 80093c2:	6034      	strne	r4, [r6, #0]
 80093c4:	6833      	ldr	r3, [r6, #0]
 80093c6:	441a      	add	r2, r3
 80093c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d0:	bf08      	it	eq
 80093d2:	9203      	streq	r2, [sp, #12]
 80093d4:	2130      	movs	r1, #48	; 0x30
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	4293      	cmp	r3, r2
 80093da:	d307      	bcc.n	80093ec <__cvt+0x9c>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093e0:	1a1b      	subs	r3, r3, r0
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	b005      	add	sp, #20
 80093e6:	ecbd 8b02 	vpop	{d8}
 80093ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ec:	1c5c      	adds	r4, r3, #1
 80093ee:	9403      	str	r4, [sp, #12]
 80093f0:	7019      	strb	r1, [r3, #0]
 80093f2:	e7f0      	b.n	80093d6 <__cvt+0x86>

080093f4 <__exponent>:
 80093f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093f6:	4603      	mov	r3, r0
 80093f8:	2900      	cmp	r1, #0
 80093fa:	bfb8      	it	lt
 80093fc:	4249      	neglt	r1, r1
 80093fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009402:	bfb4      	ite	lt
 8009404:	222d      	movlt	r2, #45	; 0x2d
 8009406:	222b      	movge	r2, #43	; 0x2b
 8009408:	2909      	cmp	r1, #9
 800940a:	7042      	strb	r2, [r0, #1]
 800940c:	dd2a      	ble.n	8009464 <__exponent+0x70>
 800940e:	f10d 0207 	add.w	r2, sp, #7
 8009412:	4617      	mov	r7, r2
 8009414:	260a      	movs	r6, #10
 8009416:	4694      	mov	ip, r2
 8009418:	fb91 f5f6 	sdiv	r5, r1, r6
 800941c:	fb06 1415 	mls	r4, r6, r5, r1
 8009420:	3430      	adds	r4, #48	; 0x30
 8009422:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009426:	460c      	mov	r4, r1
 8009428:	2c63      	cmp	r4, #99	; 0x63
 800942a:	f102 32ff 	add.w	r2, r2, #4294967295
 800942e:	4629      	mov	r1, r5
 8009430:	dcf1      	bgt.n	8009416 <__exponent+0x22>
 8009432:	3130      	adds	r1, #48	; 0x30
 8009434:	f1ac 0402 	sub.w	r4, ip, #2
 8009438:	f802 1c01 	strb.w	r1, [r2, #-1]
 800943c:	1c41      	adds	r1, r0, #1
 800943e:	4622      	mov	r2, r4
 8009440:	42ba      	cmp	r2, r7
 8009442:	d30a      	bcc.n	800945a <__exponent+0x66>
 8009444:	f10d 0209 	add.w	r2, sp, #9
 8009448:	eba2 020c 	sub.w	r2, r2, ip
 800944c:	42bc      	cmp	r4, r7
 800944e:	bf88      	it	hi
 8009450:	2200      	movhi	r2, #0
 8009452:	4413      	add	r3, r2
 8009454:	1a18      	subs	r0, r3, r0
 8009456:	b003      	add	sp, #12
 8009458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800945a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800945e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009462:	e7ed      	b.n	8009440 <__exponent+0x4c>
 8009464:	2330      	movs	r3, #48	; 0x30
 8009466:	3130      	adds	r1, #48	; 0x30
 8009468:	7083      	strb	r3, [r0, #2]
 800946a:	70c1      	strb	r1, [r0, #3]
 800946c:	1d03      	adds	r3, r0, #4
 800946e:	e7f1      	b.n	8009454 <__exponent+0x60>

08009470 <_printf_float>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	b08b      	sub	sp, #44	; 0x2c
 8009476:	460c      	mov	r4, r1
 8009478:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800947c:	4616      	mov	r6, r2
 800947e:	461f      	mov	r7, r3
 8009480:	4605      	mov	r5, r0
 8009482:	f000 ff33 	bl	800a2ec <_localeconv_r>
 8009486:	f8d0 b000 	ldr.w	fp, [r0]
 800948a:	4658      	mov	r0, fp
 800948c:	f7f6 ff28 	bl	80002e0 <strlen>
 8009490:	2300      	movs	r3, #0
 8009492:	9308      	str	r3, [sp, #32]
 8009494:	f8d8 3000 	ldr.w	r3, [r8]
 8009498:	f894 9018 	ldrb.w	r9, [r4, #24]
 800949c:	6822      	ldr	r2, [r4, #0]
 800949e:	3307      	adds	r3, #7
 80094a0:	f023 0307 	bic.w	r3, r3, #7
 80094a4:	f103 0108 	add.w	r1, r3, #8
 80094a8:	f8c8 1000 	str.w	r1, [r8]
 80094ac:	ed93 0b00 	vldr	d0, [r3]
 80094b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009710 <_printf_float+0x2a0>
 80094b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80094b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80094bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80094c4:	4682      	mov	sl, r0
 80094c6:	dd24      	ble.n	8009512 <_printf_float+0xa2>
 80094c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80094cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d0:	d502      	bpl.n	80094d8 <_printf_float+0x68>
 80094d2:	232d      	movs	r3, #45	; 0x2d
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d8:	498f      	ldr	r1, [pc, #572]	; (8009718 <_printf_float+0x2a8>)
 80094da:	4b90      	ldr	r3, [pc, #576]	; (800971c <_printf_float+0x2ac>)
 80094dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80094e0:	bf94      	ite	ls
 80094e2:	4688      	movls	r8, r1
 80094e4:	4698      	movhi	r8, r3
 80094e6:	2303      	movs	r3, #3
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	f022 0204 	bic.w	r2, r2, #4
 80094ee:	2300      	movs	r3, #0
 80094f0:	6022      	str	r2, [r4, #0]
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	9700      	str	r7, [sp, #0]
 80094f6:	4633      	mov	r3, r6
 80094f8:	aa09      	add	r2, sp, #36	; 0x24
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f9d1 	bl	80098a4 <_printf_common>
 8009502:	3001      	adds	r0, #1
 8009504:	f040 808a 	bne.w	800961c <_printf_float+0x1ac>
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	b00b      	add	sp, #44	; 0x2c
 800950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009512:	eeb4 0b40 	vcmp.f64	d0, d0
 8009516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951a:	d709      	bvc.n	8009530 <_printf_float+0xc0>
 800951c:	ee10 3a90 	vmov	r3, s1
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfbc      	itt	lt
 8009524:	232d      	movlt	r3, #45	; 0x2d
 8009526:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800952a:	497d      	ldr	r1, [pc, #500]	; (8009720 <_printf_float+0x2b0>)
 800952c:	4b7d      	ldr	r3, [pc, #500]	; (8009724 <_printf_float+0x2b4>)
 800952e:	e7d5      	b.n	80094dc <_printf_float+0x6c>
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009536:	9104      	str	r1, [sp, #16]
 8009538:	1c59      	adds	r1, r3, #1
 800953a:	d13c      	bne.n	80095b6 <_printf_float+0x146>
 800953c:	2306      	movs	r3, #6
 800953e:	6063      	str	r3, [r4, #4]
 8009540:	2300      	movs	r3, #0
 8009542:	9303      	str	r3, [sp, #12]
 8009544:	ab08      	add	r3, sp, #32
 8009546:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800954a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800954e:	ab07      	add	r3, sp, #28
 8009550:	6861      	ldr	r1, [r4, #4]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	6022      	str	r2, [r4, #0]
 8009556:	f10d 031b 	add.w	r3, sp, #27
 800955a:	4628      	mov	r0, r5
 800955c:	f7ff fef8 	bl	8009350 <__cvt>
 8009560:	9b04      	ldr	r3, [sp, #16]
 8009562:	9907      	ldr	r1, [sp, #28]
 8009564:	2b47      	cmp	r3, #71	; 0x47
 8009566:	4680      	mov	r8, r0
 8009568:	d108      	bne.n	800957c <_printf_float+0x10c>
 800956a:	1cc8      	adds	r0, r1, #3
 800956c:	db02      	blt.n	8009574 <_printf_float+0x104>
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	4299      	cmp	r1, r3
 8009572:	dd41      	ble.n	80095f8 <_printf_float+0x188>
 8009574:	f1a9 0902 	sub.w	r9, r9, #2
 8009578:	fa5f f989 	uxtb.w	r9, r9
 800957c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009580:	d820      	bhi.n	80095c4 <_printf_float+0x154>
 8009582:	3901      	subs	r1, #1
 8009584:	464a      	mov	r2, r9
 8009586:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800958a:	9107      	str	r1, [sp, #28]
 800958c:	f7ff ff32 	bl	80093f4 <__exponent>
 8009590:	9a08      	ldr	r2, [sp, #32]
 8009592:	9004      	str	r0, [sp, #16]
 8009594:	1813      	adds	r3, r2, r0
 8009596:	2a01      	cmp	r2, #1
 8009598:	6123      	str	r3, [r4, #16]
 800959a:	dc02      	bgt.n	80095a2 <_printf_float+0x132>
 800959c:	6822      	ldr	r2, [r4, #0]
 800959e:	07d2      	lsls	r2, r2, #31
 80095a0:	d501      	bpl.n	80095a6 <_printf_float+0x136>
 80095a2:	3301      	adds	r3, #1
 80095a4:	6123      	str	r3, [r4, #16]
 80095a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0a2      	beq.n	80094f4 <_printf_float+0x84>
 80095ae:	232d      	movs	r3, #45	; 0x2d
 80095b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b4:	e79e      	b.n	80094f4 <_printf_float+0x84>
 80095b6:	9904      	ldr	r1, [sp, #16]
 80095b8:	2947      	cmp	r1, #71	; 0x47
 80095ba:	d1c1      	bne.n	8009540 <_printf_float+0xd0>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1bf      	bne.n	8009540 <_printf_float+0xd0>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e7bc      	b.n	800953e <_printf_float+0xce>
 80095c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80095c8:	d118      	bne.n	80095fc <_printf_float+0x18c>
 80095ca:	2900      	cmp	r1, #0
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	dd0b      	ble.n	80095e8 <_printf_float+0x178>
 80095d0:	6121      	str	r1, [r4, #16]
 80095d2:	b913      	cbnz	r3, 80095da <_printf_float+0x16a>
 80095d4:	6822      	ldr	r2, [r4, #0]
 80095d6:	07d0      	lsls	r0, r2, #31
 80095d8:	d502      	bpl.n	80095e0 <_printf_float+0x170>
 80095da:	3301      	adds	r3, #1
 80095dc:	440b      	add	r3, r1
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	2300      	movs	r3, #0
 80095e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	e7de      	b.n	80095a6 <_printf_float+0x136>
 80095e8:	b913      	cbnz	r3, 80095f0 <_printf_float+0x180>
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	07d2      	lsls	r2, r2, #31
 80095ee:	d501      	bpl.n	80095f4 <_printf_float+0x184>
 80095f0:	3302      	adds	r3, #2
 80095f2:	e7f4      	b.n	80095de <_printf_float+0x16e>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e7f2      	b.n	80095de <_printf_float+0x16e>
 80095f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80095fc:	9b08      	ldr	r3, [sp, #32]
 80095fe:	4299      	cmp	r1, r3
 8009600:	db05      	blt.n	800960e <_printf_float+0x19e>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	6121      	str	r1, [r4, #16]
 8009606:	07d8      	lsls	r0, r3, #31
 8009608:	d5ea      	bpl.n	80095e0 <_printf_float+0x170>
 800960a:	1c4b      	adds	r3, r1, #1
 800960c:	e7e7      	b.n	80095de <_printf_float+0x16e>
 800960e:	2900      	cmp	r1, #0
 8009610:	bfd4      	ite	le
 8009612:	f1c1 0202 	rsble	r2, r1, #2
 8009616:	2201      	movgt	r2, #1
 8009618:	4413      	add	r3, r2
 800961a:	e7e0      	b.n	80095de <_printf_float+0x16e>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	055a      	lsls	r2, r3, #21
 8009620:	d407      	bmi.n	8009632 <_printf_float+0x1c2>
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	4642      	mov	r2, r8
 8009626:	4631      	mov	r1, r6
 8009628:	4628      	mov	r0, r5
 800962a:	47b8      	blx	r7
 800962c:	3001      	adds	r0, #1
 800962e:	d12a      	bne.n	8009686 <_printf_float+0x216>
 8009630:	e76a      	b.n	8009508 <_printf_float+0x98>
 8009632:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009636:	f240 80e0 	bls.w	80097fa <_printf_float+0x38a>
 800963a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800963e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009646:	d133      	bne.n	80096b0 <_printf_float+0x240>
 8009648:	4a37      	ldr	r2, [pc, #220]	; (8009728 <_printf_float+0x2b8>)
 800964a:	2301      	movs	r3, #1
 800964c:	4631      	mov	r1, r6
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	f43f af58 	beq.w	8009508 <_printf_float+0x98>
 8009658:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800965c:	429a      	cmp	r2, r3
 800965e:	db02      	blt.n	8009666 <_printf_float+0x1f6>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	07d8      	lsls	r0, r3, #31
 8009664:	d50f      	bpl.n	8009686 <_printf_float+0x216>
 8009666:	4653      	mov	r3, sl
 8009668:	465a      	mov	r2, fp
 800966a:	4631      	mov	r1, r6
 800966c:	4628      	mov	r0, r5
 800966e:	47b8      	blx	r7
 8009670:	3001      	adds	r0, #1
 8009672:	f43f af49 	beq.w	8009508 <_printf_float+0x98>
 8009676:	f04f 0800 	mov.w	r8, #0
 800967a:	f104 091a 	add.w	r9, r4, #26
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	3b01      	subs	r3, #1
 8009682:	4543      	cmp	r3, r8
 8009684:	dc09      	bgt.n	800969a <_printf_float+0x22a>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	079b      	lsls	r3, r3, #30
 800968a:	f100 8106 	bmi.w	800989a <_printf_float+0x42a>
 800968e:	68e0      	ldr	r0, [r4, #12]
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	4298      	cmp	r0, r3
 8009694:	bfb8      	it	lt
 8009696:	4618      	movlt	r0, r3
 8009698:	e738      	b.n	800950c <_printf_float+0x9c>
 800969a:	2301      	movs	r3, #1
 800969c:	464a      	mov	r2, r9
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f af2f 	beq.w	8009508 <_printf_float+0x98>
 80096aa:	f108 0801 	add.w	r8, r8, #1
 80096ae:	e7e6      	b.n	800967e <_printf_float+0x20e>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc3a      	bgt.n	800972c <_printf_float+0x2bc>
 80096b6:	4a1c      	ldr	r2, [pc, #112]	; (8009728 <_printf_float+0x2b8>)
 80096b8:	2301      	movs	r3, #1
 80096ba:	4631      	mov	r1, r6
 80096bc:	4628      	mov	r0, r5
 80096be:	47b8      	blx	r7
 80096c0:	3001      	adds	r0, #1
 80096c2:	f43f af21 	beq.w	8009508 <_printf_float+0x98>
 80096c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	d102      	bne.n	80096d4 <_printf_float+0x264>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	07d9      	lsls	r1, r3, #31
 80096d2:	d5d8      	bpl.n	8009686 <_printf_float+0x216>
 80096d4:	4653      	mov	r3, sl
 80096d6:	465a      	mov	r2, fp
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	f43f af12 	beq.w	8009508 <_printf_float+0x98>
 80096e4:	f04f 0900 	mov.w	r9, #0
 80096e8:	f104 0a1a 	add.w	sl, r4, #26
 80096ec:	9b07      	ldr	r3, [sp, #28]
 80096ee:	425b      	negs	r3, r3
 80096f0:	454b      	cmp	r3, r9
 80096f2:	dc01      	bgt.n	80096f8 <_printf_float+0x288>
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	e795      	b.n	8009624 <_printf_float+0x1b4>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4652      	mov	r2, sl
 80096fc:	4631      	mov	r1, r6
 80096fe:	4628      	mov	r0, r5
 8009700:	47b8      	blx	r7
 8009702:	3001      	adds	r0, #1
 8009704:	f43f af00 	beq.w	8009508 <_printf_float+0x98>
 8009708:	f109 0901 	add.w	r9, r9, #1
 800970c:	e7ee      	b.n	80096ec <_printf_float+0x27c>
 800970e:	bf00      	nop
 8009710:	ffffffff 	.word	0xffffffff
 8009714:	7fefffff 	.word	0x7fefffff
 8009718:	0800eaf4 	.word	0x0800eaf4
 800971c:	0800eaf8 	.word	0x0800eaf8
 8009720:	0800eafc 	.word	0x0800eafc
 8009724:	0800eb00 	.word	0x0800eb00
 8009728:	0800ee90 	.word	0x0800ee90
 800972c:	9a08      	ldr	r2, [sp, #32]
 800972e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009730:	429a      	cmp	r2, r3
 8009732:	bfa8      	it	ge
 8009734:	461a      	movge	r2, r3
 8009736:	2a00      	cmp	r2, #0
 8009738:	4691      	mov	r9, r2
 800973a:	dc38      	bgt.n	80097ae <_printf_float+0x33e>
 800973c:	2300      	movs	r3, #0
 800973e:	9305      	str	r3, [sp, #20]
 8009740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009744:	f104 021a 	add.w	r2, r4, #26
 8009748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800974a:	9905      	ldr	r1, [sp, #20]
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	eba3 0309 	sub.w	r3, r3, r9
 8009752:	428b      	cmp	r3, r1
 8009754:	dc33      	bgt.n	80097be <_printf_float+0x34e>
 8009756:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800975a:	429a      	cmp	r2, r3
 800975c:	db3c      	blt.n	80097d8 <_printf_float+0x368>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	07da      	lsls	r2, r3, #31
 8009762:	d439      	bmi.n	80097d8 <_printf_float+0x368>
 8009764:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009768:	eba2 0903 	sub.w	r9, r2, r3
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	4591      	cmp	r9, r2
 8009772:	bfa8      	it	ge
 8009774:	4691      	movge	r9, r2
 8009776:	f1b9 0f00 	cmp.w	r9, #0
 800977a:	dc35      	bgt.n	80097e8 <_printf_float+0x378>
 800977c:	f04f 0800 	mov.w	r8, #0
 8009780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009784:	f104 0a1a 	add.w	sl, r4, #26
 8009788:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	eba3 0309 	sub.w	r3, r3, r9
 8009792:	4543      	cmp	r3, r8
 8009794:	f77f af77 	ble.w	8009686 <_printf_float+0x216>
 8009798:	2301      	movs	r3, #1
 800979a:	4652      	mov	r2, sl
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f aeb0 	beq.w	8009508 <_printf_float+0x98>
 80097a8:	f108 0801 	add.w	r8, r8, #1
 80097ac:	e7ec      	b.n	8009788 <_printf_float+0x318>
 80097ae:	4613      	mov	r3, r2
 80097b0:	4631      	mov	r1, r6
 80097b2:	4642      	mov	r2, r8
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	d1bf      	bne.n	800973c <_printf_float+0x2cc>
 80097bc:	e6a4      	b.n	8009508 <_printf_float+0x98>
 80097be:	2301      	movs	r3, #1
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	9204      	str	r2, [sp, #16]
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	f43f ae9d 	beq.w	8009508 <_printf_float+0x98>
 80097ce:	9b05      	ldr	r3, [sp, #20]
 80097d0:	9a04      	ldr	r2, [sp, #16]
 80097d2:	3301      	adds	r3, #1
 80097d4:	9305      	str	r3, [sp, #20]
 80097d6:	e7b7      	b.n	8009748 <_printf_float+0x2d8>
 80097d8:	4653      	mov	r3, sl
 80097da:	465a      	mov	r2, fp
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	d1be      	bne.n	8009764 <_printf_float+0x2f4>
 80097e6:	e68f      	b.n	8009508 <_printf_float+0x98>
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	464b      	mov	r3, r9
 80097ec:	4442      	add	r2, r8
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	d1c1      	bne.n	800977c <_printf_float+0x30c>
 80097f8:	e686      	b.n	8009508 <_printf_float+0x98>
 80097fa:	9a08      	ldr	r2, [sp, #32]
 80097fc:	2a01      	cmp	r2, #1
 80097fe:	dc01      	bgt.n	8009804 <_printf_float+0x394>
 8009800:	07db      	lsls	r3, r3, #31
 8009802:	d537      	bpl.n	8009874 <_printf_float+0x404>
 8009804:	2301      	movs	r3, #1
 8009806:	4642      	mov	r2, r8
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f ae7a 	beq.w	8009508 <_printf_float+0x98>
 8009814:	4653      	mov	r3, sl
 8009816:	465a      	mov	r2, fp
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f ae72 	beq.w	8009508 <_printf_float+0x98>
 8009824:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009828:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	d01a      	beq.n	800986a <_printf_float+0x3fa>
 8009834:	3b01      	subs	r3, #1
 8009836:	f108 0201 	add.w	r2, r8, #1
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	d10e      	bne.n	8009862 <_printf_float+0x3f2>
 8009844:	e660      	b.n	8009508 <_printf_float+0x98>
 8009846:	2301      	movs	r3, #1
 8009848:	464a      	mov	r2, r9
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	f43f ae59 	beq.w	8009508 <_printf_float+0x98>
 8009856:	f108 0801 	add.w	r8, r8, #1
 800985a:	9b08      	ldr	r3, [sp, #32]
 800985c:	3b01      	subs	r3, #1
 800985e:	4543      	cmp	r3, r8
 8009860:	dcf1      	bgt.n	8009846 <_printf_float+0x3d6>
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009868:	e6dd      	b.n	8009626 <_printf_float+0x1b6>
 800986a:	f04f 0800 	mov.w	r8, #0
 800986e:	f104 091a 	add.w	r9, r4, #26
 8009872:	e7f2      	b.n	800985a <_printf_float+0x3ea>
 8009874:	2301      	movs	r3, #1
 8009876:	4642      	mov	r2, r8
 8009878:	e7df      	b.n	800983a <_printf_float+0x3ca>
 800987a:	2301      	movs	r3, #1
 800987c:	464a      	mov	r2, r9
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f ae3f 	beq.w	8009508 <_printf_float+0x98>
 800988a:	f108 0801 	add.w	r8, r8, #1
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009892:	1a5b      	subs	r3, r3, r1
 8009894:	4543      	cmp	r3, r8
 8009896:	dcf0      	bgt.n	800987a <_printf_float+0x40a>
 8009898:	e6f9      	b.n	800968e <_printf_float+0x21e>
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	f104 0919 	add.w	r9, r4, #25
 80098a2:	e7f4      	b.n	800988e <_printf_float+0x41e>

080098a4 <_printf_common>:
 80098a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	4616      	mov	r6, r2
 80098aa:	4699      	mov	r9, r3
 80098ac:	688a      	ldr	r2, [r1, #8]
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	bfb8      	it	lt
 80098b8:	4613      	movlt	r3, r2
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098c0:	4607      	mov	r7, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	b10a      	cbz	r2, 80098ca <_printf_common+0x26>
 80098c6:	3301      	adds	r3, #1
 80098c8:	6033      	str	r3, [r6, #0]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	0699      	lsls	r1, r3, #26
 80098ce:	bf42      	ittt	mi
 80098d0:	6833      	ldrmi	r3, [r6, #0]
 80098d2:	3302      	addmi	r3, #2
 80098d4:	6033      	strmi	r3, [r6, #0]
 80098d6:	6825      	ldr	r5, [r4, #0]
 80098d8:	f015 0506 	ands.w	r5, r5, #6
 80098dc:	d106      	bne.n	80098ec <_printf_common+0x48>
 80098de:	f104 0a19 	add.w	sl, r4, #25
 80098e2:	68e3      	ldr	r3, [r4, #12]
 80098e4:	6832      	ldr	r2, [r6, #0]
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	42ab      	cmp	r3, r5
 80098ea:	dc26      	bgt.n	800993a <_printf_common+0x96>
 80098ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098f0:	1e13      	subs	r3, r2, #0
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	bf18      	it	ne
 80098f6:	2301      	movne	r3, #1
 80098f8:	0692      	lsls	r2, r2, #26
 80098fa:	d42b      	bmi.n	8009954 <_printf_common+0xb0>
 80098fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009900:	4649      	mov	r1, r9
 8009902:	4638      	mov	r0, r7
 8009904:	47c0      	blx	r8
 8009906:	3001      	adds	r0, #1
 8009908:	d01e      	beq.n	8009948 <_printf_common+0xa4>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	f003 0306 	and.w	r3, r3, #6
 8009912:	2b04      	cmp	r3, #4
 8009914:	bf02      	ittt	eq
 8009916:	68e5      	ldreq	r5, [r4, #12]
 8009918:	6833      	ldreq	r3, [r6, #0]
 800991a:	1aed      	subeq	r5, r5, r3
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	bf0c      	ite	eq
 8009920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009924:	2500      	movne	r5, #0
 8009926:	4293      	cmp	r3, r2
 8009928:	bfc4      	itt	gt
 800992a:	1a9b      	subgt	r3, r3, r2
 800992c:	18ed      	addgt	r5, r5, r3
 800992e:	2600      	movs	r6, #0
 8009930:	341a      	adds	r4, #26
 8009932:	42b5      	cmp	r5, r6
 8009934:	d11a      	bne.n	800996c <_printf_common+0xc8>
 8009936:	2000      	movs	r0, #0
 8009938:	e008      	b.n	800994c <_printf_common+0xa8>
 800993a:	2301      	movs	r3, #1
 800993c:	4652      	mov	r2, sl
 800993e:	4649      	mov	r1, r9
 8009940:	4638      	mov	r0, r7
 8009942:	47c0      	blx	r8
 8009944:	3001      	adds	r0, #1
 8009946:	d103      	bne.n	8009950 <_printf_common+0xac>
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	3501      	adds	r5, #1
 8009952:	e7c6      	b.n	80098e2 <_printf_common+0x3e>
 8009954:	18e1      	adds	r1, r4, r3
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	2030      	movs	r0, #48	; 0x30
 800995a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800995e:	4422      	add	r2, r4
 8009960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009968:	3302      	adds	r3, #2
 800996a:	e7c7      	b.n	80098fc <_printf_common+0x58>
 800996c:	2301      	movs	r3, #1
 800996e:	4622      	mov	r2, r4
 8009970:	4649      	mov	r1, r9
 8009972:	4638      	mov	r0, r7
 8009974:	47c0      	blx	r8
 8009976:	3001      	adds	r0, #1
 8009978:	d0e6      	beq.n	8009948 <_printf_common+0xa4>
 800997a:	3601      	adds	r6, #1
 800997c:	e7d9      	b.n	8009932 <_printf_common+0x8e>
	...

08009980 <_printf_i>:
 8009980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	7e0f      	ldrb	r7, [r1, #24]
 8009986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009988:	2f78      	cmp	r7, #120	; 0x78
 800998a:	4691      	mov	r9, r2
 800998c:	4680      	mov	r8, r0
 800998e:	460c      	mov	r4, r1
 8009990:	469a      	mov	sl, r3
 8009992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009996:	d807      	bhi.n	80099a8 <_printf_i+0x28>
 8009998:	2f62      	cmp	r7, #98	; 0x62
 800999a:	d80a      	bhi.n	80099b2 <_printf_i+0x32>
 800999c:	2f00      	cmp	r7, #0
 800999e:	f000 80d4 	beq.w	8009b4a <_printf_i+0x1ca>
 80099a2:	2f58      	cmp	r7, #88	; 0x58
 80099a4:	f000 80c0 	beq.w	8009b28 <_printf_i+0x1a8>
 80099a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099b0:	e03a      	b.n	8009a28 <_printf_i+0xa8>
 80099b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099b6:	2b15      	cmp	r3, #21
 80099b8:	d8f6      	bhi.n	80099a8 <_printf_i+0x28>
 80099ba:	a101      	add	r1, pc, #4	; (adr r1, 80099c0 <_printf_i+0x40>)
 80099bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c0:	08009a19 	.word	0x08009a19
 80099c4:	08009a2d 	.word	0x08009a2d
 80099c8:	080099a9 	.word	0x080099a9
 80099cc:	080099a9 	.word	0x080099a9
 80099d0:	080099a9 	.word	0x080099a9
 80099d4:	080099a9 	.word	0x080099a9
 80099d8:	08009a2d 	.word	0x08009a2d
 80099dc:	080099a9 	.word	0x080099a9
 80099e0:	080099a9 	.word	0x080099a9
 80099e4:	080099a9 	.word	0x080099a9
 80099e8:	080099a9 	.word	0x080099a9
 80099ec:	08009b31 	.word	0x08009b31
 80099f0:	08009a59 	.word	0x08009a59
 80099f4:	08009aeb 	.word	0x08009aeb
 80099f8:	080099a9 	.word	0x080099a9
 80099fc:	080099a9 	.word	0x080099a9
 8009a00:	08009b53 	.word	0x08009b53
 8009a04:	080099a9 	.word	0x080099a9
 8009a08:	08009a59 	.word	0x08009a59
 8009a0c:	080099a9 	.word	0x080099a9
 8009a10:	080099a9 	.word	0x080099a9
 8009a14:	08009af3 	.word	0x08009af3
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	602a      	str	r2, [r5, #0]
 8009a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e09f      	b.n	8009b6c <_printf_i+0x1ec>
 8009a2c:	6820      	ldr	r0, [r4, #0]
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	0607      	lsls	r7, r0, #24
 8009a32:	f103 0104 	add.w	r1, r3, #4
 8009a36:	6029      	str	r1, [r5, #0]
 8009a38:	d501      	bpl.n	8009a3e <_printf_i+0xbe>
 8009a3a:	681e      	ldr	r6, [r3, #0]
 8009a3c:	e003      	b.n	8009a46 <_printf_i+0xc6>
 8009a3e:	0646      	lsls	r6, r0, #25
 8009a40:	d5fb      	bpl.n	8009a3a <_printf_i+0xba>
 8009a42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	da03      	bge.n	8009a52 <_printf_i+0xd2>
 8009a4a:	232d      	movs	r3, #45	; 0x2d
 8009a4c:	4276      	negs	r6, r6
 8009a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a52:	485a      	ldr	r0, [pc, #360]	; (8009bbc <_printf_i+0x23c>)
 8009a54:	230a      	movs	r3, #10
 8009a56:	e012      	b.n	8009a7e <_printf_i+0xfe>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	6820      	ldr	r0, [r4, #0]
 8009a5c:	1d19      	adds	r1, r3, #4
 8009a5e:	6029      	str	r1, [r5, #0]
 8009a60:	0605      	lsls	r5, r0, #24
 8009a62:	d501      	bpl.n	8009a68 <_printf_i+0xe8>
 8009a64:	681e      	ldr	r6, [r3, #0]
 8009a66:	e002      	b.n	8009a6e <_printf_i+0xee>
 8009a68:	0641      	lsls	r1, r0, #25
 8009a6a:	d5fb      	bpl.n	8009a64 <_printf_i+0xe4>
 8009a6c:	881e      	ldrh	r6, [r3, #0]
 8009a6e:	4853      	ldr	r0, [pc, #332]	; (8009bbc <_printf_i+0x23c>)
 8009a70:	2f6f      	cmp	r7, #111	; 0x6f
 8009a72:	bf0c      	ite	eq
 8009a74:	2308      	moveq	r3, #8
 8009a76:	230a      	movne	r3, #10
 8009a78:	2100      	movs	r1, #0
 8009a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a7e:	6865      	ldr	r5, [r4, #4]
 8009a80:	60a5      	str	r5, [r4, #8]
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	bfa2      	ittt	ge
 8009a86:	6821      	ldrge	r1, [r4, #0]
 8009a88:	f021 0104 	bicge.w	r1, r1, #4
 8009a8c:	6021      	strge	r1, [r4, #0]
 8009a8e:	b90e      	cbnz	r6, 8009a94 <_printf_i+0x114>
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	d04b      	beq.n	8009b2c <_printf_i+0x1ac>
 8009a94:	4615      	mov	r5, r2
 8009a96:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a9a:	fb03 6711 	mls	r7, r3, r1, r6
 8009a9e:	5dc7      	ldrb	r7, [r0, r7]
 8009aa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009aa4:	4637      	mov	r7, r6
 8009aa6:	42bb      	cmp	r3, r7
 8009aa8:	460e      	mov	r6, r1
 8009aaa:	d9f4      	bls.n	8009a96 <_printf_i+0x116>
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d10b      	bne.n	8009ac8 <_printf_i+0x148>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	07de      	lsls	r6, r3, #31
 8009ab4:	d508      	bpl.n	8009ac8 <_printf_i+0x148>
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	4299      	cmp	r1, r3
 8009abc:	bfde      	ittt	le
 8009abe:	2330      	movle	r3, #48	; 0x30
 8009ac0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ac4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ac8:	1b52      	subs	r2, r2, r5
 8009aca:	6122      	str	r2, [r4, #16]
 8009acc:	f8cd a000 	str.w	sl, [sp]
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	aa03      	add	r2, sp, #12
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	f7ff fee4 	bl	80098a4 <_printf_common>
 8009adc:	3001      	adds	r0, #1
 8009ade:	d14a      	bne.n	8009b76 <_printf_i+0x1f6>
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	b004      	add	sp, #16
 8009ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	f043 0320 	orr.w	r3, r3, #32
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	4833      	ldr	r0, [pc, #204]	; (8009bc0 <_printf_i+0x240>)
 8009af4:	2778      	movs	r7, #120	; 0x78
 8009af6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	6829      	ldr	r1, [r5, #0]
 8009afe:	061f      	lsls	r7, r3, #24
 8009b00:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b04:	d402      	bmi.n	8009b0c <_printf_i+0x18c>
 8009b06:	065f      	lsls	r7, r3, #25
 8009b08:	bf48      	it	mi
 8009b0a:	b2b6      	uxthmi	r6, r6
 8009b0c:	07df      	lsls	r7, r3, #31
 8009b0e:	bf48      	it	mi
 8009b10:	f043 0320 	orrmi.w	r3, r3, #32
 8009b14:	6029      	str	r1, [r5, #0]
 8009b16:	bf48      	it	mi
 8009b18:	6023      	strmi	r3, [r4, #0]
 8009b1a:	b91e      	cbnz	r6, 8009b24 <_printf_i+0x1a4>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	f023 0320 	bic.w	r3, r3, #32
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	2310      	movs	r3, #16
 8009b26:	e7a7      	b.n	8009a78 <_printf_i+0xf8>
 8009b28:	4824      	ldr	r0, [pc, #144]	; (8009bbc <_printf_i+0x23c>)
 8009b2a:	e7e4      	b.n	8009af6 <_printf_i+0x176>
 8009b2c:	4615      	mov	r5, r2
 8009b2e:	e7bd      	b.n	8009aac <_printf_i+0x12c>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	6826      	ldr	r6, [r4, #0]
 8009b34:	6961      	ldr	r1, [r4, #20]
 8009b36:	1d18      	adds	r0, r3, #4
 8009b38:	6028      	str	r0, [r5, #0]
 8009b3a:	0635      	lsls	r5, r6, #24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0x1c4>
 8009b40:	6019      	str	r1, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <_printf_i+0x1ca>
 8009b44:	0670      	lsls	r0, r6, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0x1c0>
 8009b48:	8019      	strh	r1, [r3, #0]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	4615      	mov	r5, r2
 8009b50:	e7bc      	b.n	8009acc <_printf_i+0x14c>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	602a      	str	r2, [r5, #0]
 8009b58:	681d      	ldr	r5, [r3, #0]
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f7f6 fb6e 	bl	8000240 <memchr>
 8009b64:	b108      	cbz	r0, 8009b6a <_printf_i+0x1ea>
 8009b66:	1b40      	subs	r0, r0, r5
 8009b68:	6060      	str	r0, [r4, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b74:	e7aa      	b.n	8009acc <_printf_i+0x14c>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	47d0      	blx	sl
 8009b80:	3001      	adds	r0, #1
 8009b82:	d0ad      	beq.n	8009ae0 <_printf_i+0x160>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	d413      	bmi.n	8009bb2 <_printf_i+0x232>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bfb8      	it	lt
 8009b92:	4618      	movlt	r0, r3
 8009b94:	e7a6      	b.n	8009ae4 <_printf_i+0x164>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d09d      	beq.n	8009ae0 <_printf_i+0x160>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	9903      	ldr	r1, [sp, #12]
 8009baa:	1a5b      	subs	r3, r3, r1
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dcf2      	bgt.n	8009b96 <_printf_i+0x216>
 8009bb0:	e7eb      	b.n	8009b8a <_printf_i+0x20a>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	f104 0619 	add.w	r6, r4, #25
 8009bb8:	e7f5      	b.n	8009ba6 <_printf_i+0x226>
 8009bba:	bf00      	nop
 8009bbc:	0800eb04 	.word	0x0800eb04
 8009bc0:	0800eb15 	.word	0x0800eb15

08009bc4 <_scanf_float>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	b087      	sub	sp, #28
 8009bca:	4617      	mov	r7, r2
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	688b      	ldr	r3, [r1, #8]
 8009bd0:	1e5a      	subs	r2, r3, #1
 8009bd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bd6:	bf83      	ittte	hi
 8009bd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009bdc:	195b      	addhi	r3, r3, r5
 8009bde:	9302      	strhi	r3, [sp, #8]
 8009be0:	2300      	movls	r3, #0
 8009be2:	bf86      	itte	hi
 8009be4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009be8:	608b      	strhi	r3, [r1, #8]
 8009bea:	9302      	strls	r3, [sp, #8]
 8009bec:	680b      	ldr	r3, [r1, #0]
 8009bee:	468b      	mov	fp, r1
 8009bf0:	2500      	movs	r5, #0
 8009bf2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009bf6:	f84b 3b1c 	str.w	r3, [fp], #28
 8009bfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009bfe:	4680      	mov	r8, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	465e      	mov	r6, fp
 8009c04:	46aa      	mov	sl, r5
 8009c06:	46a9      	mov	r9, r5
 8009c08:	9501      	str	r5, [sp, #4]
 8009c0a:	68a2      	ldr	r2, [r4, #8]
 8009c0c:	b152      	cbz	r2, 8009c24 <_scanf_float+0x60>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b4e      	cmp	r3, #78	; 0x4e
 8009c14:	d864      	bhi.n	8009ce0 <_scanf_float+0x11c>
 8009c16:	2b40      	cmp	r3, #64	; 0x40
 8009c18:	d83c      	bhi.n	8009c94 <_scanf_float+0xd0>
 8009c1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009c1e:	b2c8      	uxtb	r0, r1
 8009c20:	280e      	cmp	r0, #14
 8009c22:	d93a      	bls.n	8009c9a <_scanf_float+0xd6>
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	d003      	beq.n	8009c32 <_scanf_float+0x6e>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c36:	f1ba 0f01 	cmp.w	sl, #1
 8009c3a:	f200 8113 	bhi.w	8009e64 <_scanf_float+0x2a0>
 8009c3e:	455e      	cmp	r6, fp
 8009c40:	f200 8105 	bhi.w	8009e4e <_scanf_float+0x28a>
 8009c44:	2501      	movs	r5, #1
 8009c46:	4628      	mov	r0, r5
 8009c48:	b007      	add	sp, #28
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009c52:	2a0d      	cmp	r2, #13
 8009c54:	d8e6      	bhi.n	8009c24 <_scanf_float+0x60>
 8009c56:	a101      	add	r1, pc, #4	; (adr r1, 8009c5c <_scanf_float+0x98>)
 8009c58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c5c:	08009d9b 	.word	0x08009d9b
 8009c60:	08009c25 	.word	0x08009c25
 8009c64:	08009c25 	.word	0x08009c25
 8009c68:	08009c25 	.word	0x08009c25
 8009c6c:	08009dfb 	.word	0x08009dfb
 8009c70:	08009dd3 	.word	0x08009dd3
 8009c74:	08009c25 	.word	0x08009c25
 8009c78:	08009c25 	.word	0x08009c25
 8009c7c:	08009da9 	.word	0x08009da9
 8009c80:	08009c25 	.word	0x08009c25
 8009c84:	08009c25 	.word	0x08009c25
 8009c88:	08009c25 	.word	0x08009c25
 8009c8c:	08009c25 	.word	0x08009c25
 8009c90:	08009d61 	.word	0x08009d61
 8009c94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009c98:	e7db      	b.n	8009c52 <_scanf_float+0x8e>
 8009c9a:	290e      	cmp	r1, #14
 8009c9c:	d8c2      	bhi.n	8009c24 <_scanf_float+0x60>
 8009c9e:	a001      	add	r0, pc, #4	; (adr r0, 8009ca4 <_scanf_float+0xe0>)
 8009ca0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ca4:	08009d53 	.word	0x08009d53
 8009ca8:	08009c25 	.word	0x08009c25
 8009cac:	08009d53 	.word	0x08009d53
 8009cb0:	08009de7 	.word	0x08009de7
 8009cb4:	08009c25 	.word	0x08009c25
 8009cb8:	08009d01 	.word	0x08009d01
 8009cbc:	08009d3d 	.word	0x08009d3d
 8009cc0:	08009d3d 	.word	0x08009d3d
 8009cc4:	08009d3d 	.word	0x08009d3d
 8009cc8:	08009d3d 	.word	0x08009d3d
 8009ccc:	08009d3d 	.word	0x08009d3d
 8009cd0:	08009d3d 	.word	0x08009d3d
 8009cd4:	08009d3d 	.word	0x08009d3d
 8009cd8:	08009d3d 	.word	0x08009d3d
 8009cdc:	08009d3d 	.word	0x08009d3d
 8009ce0:	2b6e      	cmp	r3, #110	; 0x6e
 8009ce2:	d809      	bhi.n	8009cf8 <_scanf_float+0x134>
 8009ce4:	2b60      	cmp	r3, #96	; 0x60
 8009ce6:	d8b2      	bhi.n	8009c4e <_scanf_float+0x8a>
 8009ce8:	2b54      	cmp	r3, #84	; 0x54
 8009cea:	d077      	beq.n	8009ddc <_scanf_float+0x218>
 8009cec:	2b59      	cmp	r3, #89	; 0x59
 8009cee:	d199      	bne.n	8009c24 <_scanf_float+0x60>
 8009cf0:	2d07      	cmp	r5, #7
 8009cf2:	d197      	bne.n	8009c24 <_scanf_float+0x60>
 8009cf4:	2508      	movs	r5, #8
 8009cf6:	e029      	b.n	8009d4c <_scanf_float+0x188>
 8009cf8:	2b74      	cmp	r3, #116	; 0x74
 8009cfa:	d06f      	beq.n	8009ddc <_scanf_float+0x218>
 8009cfc:	2b79      	cmp	r3, #121	; 0x79
 8009cfe:	e7f6      	b.n	8009cee <_scanf_float+0x12a>
 8009d00:	6821      	ldr	r1, [r4, #0]
 8009d02:	05c8      	lsls	r0, r1, #23
 8009d04:	d51a      	bpl.n	8009d3c <_scanf_float+0x178>
 8009d06:	9b02      	ldr	r3, [sp, #8]
 8009d08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d0c:	6021      	str	r1, [r4, #0]
 8009d0e:	f109 0901 	add.w	r9, r9, #1
 8009d12:	b11b      	cbz	r3, 8009d1c <_scanf_float+0x158>
 8009d14:	3b01      	subs	r3, #1
 8009d16:	3201      	adds	r2, #1
 8009d18:	9302      	str	r3, [sp, #8]
 8009d1a:	60a2      	str	r2, [r4, #8]
 8009d1c:	68a3      	ldr	r3, [r4, #8]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	60a3      	str	r3, [r4, #8]
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	3301      	adds	r3, #1
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	607b      	str	r3, [r7, #4]
 8009d30:	f340 8084 	ble.w	8009e3c <_scanf_float+0x278>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	3301      	adds	r3, #1
 8009d38:	603b      	str	r3, [r7, #0]
 8009d3a:	e766      	b.n	8009c0a <_scanf_float+0x46>
 8009d3c:	eb1a 0f05 	cmn.w	sl, r5
 8009d40:	f47f af70 	bne.w	8009c24 <_scanf_float+0x60>
 8009d44:	6822      	ldr	r2, [r4, #0]
 8009d46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009d4a:	6022      	str	r2, [r4, #0]
 8009d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d50:	e7e4      	b.n	8009d1c <_scanf_float+0x158>
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	0610      	lsls	r0, r2, #24
 8009d56:	f57f af65 	bpl.w	8009c24 <_scanf_float+0x60>
 8009d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d5e:	e7f4      	b.n	8009d4a <_scanf_float+0x186>
 8009d60:	f1ba 0f00 	cmp.w	sl, #0
 8009d64:	d10e      	bne.n	8009d84 <_scanf_float+0x1c0>
 8009d66:	f1b9 0f00 	cmp.w	r9, #0
 8009d6a:	d10e      	bne.n	8009d8a <_scanf_float+0x1c6>
 8009d6c:	6822      	ldr	r2, [r4, #0]
 8009d6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009d72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009d76:	d108      	bne.n	8009d8a <_scanf_float+0x1c6>
 8009d78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d7c:	6022      	str	r2, [r4, #0]
 8009d7e:	f04f 0a01 	mov.w	sl, #1
 8009d82:	e7e3      	b.n	8009d4c <_scanf_float+0x188>
 8009d84:	f1ba 0f02 	cmp.w	sl, #2
 8009d88:	d055      	beq.n	8009e36 <_scanf_float+0x272>
 8009d8a:	2d01      	cmp	r5, #1
 8009d8c:	d002      	beq.n	8009d94 <_scanf_float+0x1d0>
 8009d8e:	2d04      	cmp	r5, #4
 8009d90:	f47f af48 	bne.w	8009c24 <_scanf_float+0x60>
 8009d94:	3501      	adds	r5, #1
 8009d96:	b2ed      	uxtb	r5, r5
 8009d98:	e7d8      	b.n	8009d4c <_scanf_float+0x188>
 8009d9a:	f1ba 0f01 	cmp.w	sl, #1
 8009d9e:	f47f af41 	bne.w	8009c24 <_scanf_float+0x60>
 8009da2:	f04f 0a02 	mov.w	sl, #2
 8009da6:	e7d1      	b.n	8009d4c <_scanf_float+0x188>
 8009da8:	b97d      	cbnz	r5, 8009dca <_scanf_float+0x206>
 8009daa:	f1b9 0f00 	cmp.w	r9, #0
 8009dae:	f47f af3c 	bne.w	8009c2a <_scanf_float+0x66>
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009db8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009dbc:	f47f af39 	bne.w	8009c32 <_scanf_float+0x6e>
 8009dc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009dc4:	6022      	str	r2, [r4, #0]
 8009dc6:	2501      	movs	r5, #1
 8009dc8:	e7c0      	b.n	8009d4c <_scanf_float+0x188>
 8009dca:	2d03      	cmp	r5, #3
 8009dcc:	d0e2      	beq.n	8009d94 <_scanf_float+0x1d0>
 8009dce:	2d05      	cmp	r5, #5
 8009dd0:	e7de      	b.n	8009d90 <_scanf_float+0x1cc>
 8009dd2:	2d02      	cmp	r5, #2
 8009dd4:	f47f af26 	bne.w	8009c24 <_scanf_float+0x60>
 8009dd8:	2503      	movs	r5, #3
 8009dda:	e7b7      	b.n	8009d4c <_scanf_float+0x188>
 8009ddc:	2d06      	cmp	r5, #6
 8009dde:	f47f af21 	bne.w	8009c24 <_scanf_float+0x60>
 8009de2:	2507      	movs	r5, #7
 8009de4:	e7b2      	b.n	8009d4c <_scanf_float+0x188>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	0591      	lsls	r1, r2, #22
 8009dea:	f57f af1b 	bpl.w	8009c24 <_scanf_float+0x60>
 8009dee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009df8:	e7a8      	b.n	8009d4c <_scanf_float+0x188>
 8009dfa:	6822      	ldr	r2, [r4, #0]
 8009dfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009e00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009e04:	d006      	beq.n	8009e14 <_scanf_float+0x250>
 8009e06:	0550      	lsls	r0, r2, #21
 8009e08:	f57f af0c 	bpl.w	8009c24 <_scanf_float+0x60>
 8009e0c:	f1b9 0f00 	cmp.w	r9, #0
 8009e10:	f43f af0f 	beq.w	8009c32 <_scanf_float+0x6e>
 8009e14:	0591      	lsls	r1, r2, #22
 8009e16:	bf58      	it	pl
 8009e18:	9901      	ldrpl	r1, [sp, #4]
 8009e1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e1e:	bf58      	it	pl
 8009e20:	eba9 0101 	subpl.w	r1, r9, r1
 8009e24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009e28:	bf58      	it	pl
 8009e2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e2e:	6022      	str	r2, [r4, #0]
 8009e30:	f04f 0900 	mov.w	r9, #0
 8009e34:	e78a      	b.n	8009d4c <_scanf_float+0x188>
 8009e36:	f04f 0a03 	mov.w	sl, #3
 8009e3a:	e787      	b.n	8009d4c <_scanf_float+0x188>
 8009e3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e40:	4639      	mov	r1, r7
 8009e42:	4640      	mov	r0, r8
 8009e44:	4798      	blx	r3
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f aedf 	beq.w	8009c0a <_scanf_float+0x46>
 8009e4c:	e6ea      	b.n	8009c24 <_scanf_float+0x60>
 8009e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e56:	463a      	mov	r2, r7
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4798      	blx	r3
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	e6ec      	b.n	8009c3e <_scanf_float+0x7a>
 8009e64:	1e6b      	subs	r3, r5, #1
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	d825      	bhi.n	8009eb6 <_scanf_float+0x2f2>
 8009e6a:	2d02      	cmp	r5, #2
 8009e6c:	d836      	bhi.n	8009edc <_scanf_float+0x318>
 8009e6e:	455e      	cmp	r6, fp
 8009e70:	f67f aee8 	bls.w	8009c44 <_scanf_float+0x80>
 8009e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e7c:	463a      	mov	r2, r7
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4798      	blx	r3
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	e7f1      	b.n	8009e6e <_scanf_float+0x2aa>
 8009e8a:	9802      	ldr	r0, [sp, #8]
 8009e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	463a      	mov	r2, r7
 8009e98:	4640      	mov	r0, r8
 8009e9a:	4798      	blx	r3
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	6123      	str	r3, [r4, #16]
 8009ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ea6:	fa5f fa8a 	uxtb.w	sl, sl
 8009eaa:	f1ba 0f02 	cmp.w	sl, #2
 8009eae:	d1ec      	bne.n	8009e8a <_scanf_float+0x2c6>
 8009eb0:	3d03      	subs	r5, #3
 8009eb2:	b2ed      	uxtb	r5, r5
 8009eb4:	1b76      	subs	r6, r6, r5
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	05da      	lsls	r2, r3, #23
 8009eba:	d52f      	bpl.n	8009f1c <_scanf_float+0x358>
 8009ebc:	055b      	lsls	r3, r3, #21
 8009ebe:	d510      	bpl.n	8009ee2 <_scanf_float+0x31e>
 8009ec0:	455e      	cmp	r6, fp
 8009ec2:	f67f aebf 	bls.w	8009c44 <_scanf_float+0x80>
 8009ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ece:	463a      	mov	r2, r7
 8009ed0:	4640      	mov	r0, r8
 8009ed2:	4798      	blx	r3
 8009ed4:	6923      	ldr	r3, [r4, #16]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	6123      	str	r3, [r4, #16]
 8009eda:	e7f1      	b.n	8009ec0 <_scanf_float+0x2fc>
 8009edc:	46aa      	mov	sl, r5
 8009ede:	9602      	str	r6, [sp, #8]
 8009ee0:	e7df      	b.n	8009ea2 <_scanf_float+0x2de>
 8009ee2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	2965      	cmp	r1, #101	; 0x65
 8009eea:	f103 33ff 	add.w	r3, r3, #4294967295
 8009eee:	f106 35ff 	add.w	r5, r6, #4294967295
 8009ef2:	6123      	str	r3, [r4, #16]
 8009ef4:	d00c      	beq.n	8009f10 <_scanf_float+0x34c>
 8009ef6:	2945      	cmp	r1, #69	; 0x45
 8009ef8:	d00a      	beq.n	8009f10 <_scanf_float+0x34c>
 8009efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009efe:	463a      	mov	r2, r7
 8009f00:	4640      	mov	r0, r8
 8009f02:	4798      	blx	r3
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	1eb5      	subs	r5, r6, #2
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f14:	463a      	mov	r2, r7
 8009f16:	4640      	mov	r0, r8
 8009f18:	4798      	blx	r3
 8009f1a:	462e      	mov	r6, r5
 8009f1c:	6825      	ldr	r5, [r4, #0]
 8009f1e:	f015 0510 	ands.w	r5, r5, #16
 8009f22:	d14d      	bne.n	8009fc0 <_scanf_float+0x3fc>
 8009f24:	7035      	strb	r5, [r6, #0]
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f30:	d11a      	bne.n	8009f68 <_scanf_float+0x3a4>
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	454b      	cmp	r3, r9
 8009f36:	eba3 0209 	sub.w	r2, r3, r9
 8009f3a:	d122      	bne.n	8009f82 <_scanf_float+0x3be>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4659      	mov	r1, fp
 8009f40:	4640      	mov	r0, r8
 8009f42:	f002 fbcb 	bl	800c6dc <_strtod_r>
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	6821      	ldr	r1, [r4, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f011 0f02 	tst.w	r1, #2
 8009f50:	f103 0204 	add.w	r2, r3, #4
 8009f54:	d020      	beq.n	8009f98 <_scanf_float+0x3d4>
 8009f56:	9903      	ldr	r1, [sp, #12]
 8009f58:	600a      	str	r2, [r1, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	ed83 0b00 	vstr	d0, [r3]
 8009f60:	68e3      	ldr	r3, [r4, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60e3      	str	r3, [r4, #12]
 8009f66:	e66e      	b.n	8009c46 <_scanf_float+0x82>
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0e6      	beq.n	8009f3c <_scanf_float+0x378>
 8009f6e:	9905      	ldr	r1, [sp, #20]
 8009f70:	230a      	movs	r3, #10
 8009f72:	462a      	mov	r2, r5
 8009f74:	3101      	adds	r1, #1
 8009f76:	4640      	mov	r0, r8
 8009f78:	f002 fc38 	bl	800c7ec <_strtol_r>
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	9e05      	ldr	r6, [sp, #20]
 8009f80:	1ac2      	subs	r2, r0, r3
 8009f82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f86:	429e      	cmp	r6, r3
 8009f88:	bf28      	it	cs
 8009f8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009f8e:	490d      	ldr	r1, [pc, #52]	; (8009fc4 <_scanf_float+0x400>)
 8009f90:	4630      	mov	r0, r6
 8009f92:	f000 f911 	bl	800a1b8 <siprintf>
 8009f96:	e7d1      	b.n	8009f3c <_scanf_float+0x378>
 8009f98:	f011 0f04 	tst.w	r1, #4
 8009f9c:	9903      	ldr	r1, [sp, #12]
 8009f9e:	600a      	str	r2, [r1, #0]
 8009fa0:	d1db      	bne.n	8009f5a <_scanf_float+0x396>
 8009fa2:	eeb4 0b40 	vcmp.f64	d0, d0
 8009fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009faa:	681e      	ldr	r6, [r3, #0]
 8009fac:	d705      	bvc.n	8009fba <_scanf_float+0x3f6>
 8009fae:	4806      	ldr	r0, [pc, #24]	; (8009fc8 <_scanf_float+0x404>)
 8009fb0:	f000 fa22 	bl	800a3f8 <nanf>
 8009fb4:	ed86 0a00 	vstr	s0, [r6]
 8009fb8:	e7d2      	b.n	8009f60 <_scanf_float+0x39c>
 8009fba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009fbe:	e7f9      	b.n	8009fb4 <_scanf_float+0x3f0>
 8009fc0:	2500      	movs	r5, #0
 8009fc2:	e640      	b.n	8009c46 <_scanf_float+0x82>
 8009fc4:	0800eb26 	.word	0x0800eb26
 8009fc8:	0800eed8 	.word	0x0800eed8

08009fcc <std>:
 8009fcc:	2300      	movs	r3, #0
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fda:	6083      	str	r3, [r0, #8]
 8009fdc:	8181      	strh	r1, [r0, #12]
 8009fde:	6643      	str	r3, [r0, #100]	; 0x64
 8009fe0:	81c2      	strh	r2, [r0, #14]
 8009fe2:	6183      	str	r3, [r0, #24]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	305c      	adds	r0, #92	; 0x5c
 8009fea:	f000 f976 	bl	800a2da <memset>
 8009fee:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <std+0x58>)
 8009ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <std+0x5c>)
 8009ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <std+0x60>)
 8009ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <std+0x64>)
 8009ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <std+0x68>)
 800a000:	6224      	str	r4, [r4, #32]
 800a002:	429c      	cmp	r4, r3
 800a004:	d006      	beq.n	800a014 <std+0x48>
 800a006:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a00a:	4294      	cmp	r4, r2
 800a00c:	d002      	beq.n	800a014 <std+0x48>
 800a00e:	33d0      	adds	r3, #208	; 0xd0
 800a010:	429c      	cmp	r4, r3
 800a012:	d105      	bne.n	800a020 <std+0x54>
 800a014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a01c:	f000 b9da 	b.w	800a3d4 <__retarget_lock_init_recursive>
 800a020:	bd10      	pop	{r4, pc}
 800a022:	bf00      	nop
 800a024:	0800a251 	.word	0x0800a251
 800a028:	0800a277 	.word	0x0800a277
 800a02c:	0800a2af 	.word	0x0800a2af
 800a030:	0800a2d3 	.word	0x0800a2d3
 800a034:	200010b0 	.word	0x200010b0

0800a038 <stdio_exit_handler>:
 800a038:	4a02      	ldr	r2, [pc, #8]	; (800a044 <stdio_exit_handler+0xc>)
 800a03a:	4903      	ldr	r1, [pc, #12]	; (800a048 <stdio_exit_handler+0x10>)
 800a03c:	4803      	ldr	r0, [pc, #12]	; (800a04c <stdio_exit_handler+0x14>)
 800a03e:	f000 b869 	b.w	800a114 <_fwalk_sglue>
 800a042:	bf00      	nop
 800a044:	20000020 	.word	0x20000020
 800a048:	0800d1ed 	.word	0x0800d1ed
 800a04c:	2000002c 	.word	0x2000002c

0800a050 <cleanup_stdio>:
 800a050:	6841      	ldr	r1, [r0, #4]
 800a052:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <cleanup_stdio+0x34>)
 800a054:	4299      	cmp	r1, r3
 800a056:	b510      	push	{r4, lr}
 800a058:	4604      	mov	r4, r0
 800a05a:	d001      	beq.n	800a060 <cleanup_stdio+0x10>
 800a05c:	f003 f8c6 	bl	800d1ec <_fflush_r>
 800a060:	68a1      	ldr	r1, [r4, #8]
 800a062:	4b09      	ldr	r3, [pc, #36]	; (800a088 <cleanup_stdio+0x38>)
 800a064:	4299      	cmp	r1, r3
 800a066:	d002      	beq.n	800a06e <cleanup_stdio+0x1e>
 800a068:	4620      	mov	r0, r4
 800a06a:	f003 f8bf 	bl	800d1ec <_fflush_r>
 800a06e:	68e1      	ldr	r1, [r4, #12]
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <cleanup_stdio+0x3c>)
 800a072:	4299      	cmp	r1, r3
 800a074:	d004      	beq.n	800a080 <cleanup_stdio+0x30>
 800a076:	4620      	mov	r0, r4
 800a078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a07c:	f003 b8b6 	b.w	800d1ec <_fflush_r>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	bf00      	nop
 800a084:	200010b0 	.word	0x200010b0
 800a088:	20001118 	.word	0x20001118
 800a08c:	20001180 	.word	0x20001180

0800a090 <global_stdio_init.part.0>:
 800a090:	b510      	push	{r4, lr}
 800a092:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <global_stdio_init.part.0+0x30>)
 800a094:	4c0b      	ldr	r4, [pc, #44]	; (800a0c4 <global_stdio_init.part.0+0x34>)
 800a096:	4a0c      	ldr	r2, [pc, #48]	; (800a0c8 <global_stdio_init.part.0+0x38>)
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	4620      	mov	r0, r4
 800a09c:	2200      	movs	r2, #0
 800a09e:	2104      	movs	r1, #4
 800a0a0:	f7ff ff94 	bl	8009fcc <std>
 800a0a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	2109      	movs	r1, #9
 800a0ac:	f7ff ff8e 	bl	8009fcc <std>
 800a0b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ba:	2112      	movs	r1, #18
 800a0bc:	f7ff bf86 	b.w	8009fcc <std>
 800a0c0:	200011e8 	.word	0x200011e8
 800a0c4:	200010b0 	.word	0x200010b0
 800a0c8:	0800a039 	.word	0x0800a039

0800a0cc <__sfp_lock_acquire>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sfp_lock_acquire+0x8>)
 800a0ce:	f000 b982 	b.w	800a3d6 <__retarget_lock_acquire_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	200011f1 	.word	0x200011f1

0800a0d8 <__sfp_lock_release>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	; (800a0e0 <__sfp_lock_release+0x8>)
 800a0da:	f000 b97d 	b.w	800a3d8 <__retarget_lock_release_recursive>
 800a0de:	bf00      	nop
 800a0e0:	200011f1 	.word	0x200011f1

0800a0e4 <__sinit>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	f7ff fff0 	bl	800a0cc <__sfp_lock_acquire>
 800a0ec:	6a23      	ldr	r3, [r4, #32]
 800a0ee:	b11b      	cbz	r3, 800a0f8 <__sinit+0x14>
 800a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f4:	f7ff bff0 	b.w	800a0d8 <__sfp_lock_release>
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <__sinit+0x28>)
 800a0fa:	6223      	str	r3, [r4, #32]
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <__sinit+0x2c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1f5      	bne.n	800a0f0 <__sinit+0xc>
 800a104:	f7ff ffc4 	bl	800a090 <global_stdio_init.part.0>
 800a108:	e7f2      	b.n	800a0f0 <__sinit+0xc>
 800a10a:	bf00      	nop
 800a10c:	0800a051 	.word	0x0800a051
 800a110:	200011e8 	.word	0x200011e8

0800a114 <_fwalk_sglue>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	4607      	mov	r7, r0
 800a11a:	4688      	mov	r8, r1
 800a11c:	4614      	mov	r4, r2
 800a11e:	2600      	movs	r6, #0
 800a120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a124:	f1b9 0901 	subs.w	r9, r9, #1
 800a128:	d505      	bpl.n	800a136 <_fwalk_sglue+0x22>
 800a12a:	6824      	ldr	r4, [r4, #0]
 800a12c:	2c00      	cmp	r4, #0
 800a12e:	d1f7      	bne.n	800a120 <_fwalk_sglue+0xc>
 800a130:	4630      	mov	r0, r6
 800a132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d907      	bls.n	800a14c <_fwalk_sglue+0x38>
 800a13c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a140:	3301      	adds	r3, #1
 800a142:	d003      	beq.n	800a14c <_fwalk_sglue+0x38>
 800a144:	4629      	mov	r1, r5
 800a146:	4638      	mov	r0, r7
 800a148:	47c0      	blx	r8
 800a14a:	4306      	orrs	r6, r0
 800a14c:	3568      	adds	r5, #104	; 0x68
 800a14e:	e7e9      	b.n	800a124 <_fwalk_sglue+0x10>

0800a150 <sniprintf>:
 800a150:	b40c      	push	{r2, r3}
 800a152:	b530      	push	{r4, r5, lr}
 800a154:	4b17      	ldr	r3, [pc, #92]	; (800a1b4 <sniprintf+0x64>)
 800a156:	1e0c      	subs	r4, r1, #0
 800a158:	681d      	ldr	r5, [r3, #0]
 800a15a:	b09d      	sub	sp, #116	; 0x74
 800a15c:	da08      	bge.n	800a170 <sniprintf+0x20>
 800a15e:	238b      	movs	r3, #139	; 0x8b
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	b01d      	add	sp, #116	; 0x74
 800a168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a16c:	b002      	add	sp, #8
 800a16e:	4770      	bx	lr
 800a170:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a174:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a178:	bf14      	ite	ne
 800a17a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a17e:	4623      	moveq	r3, r4
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	9307      	str	r3, [sp, #28]
 800a184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a188:	9002      	str	r0, [sp, #8]
 800a18a:	9006      	str	r0, [sp, #24]
 800a18c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a190:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a192:	ab21      	add	r3, sp, #132	; 0x84
 800a194:	a902      	add	r1, sp, #8
 800a196:	4628      	mov	r0, r5
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	f002 fb83 	bl	800c8a4 <_svfiprintf_r>
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	bfbc      	itt	lt
 800a1a2:	238b      	movlt	r3, #139	; 0x8b
 800a1a4:	602b      	strlt	r3, [r5, #0]
 800a1a6:	2c00      	cmp	r4, #0
 800a1a8:	d0dd      	beq.n	800a166 <sniprintf+0x16>
 800a1aa:	9b02      	ldr	r3, [sp, #8]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	e7d9      	b.n	800a166 <sniprintf+0x16>
 800a1b2:	bf00      	nop
 800a1b4:	20000078 	.word	0x20000078

0800a1b8 <siprintf>:
 800a1b8:	b40e      	push	{r1, r2, r3}
 800a1ba:	b500      	push	{lr}
 800a1bc:	b09c      	sub	sp, #112	; 0x70
 800a1be:	ab1d      	add	r3, sp, #116	; 0x74
 800a1c0:	9002      	str	r0, [sp, #8]
 800a1c2:	9006      	str	r0, [sp, #24]
 800a1c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1c8:	4809      	ldr	r0, [pc, #36]	; (800a1f0 <siprintf+0x38>)
 800a1ca:	9107      	str	r1, [sp, #28]
 800a1cc:	9104      	str	r1, [sp, #16]
 800a1ce:	4909      	ldr	r1, [pc, #36]	; (800a1f4 <siprintf+0x3c>)
 800a1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d4:	9105      	str	r1, [sp, #20]
 800a1d6:	6800      	ldr	r0, [r0, #0]
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	a902      	add	r1, sp, #8
 800a1dc:	f002 fb62 	bl	800c8a4 <_svfiprintf_r>
 800a1e0:	9b02      	ldr	r3, [sp, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
 800a1e6:	b01c      	add	sp, #112	; 0x70
 800a1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ec:	b003      	add	sp, #12
 800a1ee:	4770      	bx	lr
 800a1f0:	20000078 	.word	0x20000078
 800a1f4:	ffff0208 	.word	0xffff0208

0800a1f8 <siscanf>:
 800a1f8:	b40e      	push	{r1, r2, r3}
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	b09f      	sub	sp, #124	; 0x7c
 800a1fe:	ac21      	add	r4, sp, #132	; 0x84
 800a200:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a204:	f854 2b04 	ldr.w	r2, [r4], #4
 800a208:	9201      	str	r2, [sp, #4]
 800a20a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a20e:	9004      	str	r0, [sp, #16]
 800a210:	9008      	str	r0, [sp, #32]
 800a212:	f7f6 f865 	bl	80002e0 <strlen>
 800a216:	4b0c      	ldr	r3, [pc, #48]	; (800a248 <siscanf+0x50>)
 800a218:	9005      	str	r0, [sp, #20]
 800a21a:	9009      	str	r0, [sp, #36]	; 0x24
 800a21c:	930d      	str	r3, [sp, #52]	; 0x34
 800a21e:	480b      	ldr	r0, [pc, #44]	; (800a24c <siscanf+0x54>)
 800a220:	9a01      	ldr	r2, [sp, #4]
 800a222:	6800      	ldr	r0, [r0, #0]
 800a224:	9403      	str	r4, [sp, #12]
 800a226:	2300      	movs	r3, #0
 800a228:	9311      	str	r3, [sp, #68]	; 0x44
 800a22a:	9316      	str	r3, [sp, #88]	; 0x58
 800a22c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a230:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a234:	a904      	add	r1, sp, #16
 800a236:	4623      	mov	r3, r4
 800a238:	f002 fc8c 	bl	800cb54 <__ssvfiscanf_r>
 800a23c:	b01f      	add	sp, #124	; 0x7c
 800a23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a242:	b003      	add	sp, #12
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	0800a273 	.word	0x0800a273
 800a24c:	20000078 	.word	0x20000078

0800a250 <__sread>:
 800a250:	b510      	push	{r4, lr}
 800a252:	460c      	mov	r4, r1
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	f000 f86e 	bl	800a338 <_read_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	bfab      	itete	ge
 800a260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a262:	89a3      	ldrhlt	r3, [r4, #12]
 800a264:	181b      	addge	r3, r3, r0
 800a266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a26a:	bfac      	ite	ge
 800a26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a26e:	81a3      	strhlt	r3, [r4, #12]
 800a270:	bd10      	pop	{r4, pc}

0800a272 <__seofread>:
 800a272:	2000      	movs	r0, #0
 800a274:	4770      	bx	lr

0800a276 <__swrite>:
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	461f      	mov	r7, r3
 800a27c:	898b      	ldrh	r3, [r1, #12]
 800a27e:	05db      	lsls	r3, r3, #23
 800a280:	4605      	mov	r5, r0
 800a282:	460c      	mov	r4, r1
 800a284:	4616      	mov	r6, r2
 800a286:	d505      	bpl.n	800a294 <__swrite+0x1e>
 800a288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28c:	2302      	movs	r3, #2
 800a28e:	2200      	movs	r2, #0
 800a290:	f000 f840 	bl	800a314 <_lseek_r>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a29a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a29e:	81a3      	strh	r3, [r4, #12]
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	463b      	mov	r3, r7
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2aa:	f000 b857 	b.w	800a35c <_write_r>

0800a2ae <__sseek>:
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b6:	f000 f82d 	bl	800a314 <_lseek_r>
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	bf15      	itete	ne
 800a2c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2ca:	81a3      	strheq	r3, [r4, #12]
 800a2cc:	bf18      	it	ne
 800a2ce:	81a3      	strhne	r3, [r4, #12]
 800a2d0:	bd10      	pop	{r4, pc}

0800a2d2 <__sclose>:
 800a2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d6:	f000 b80d 	b.w	800a2f4 <_close_r>

0800a2da <memset>:
 800a2da:	4402      	add	r2, r0
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d100      	bne.n	800a2e4 <memset+0xa>
 800a2e2:	4770      	bx	lr
 800a2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e8:	e7f9      	b.n	800a2de <memset+0x4>
	...

0800a2ec <_localeconv_r>:
 800a2ec:	4800      	ldr	r0, [pc, #0]	; (800a2f0 <_localeconv_r+0x4>)
 800a2ee:	4770      	bx	lr
 800a2f0:	2000016c 	.word	0x2000016c

0800a2f4 <_close_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_close_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7f8 fedf 	bl	80030c2 <_close>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_close_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_close_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	200011ec 	.word	0x200011ec

0800a314 <_lseek_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d07      	ldr	r5, [pc, #28]	; (800a334 <_lseek_r+0x20>)
 800a318:	4604      	mov	r4, r0
 800a31a:	4608      	mov	r0, r1
 800a31c:	4611      	mov	r1, r2
 800a31e:	2200      	movs	r2, #0
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	f7f8 fef4 	bl	8003110 <_lseek>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_lseek_r+0x1e>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_lseek_r+0x1e>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	200011ec 	.word	0x200011ec

0800a338 <_read_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4d07      	ldr	r5, [pc, #28]	; (800a358 <_read_r+0x20>)
 800a33c:	4604      	mov	r4, r0
 800a33e:	4608      	mov	r0, r1
 800a340:	4611      	mov	r1, r2
 800a342:	2200      	movs	r2, #0
 800a344:	602a      	str	r2, [r5, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	f7f8 fe82 	bl	8003050 <_read>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d102      	bne.n	800a356 <_read_r+0x1e>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	b103      	cbz	r3, 800a356 <_read_r+0x1e>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	200011ec 	.word	0x200011ec

0800a35c <_write_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <_write_r+0x20>)
 800a360:	4604      	mov	r4, r0
 800a362:	4608      	mov	r0, r1
 800a364:	4611      	mov	r1, r2
 800a366:	2200      	movs	r2, #0
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f7f8 fe8d 	bl	800308a <_write>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_write_r+0x1e>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_write_r+0x1e>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	200011ec 	.word	0x200011ec

0800a380 <__errno>:
 800a380:	4b01      	ldr	r3, [pc, #4]	; (800a388 <__errno+0x8>)
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	20000078 	.word	0x20000078

0800a38c <__libc_init_array>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	4d0d      	ldr	r5, [pc, #52]	; (800a3c4 <__libc_init_array+0x38>)
 800a390:	4c0d      	ldr	r4, [pc, #52]	; (800a3c8 <__libc_init_array+0x3c>)
 800a392:	1b64      	subs	r4, r4, r5
 800a394:	10a4      	asrs	r4, r4, #2
 800a396:	2600      	movs	r6, #0
 800a398:	42a6      	cmp	r6, r4
 800a39a:	d109      	bne.n	800a3b0 <__libc_init_array+0x24>
 800a39c:	4d0b      	ldr	r5, [pc, #44]	; (800a3cc <__libc_init_array+0x40>)
 800a39e:	4c0c      	ldr	r4, [pc, #48]	; (800a3d0 <__libc_init_array+0x44>)
 800a3a0:	f003 ff8a 	bl	800e2b8 <_init>
 800a3a4:	1b64      	subs	r4, r4, r5
 800a3a6:	10a4      	asrs	r4, r4, #2
 800a3a8:	2600      	movs	r6, #0
 800a3aa:	42a6      	cmp	r6, r4
 800a3ac:	d105      	bne.n	800a3ba <__libc_init_array+0x2e>
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b4:	4798      	blx	r3
 800a3b6:	3601      	adds	r6, #1
 800a3b8:	e7ee      	b.n	800a398 <__libc_init_array+0xc>
 800a3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3be:	4798      	blx	r3
 800a3c0:	3601      	adds	r6, #1
 800a3c2:	e7f2      	b.n	800a3aa <__libc_init_array+0x1e>
 800a3c4:	0800ef44 	.word	0x0800ef44
 800a3c8:	0800ef44 	.word	0x0800ef44
 800a3cc:	0800ef44 	.word	0x0800ef44
 800a3d0:	0800ef48 	.word	0x0800ef48

0800a3d4 <__retarget_lock_init_recursive>:
 800a3d4:	4770      	bx	lr

0800a3d6 <__retarget_lock_acquire_recursive>:
 800a3d6:	4770      	bx	lr

0800a3d8 <__retarget_lock_release_recursive>:
 800a3d8:	4770      	bx	lr

0800a3da <memcpy>:
 800a3da:	440a      	add	r2, r1
 800a3dc:	4291      	cmp	r1, r2
 800a3de:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3e2:	d100      	bne.n	800a3e6 <memcpy+0xc>
 800a3e4:	4770      	bx	lr
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3f0:	4291      	cmp	r1, r2
 800a3f2:	d1f9      	bne.n	800a3e8 <memcpy+0xe>
 800a3f4:	bd10      	pop	{r4, pc}
	...

0800a3f8 <nanf>:
 800a3f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a400 <nanf+0x8>
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	7fc00000 	.word	0x7fc00000

0800a404 <quorem>:
 800a404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	6903      	ldr	r3, [r0, #16]
 800a40a:	690c      	ldr	r4, [r1, #16]
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	4607      	mov	r7, r0
 800a410:	db7e      	blt.n	800a510 <quorem+0x10c>
 800a412:	3c01      	subs	r4, #1
 800a414:	f101 0814 	add.w	r8, r1, #20
 800a418:	f100 0514 	add.w	r5, r0, #20
 800a41c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a42a:	3301      	adds	r3, #1
 800a42c:	429a      	cmp	r2, r3
 800a42e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a436:	fbb2 f6f3 	udiv	r6, r2, r3
 800a43a:	d331      	bcc.n	800a4a0 <quorem+0x9c>
 800a43c:	f04f 0e00 	mov.w	lr, #0
 800a440:	4640      	mov	r0, r8
 800a442:	46ac      	mov	ip, r5
 800a444:	46f2      	mov	sl, lr
 800a446:	f850 2b04 	ldr.w	r2, [r0], #4
 800a44a:	b293      	uxth	r3, r2
 800a44c:	fb06 e303 	mla	r3, r6, r3, lr
 800a450:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a454:	0c1a      	lsrs	r2, r3, #16
 800a456:	b29b      	uxth	r3, r3
 800a458:	ebaa 0303 	sub.w	r3, sl, r3
 800a45c:	f8dc a000 	ldr.w	sl, [ip]
 800a460:	fa13 f38a 	uxtah	r3, r3, sl
 800a464:	fb06 220e 	mla	r2, r6, lr, r2
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a470:	b292      	uxth	r2, r2
 800a472:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a476:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a47a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a47e:	4581      	cmp	r9, r0
 800a480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a484:	f84c 3b04 	str.w	r3, [ip], #4
 800a488:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a48c:	d2db      	bcs.n	800a446 <quorem+0x42>
 800a48e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a492:	b92b      	cbnz	r3, 800a4a0 <quorem+0x9c>
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	3b04      	subs	r3, #4
 800a498:	429d      	cmp	r5, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	d32c      	bcc.n	800a4f8 <quorem+0xf4>
 800a49e:	613c      	str	r4, [r7, #16]
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f001 f96b 	bl	800b77c <__mcmp>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	db22      	blt.n	800a4f0 <quorem+0xec>
 800a4aa:	3601      	adds	r6, #1
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4b4:	f8d1 c000 	ldr.w	ip, [r1]
 800a4b8:	b293      	uxth	r3, r2
 800a4ba:	1ac3      	subs	r3, r0, r3
 800a4bc:	0c12      	lsrs	r2, r2, #16
 800a4be:	fa13 f38c 	uxtah	r3, r3, ip
 800a4c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a4c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4d0:	45c1      	cmp	r9, r8
 800a4d2:	f841 3b04 	str.w	r3, [r1], #4
 800a4d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4da:	d2e9      	bcs.n	800a4b0 <quorem+0xac>
 800a4dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4e4:	b922      	cbnz	r2, 800a4f0 <quorem+0xec>
 800a4e6:	3b04      	subs	r3, #4
 800a4e8:	429d      	cmp	r5, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	d30a      	bcc.n	800a504 <quorem+0x100>
 800a4ee:	613c      	str	r4, [r7, #16]
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	b003      	add	sp, #12
 800a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	3b04      	subs	r3, #4
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	d1ce      	bne.n	800a49e <quorem+0x9a>
 800a500:	3c01      	subs	r4, #1
 800a502:	e7c9      	b.n	800a498 <quorem+0x94>
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	3b04      	subs	r3, #4
 800a508:	2a00      	cmp	r2, #0
 800a50a:	d1f0      	bne.n	800a4ee <quorem+0xea>
 800a50c:	3c01      	subs	r4, #1
 800a50e:	e7eb      	b.n	800a4e8 <quorem+0xe4>
 800a510:	2000      	movs	r0, #0
 800a512:	e7ee      	b.n	800a4f2 <quorem+0xee>
 800a514:	0000      	movs	r0, r0
	...

0800a518 <_dtoa_r>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	ed2d 8b02 	vpush	{d8}
 800a520:	69c5      	ldr	r5, [r0, #28]
 800a522:	b091      	sub	sp, #68	; 0x44
 800a524:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a528:	ec59 8b10 	vmov	r8, r9, d0
 800a52c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a52e:	9106      	str	r1, [sp, #24]
 800a530:	4606      	mov	r6, r0
 800a532:	9208      	str	r2, [sp, #32]
 800a534:	930c      	str	r3, [sp, #48]	; 0x30
 800a536:	b975      	cbnz	r5, 800a556 <_dtoa_r+0x3e>
 800a538:	2010      	movs	r0, #16
 800a53a:	f000 fda5 	bl	800b088 <malloc>
 800a53e:	4602      	mov	r2, r0
 800a540:	61f0      	str	r0, [r6, #28]
 800a542:	b920      	cbnz	r0, 800a54e <_dtoa_r+0x36>
 800a544:	4ba6      	ldr	r3, [pc, #664]	; (800a7e0 <_dtoa_r+0x2c8>)
 800a546:	21ef      	movs	r1, #239	; 0xef
 800a548:	48a6      	ldr	r0, [pc, #664]	; (800a7e4 <_dtoa_r+0x2cc>)
 800a54a:	f002 ff31 	bl	800d3b0 <__assert_func>
 800a54e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a552:	6005      	str	r5, [r0, #0]
 800a554:	60c5      	str	r5, [r0, #12]
 800a556:	69f3      	ldr	r3, [r6, #28]
 800a558:	6819      	ldr	r1, [r3, #0]
 800a55a:	b151      	cbz	r1, 800a572 <_dtoa_r+0x5a>
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	604a      	str	r2, [r1, #4]
 800a560:	2301      	movs	r3, #1
 800a562:	4093      	lsls	r3, r2
 800a564:	608b      	str	r3, [r1, #8]
 800a566:	4630      	mov	r0, r6
 800a568:	f000 fe82 	bl	800b270 <_Bfree>
 800a56c:	69f3      	ldr	r3, [r6, #28]
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	f1b9 0300 	subs.w	r3, r9, #0
 800a576:	bfbb      	ittet	lt
 800a578:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	9303      	strlt	r3, [sp, #12]
 800a57e:	2300      	movge	r3, #0
 800a580:	2201      	movlt	r2, #1
 800a582:	bfac      	ite	ge
 800a584:	6023      	strge	r3, [r4, #0]
 800a586:	6022      	strlt	r2, [r4, #0]
 800a588:	4b97      	ldr	r3, [pc, #604]	; (800a7e8 <_dtoa_r+0x2d0>)
 800a58a:	9c03      	ldr	r4, [sp, #12]
 800a58c:	43a3      	bics	r3, r4
 800a58e:	d11c      	bne.n	800a5ca <_dtoa_r+0xb2>
 800a590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a592:	f242 730f 	movw	r3, #9999	; 0x270f
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a59c:	ea53 0308 	orrs.w	r3, r3, r8
 800a5a0:	f000 84fb 	beq.w	800af9a <_dtoa_r+0xa82>
 800a5a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5a6:	b963      	cbnz	r3, 800a5c2 <_dtoa_r+0xaa>
 800a5a8:	4b90      	ldr	r3, [pc, #576]	; (800a7ec <_dtoa_r+0x2d4>)
 800a5aa:	e020      	b.n	800a5ee <_dtoa_r+0xd6>
 800a5ac:	4b90      	ldr	r3, [pc, #576]	; (800a7f0 <_dtoa_r+0x2d8>)
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	9801      	ldr	r0, [sp, #4]
 800a5b8:	b011      	add	sp, #68	; 0x44
 800a5ba:	ecbd 8b02 	vpop	{d8}
 800a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c2:	4b8a      	ldr	r3, [pc, #552]	; (800a7ec <_dtoa_r+0x2d4>)
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	3303      	adds	r3, #3
 800a5c8:	e7f3      	b.n	800a5b2 <_dtoa_r+0x9a>
 800a5ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a5ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d6:	d10c      	bne.n	800a5f2 <_dtoa_r+0xda>
 800a5d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5da:	2301      	movs	r3, #1
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 84d7 	beq.w	800af94 <_dtoa_r+0xa7c>
 800a5e6:	4b83      	ldr	r3, [pc, #524]	; (800a7f4 <_dtoa_r+0x2dc>)
 800a5e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	e7e1      	b.n	800a5b6 <_dtoa_r+0x9e>
 800a5f2:	aa0e      	add	r2, sp, #56	; 0x38
 800a5f4:	a90f      	add	r1, sp, #60	; 0x3c
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	eeb0 0b48 	vmov.f64	d0, d8
 800a5fc:	f001 f9d4 	bl	800b9a8 <__d2b>
 800a600:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a606:	4605      	mov	r5, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d046      	beq.n	800a69a <_dtoa_r+0x182>
 800a60c:	eeb0 7b48 	vmov.f64	d7, d8
 800a610:	ee18 1a90 	vmov	r1, s17
 800a614:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a618:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a61c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a620:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a624:	2000      	movs	r0, #0
 800a626:	ee07 1a90 	vmov	s15, r1
 800a62a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a62e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a7c8 <_dtoa_r+0x2b0>
 800a632:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a636:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a7d0 <_dtoa_r+0x2b8>
 800a63a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a63e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a7d8 <_dtoa_r+0x2c0>
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a64a:	eeb0 7b46 	vmov.f64	d7, d6
 800a64e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a652:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a656:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	ee16 ba90 	vmov	fp, s13
 800a662:	9009      	str	r0, [sp, #36]	; 0x24
 800a664:	d508      	bpl.n	800a678 <_dtoa_r+0x160>
 800a666:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a66a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	bf18      	it	ne
 800a674:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a678:	f1bb 0f16 	cmp.w	fp, #22
 800a67c:	d82b      	bhi.n	800a6d6 <_dtoa_r+0x1be>
 800a67e:	495e      	ldr	r1, [pc, #376]	; (800a7f8 <_dtoa_r+0x2e0>)
 800a680:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a684:	ed91 7b00 	vldr	d7, [r1]
 800a688:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a690:	d501      	bpl.n	800a696 <_dtoa_r+0x17e>
 800a692:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a696:	2100      	movs	r1, #0
 800a698:	e01e      	b.n	800a6d8 <_dtoa_r+0x1c0>
 800a69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a69c:	4413      	add	r3, r2
 800a69e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a6a2:	2920      	cmp	r1, #32
 800a6a4:	bfc1      	itttt	gt
 800a6a6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a6aa:	408c      	lslgt	r4, r1
 800a6ac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a6b0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a6b4:	bfd6      	itet	le
 800a6b6:	f1c1 0120 	rsble	r1, r1, #32
 800a6ba:	4321      	orrgt	r1, r4
 800a6bc:	fa08 f101 	lslle.w	r1, r8, r1
 800a6c0:	ee07 1a90 	vmov	s15, r1
 800a6c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	ee17 1a90 	vmov	r1, s15
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a6d4:	e7a7      	b.n	800a626 <_dtoa_r+0x10e>
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	1e53      	subs	r3, r2, #1
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	bf45      	ittet	mi
 800a6e0:	f1c2 0301 	rsbmi	r3, r2, #1
 800a6e4:	9304      	strmi	r3, [sp, #16]
 800a6e6:	2300      	movpl	r3, #0
 800a6e8:	2300      	movmi	r3, #0
 800a6ea:	bf4c      	ite	mi
 800a6ec:	9305      	strmi	r3, [sp, #20]
 800a6ee:	9304      	strpl	r3, [sp, #16]
 800a6f0:	f1bb 0f00 	cmp.w	fp, #0
 800a6f4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6f6:	db18      	blt.n	800a72a <_dtoa_r+0x212>
 800a6f8:	9b05      	ldr	r3, [sp, #20]
 800a6fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a6fe:	445b      	add	r3, fp
 800a700:	9305      	str	r3, [sp, #20]
 800a702:	2300      	movs	r3, #0
 800a704:	9a06      	ldr	r2, [sp, #24]
 800a706:	2a09      	cmp	r2, #9
 800a708:	d848      	bhi.n	800a79c <_dtoa_r+0x284>
 800a70a:	2a05      	cmp	r2, #5
 800a70c:	bfc4      	itt	gt
 800a70e:	3a04      	subgt	r2, #4
 800a710:	9206      	strgt	r2, [sp, #24]
 800a712:	9a06      	ldr	r2, [sp, #24]
 800a714:	f1a2 0202 	sub.w	r2, r2, #2
 800a718:	bfcc      	ite	gt
 800a71a:	2400      	movgt	r4, #0
 800a71c:	2401      	movle	r4, #1
 800a71e:	2a03      	cmp	r2, #3
 800a720:	d847      	bhi.n	800a7b2 <_dtoa_r+0x29a>
 800a722:	e8df f002 	tbb	[pc, r2]
 800a726:	2d0b      	.short	0x2d0b
 800a728:	392b      	.short	0x392b
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	2200      	movs	r2, #0
 800a72e:	eba3 030b 	sub.w	r3, r3, fp
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	920a      	str	r2, [sp, #40]	; 0x28
 800a736:	f1cb 0300 	rsb	r3, fp, #0
 800a73a:	e7e3      	b.n	800a704 <_dtoa_r+0x1ec>
 800a73c:	2200      	movs	r2, #0
 800a73e:	9207      	str	r2, [sp, #28]
 800a740:	9a08      	ldr	r2, [sp, #32]
 800a742:	2a00      	cmp	r2, #0
 800a744:	dc38      	bgt.n	800a7b8 <_dtoa_r+0x2a0>
 800a746:	f04f 0a01 	mov.w	sl, #1
 800a74a:	46d1      	mov	r9, sl
 800a74c:	4652      	mov	r2, sl
 800a74e:	f8cd a020 	str.w	sl, [sp, #32]
 800a752:	69f7      	ldr	r7, [r6, #28]
 800a754:	2100      	movs	r1, #0
 800a756:	2004      	movs	r0, #4
 800a758:	f100 0c14 	add.w	ip, r0, #20
 800a75c:	4594      	cmp	ip, r2
 800a75e:	d930      	bls.n	800a7c2 <_dtoa_r+0x2aa>
 800a760:	6079      	str	r1, [r7, #4]
 800a762:	4630      	mov	r0, r6
 800a764:	930d      	str	r3, [sp, #52]	; 0x34
 800a766:	f000 fd43 	bl	800b1f0 <_Balloc>
 800a76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a76c:	9001      	str	r0, [sp, #4]
 800a76e:	4602      	mov	r2, r0
 800a770:	2800      	cmp	r0, #0
 800a772:	d145      	bne.n	800a800 <_dtoa_r+0x2e8>
 800a774:	4b21      	ldr	r3, [pc, #132]	; (800a7fc <_dtoa_r+0x2e4>)
 800a776:	f240 11af 	movw	r1, #431	; 0x1af
 800a77a:	e6e5      	b.n	800a548 <_dtoa_r+0x30>
 800a77c:	2201      	movs	r2, #1
 800a77e:	e7de      	b.n	800a73e <_dtoa_r+0x226>
 800a780:	2200      	movs	r2, #0
 800a782:	9207      	str	r2, [sp, #28]
 800a784:	9a08      	ldr	r2, [sp, #32]
 800a786:	eb0b 0a02 	add.w	sl, fp, r2
 800a78a:	f10a 0901 	add.w	r9, sl, #1
 800a78e:	464a      	mov	r2, r9
 800a790:	2a01      	cmp	r2, #1
 800a792:	bfb8      	it	lt
 800a794:	2201      	movlt	r2, #1
 800a796:	e7dc      	b.n	800a752 <_dtoa_r+0x23a>
 800a798:	2201      	movs	r2, #1
 800a79a:	e7f2      	b.n	800a782 <_dtoa_r+0x26a>
 800a79c:	2401      	movs	r4, #1
 800a79e:	2200      	movs	r2, #0
 800a7a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a7a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	46d1      	mov	r9, sl
 800a7ac:	2212      	movs	r2, #18
 800a7ae:	9108      	str	r1, [sp, #32]
 800a7b0:	e7cf      	b.n	800a752 <_dtoa_r+0x23a>
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	9207      	str	r2, [sp, #28]
 800a7b6:	e7f5      	b.n	800a7a4 <_dtoa_r+0x28c>
 800a7b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a7bc:	46d1      	mov	r9, sl
 800a7be:	4652      	mov	r2, sl
 800a7c0:	e7c7      	b.n	800a752 <_dtoa_r+0x23a>
 800a7c2:	3101      	adds	r1, #1
 800a7c4:	0040      	lsls	r0, r0, #1
 800a7c6:	e7c7      	b.n	800a758 <_dtoa_r+0x240>
 800a7c8:	636f4361 	.word	0x636f4361
 800a7cc:	3fd287a7 	.word	0x3fd287a7
 800a7d0:	8b60c8b3 	.word	0x8b60c8b3
 800a7d4:	3fc68a28 	.word	0x3fc68a28
 800a7d8:	509f79fb 	.word	0x509f79fb
 800a7dc:	3fd34413 	.word	0x3fd34413
 800a7e0:	0800eb38 	.word	0x0800eb38
 800a7e4:	0800eb4f 	.word	0x0800eb4f
 800a7e8:	7ff00000 	.word	0x7ff00000
 800a7ec:	0800eb34 	.word	0x0800eb34
 800a7f0:	0800eb2b 	.word	0x0800eb2b
 800a7f4:	0800ee91 	.word	0x0800ee91
 800a7f8:	0800ec40 	.word	0x0800ec40
 800a7fc:	0800eba7 	.word	0x0800eba7
 800a800:	69f2      	ldr	r2, [r6, #28]
 800a802:	9901      	ldr	r1, [sp, #4]
 800a804:	6011      	str	r1, [r2, #0]
 800a806:	f1b9 0f0e 	cmp.w	r9, #14
 800a80a:	d86c      	bhi.n	800a8e6 <_dtoa_r+0x3ce>
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	d06a      	beq.n	800a8e6 <_dtoa_r+0x3ce>
 800a810:	f1bb 0f00 	cmp.w	fp, #0
 800a814:	f340 80a0 	ble.w	800a958 <_dtoa_r+0x440>
 800a818:	4ac1      	ldr	r2, [pc, #772]	; (800ab20 <_dtoa_r+0x608>)
 800a81a:	f00b 010f 	and.w	r1, fp, #15
 800a81e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a822:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a826:	ed92 7b00 	vldr	d7, [r2]
 800a82a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a82e:	f000 8087 	beq.w	800a940 <_dtoa_r+0x428>
 800a832:	49bc      	ldr	r1, [pc, #752]	; (800ab24 <_dtoa_r+0x60c>)
 800a834:	ed91 6b08 	vldr	d6, [r1, #32]
 800a838:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a83c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a840:	f002 020f 	and.w	r2, r2, #15
 800a844:	2103      	movs	r1, #3
 800a846:	48b7      	ldr	r0, [pc, #732]	; (800ab24 <_dtoa_r+0x60c>)
 800a848:	2a00      	cmp	r2, #0
 800a84a:	d17b      	bne.n	800a944 <_dtoa_r+0x42c>
 800a84c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a850:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a854:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a85a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a85e:	2a00      	cmp	r2, #0
 800a860:	f000 80a0 	beq.w	800a9a4 <_dtoa_r+0x48c>
 800a864:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a868:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a870:	f140 8098 	bpl.w	800a9a4 <_dtoa_r+0x48c>
 800a874:	f1b9 0f00 	cmp.w	r9, #0
 800a878:	f000 8094 	beq.w	800a9a4 <_dtoa_r+0x48c>
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	dd2f      	ble.n	800a8e2 <_dtoa_r+0x3ca>
 800a882:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a886:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a88a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a88e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a892:	3101      	adds	r1, #1
 800a894:	4654      	mov	r4, sl
 800a896:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a89a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a89e:	ee07 1a90 	vmov	s15, r1
 800a8a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a8a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a8aa:	ee15 7a90 	vmov	r7, s11
 800a8ae:	ec51 0b15 	vmov	r0, r1, d5
 800a8b2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a8b6:	2c00      	cmp	r4, #0
 800a8b8:	d177      	bne.n	800a9aa <_dtoa_r+0x492>
 800a8ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a8be:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a8c2:	ec41 0b17 	vmov	d7, r0, r1
 800a8c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ce:	f300 826a 	bgt.w	800ada6 <_dtoa_r+0x88e>
 800a8d2:	eeb1 7b47 	vneg.f64	d7, d7
 800a8d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8de:	f100 8260 	bmi.w	800ada2 <_dtoa_r+0x88a>
 800a8e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a8e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	f2c0 811d 	blt.w	800ab28 <_dtoa_r+0x610>
 800a8ee:	f1bb 0f0e 	cmp.w	fp, #14
 800a8f2:	f300 8119 	bgt.w	800ab28 <_dtoa_r+0x610>
 800a8f6:	4b8a      	ldr	r3, [pc, #552]	; (800ab20 <_dtoa_r+0x608>)
 800a8f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8fc:	ed93 6b00 	vldr	d6, [r3]
 800a900:	9b08      	ldr	r3, [sp, #32]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f280 80b7 	bge.w	800aa76 <_dtoa_r+0x55e>
 800a908:	f1b9 0f00 	cmp.w	r9, #0
 800a90c:	f300 80b3 	bgt.w	800aa76 <_dtoa_r+0x55e>
 800a910:	f040 8246 	bne.w	800ada0 <_dtoa_r+0x888>
 800a914:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a918:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a91c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a920:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a928:	464c      	mov	r4, r9
 800a92a:	464f      	mov	r7, r9
 800a92c:	f280 821c 	bge.w	800ad68 <_dtoa_r+0x850>
 800a930:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a934:	2331      	movs	r3, #49	; 0x31
 800a936:	f808 3b01 	strb.w	r3, [r8], #1
 800a93a:	f10b 0b01 	add.w	fp, fp, #1
 800a93e:	e218      	b.n	800ad72 <_dtoa_r+0x85a>
 800a940:	2102      	movs	r1, #2
 800a942:	e780      	b.n	800a846 <_dtoa_r+0x32e>
 800a944:	07d4      	lsls	r4, r2, #31
 800a946:	d504      	bpl.n	800a952 <_dtoa_r+0x43a>
 800a948:	ed90 6b00 	vldr	d6, [r0]
 800a94c:	3101      	adds	r1, #1
 800a94e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a952:	1052      	asrs	r2, r2, #1
 800a954:	3008      	adds	r0, #8
 800a956:	e777      	b.n	800a848 <_dtoa_r+0x330>
 800a958:	d022      	beq.n	800a9a0 <_dtoa_r+0x488>
 800a95a:	f1cb 0200 	rsb	r2, fp, #0
 800a95e:	4970      	ldr	r1, [pc, #448]	; (800ab20 <_dtoa_r+0x608>)
 800a960:	f002 000f 	and.w	r0, r2, #15
 800a964:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a968:	ed91 7b00 	vldr	d7, [r1]
 800a96c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a970:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a974:	486b      	ldr	r0, [pc, #428]	; (800ab24 <_dtoa_r+0x60c>)
 800a976:	1112      	asrs	r2, r2, #4
 800a978:	2400      	movs	r4, #0
 800a97a:	2102      	movs	r1, #2
 800a97c:	b92a      	cbnz	r2, 800a98a <_dtoa_r+0x472>
 800a97e:	2c00      	cmp	r4, #0
 800a980:	f43f af6a 	beq.w	800a858 <_dtoa_r+0x340>
 800a984:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a988:	e766      	b.n	800a858 <_dtoa_r+0x340>
 800a98a:	07d7      	lsls	r7, r2, #31
 800a98c:	d505      	bpl.n	800a99a <_dtoa_r+0x482>
 800a98e:	ed90 6b00 	vldr	d6, [r0]
 800a992:	3101      	adds	r1, #1
 800a994:	2401      	movs	r4, #1
 800a996:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a99a:	1052      	asrs	r2, r2, #1
 800a99c:	3008      	adds	r0, #8
 800a99e:	e7ed      	b.n	800a97c <_dtoa_r+0x464>
 800a9a0:	2102      	movs	r1, #2
 800a9a2:	e759      	b.n	800a858 <_dtoa_r+0x340>
 800a9a4:	465a      	mov	r2, fp
 800a9a6:	464c      	mov	r4, r9
 800a9a8:	e775      	b.n	800a896 <_dtoa_r+0x37e>
 800a9aa:	ec41 0b17 	vmov	d7, r0, r1
 800a9ae:	495c      	ldr	r1, [pc, #368]	; (800ab20 <_dtoa_r+0x608>)
 800a9b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a9b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a9b8:	9901      	ldr	r1, [sp, #4]
 800a9ba:	440c      	add	r4, r1
 800a9bc:	9907      	ldr	r1, [sp, #28]
 800a9be:	b351      	cbz	r1, 800aa16 <_dtoa_r+0x4fe>
 800a9c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a9c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a9c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a9d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a9d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a9d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a9dc:	ee14 1a90 	vmov	r1, s9
 800a9e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a9e4:	3130      	adds	r1, #48	; 0x30
 800a9e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a9ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f2:	f808 1b01 	strb.w	r1, [r8], #1
 800a9f6:	d439      	bmi.n	800aa6c <_dtoa_r+0x554>
 800a9f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a9fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa04:	d472      	bmi.n	800aaec <_dtoa_r+0x5d4>
 800aa06:	45a0      	cmp	r8, r4
 800aa08:	f43f af6b 	beq.w	800a8e2 <_dtoa_r+0x3ca>
 800aa0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aa10:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aa14:	e7e0      	b.n	800a9d8 <_dtoa_r+0x4c0>
 800aa16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa1e:	4620      	mov	r0, r4
 800aa20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aa24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa28:	ee14 1a90 	vmov	r1, s9
 800aa2c:	3130      	adds	r1, #48	; 0x30
 800aa2e:	f808 1b01 	strb.w	r1, [r8], #1
 800aa32:	45a0      	cmp	r8, r4
 800aa34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa38:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa3c:	d118      	bne.n	800aa70 <_dtoa_r+0x558>
 800aa3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aa42:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aa46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aa4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4e:	dc4d      	bgt.n	800aaec <_dtoa_r+0x5d4>
 800aa50:	ee35 5b47 	vsub.f64	d5, d5, d7
 800aa54:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800aa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5c:	f57f af41 	bpl.w	800a8e2 <_dtoa_r+0x3ca>
 800aa60:	4680      	mov	r8, r0
 800aa62:	3801      	subs	r0, #1
 800aa64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800aa68:	2b30      	cmp	r3, #48	; 0x30
 800aa6a:	d0f9      	beq.n	800aa60 <_dtoa_r+0x548>
 800aa6c:	4693      	mov	fp, r2
 800aa6e:	e02a      	b.n	800aac6 <_dtoa_r+0x5ae>
 800aa70:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aa74:	e7d6      	b.n	800aa24 <_dtoa_r+0x50c>
 800aa76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800aa7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aa86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aa8a:	ee15 3a10 	vmov	r3, s10
 800aa8e:	3330      	adds	r3, #48	; 0x30
 800aa90:	f808 3b01 	strb.w	r3, [r8], #1
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	eba8 0303 	sub.w	r3, r8, r3
 800aa9a:	4599      	cmp	r9, r3
 800aa9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aaa0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aaa4:	d133      	bne.n	800ab0e <_dtoa_r+0x5f6>
 800aaa6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aaaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab2:	dc1a      	bgt.n	800aaea <_dtoa_r+0x5d2>
 800aab4:	eeb4 7b46 	vcmp.f64	d7, d6
 800aab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aabc:	d103      	bne.n	800aac6 <_dtoa_r+0x5ae>
 800aabe:	ee15 3a10 	vmov	r3, s10
 800aac2:	07d9      	lsls	r1, r3, #31
 800aac4:	d411      	bmi.n	800aaea <_dtoa_r+0x5d2>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4630      	mov	r0, r6
 800aaca:	f000 fbd1 	bl	800b270 <_Bfree>
 800aace:	2300      	movs	r3, #0
 800aad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aad2:	f888 3000 	strb.w	r3, [r8]
 800aad6:	f10b 0301 	add.w	r3, fp, #1
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f43f ad69 	beq.w	800a5b6 <_dtoa_r+0x9e>
 800aae4:	f8c3 8000 	str.w	r8, [r3]
 800aae8:	e565      	b.n	800a5b6 <_dtoa_r+0x9e>
 800aaea:	465a      	mov	r2, fp
 800aaec:	4643      	mov	r3, r8
 800aaee:	4698      	mov	r8, r3
 800aaf0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800aaf4:	2939      	cmp	r1, #57	; 0x39
 800aaf6:	d106      	bne.n	800ab06 <_dtoa_r+0x5ee>
 800aaf8:	9901      	ldr	r1, [sp, #4]
 800aafa:	4299      	cmp	r1, r3
 800aafc:	d1f7      	bne.n	800aaee <_dtoa_r+0x5d6>
 800aafe:	9801      	ldr	r0, [sp, #4]
 800ab00:	2130      	movs	r1, #48	; 0x30
 800ab02:	3201      	adds	r2, #1
 800ab04:	7001      	strb	r1, [r0, #0]
 800ab06:	7819      	ldrb	r1, [r3, #0]
 800ab08:	3101      	adds	r1, #1
 800ab0a:	7019      	strb	r1, [r3, #0]
 800ab0c:	e7ae      	b.n	800aa6c <_dtoa_r+0x554>
 800ab0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1a:	d1b2      	bne.n	800aa82 <_dtoa_r+0x56a>
 800ab1c:	e7d3      	b.n	800aac6 <_dtoa_r+0x5ae>
 800ab1e:	bf00      	nop
 800ab20:	0800ec40 	.word	0x0800ec40
 800ab24:	0800ec18 	.word	0x0800ec18
 800ab28:	9907      	ldr	r1, [sp, #28]
 800ab2a:	2900      	cmp	r1, #0
 800ab2c:	f000 80d0 	beq.w	800acd0 <_dtoa_r+0x7b8>
 800ab30:	9906      	ldr	r1, [sp, #24]
 800ab32:	2901      	cmp	r1, #1
 800ab34:	f300 80b4 	bgt.w	800aca0 <_dtoa_r+0x788>
 800ab38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab3a:	2900      	cmp	r1, #0
 800ab3c:	f000 80ac 	beq.w	800ac98 <_dtoa_r+0x780>
 800ab40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ab48:	461c      	mov	r4, r3
 800ab4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab4c:	9b04      	ldr	r3, [sp, #16]
 800ab4e:	4413      	add	r3, r2
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	9b05      	ldr	r3, [sp, #20]
 800ab54:	2101      	movs	r1, #1
 800ab56:	4413      	add	r3, r2
 800ab58:	4630      	mov	r0, r6
 800ab5a:	9305      	str	r3, [sp, #20]
 800ab5c:	f000 fc88 	bl	800b470 <__i2b>
 800ab60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab62:	4607      	mov	r7, r0
 800ab64:	f1b8 0f00 	cmp.w	r8, #0
 800ab68:	d00d      	beq.n	800ab86 <_dtoa_r+0x66e>
 800ab6a:	9a05      	ldr	r2, [sp, #20]
 800ab6c:	2a00      	cmp	r2, #0
 800ab6e:	dd0a      	ble.n	800ab86 <_dtoa_r+0x66e>
 800ab70:	4542      	cmp	r2, r8
 800ab72:	9904      	ldr	r1, [sp, #16]
 800ab74:	bfa8      	it	ge
 800ab76:	4642      	movge	r2, r8
 800ab78:	1a89      	subs	r1, r1, r2
 800ab7a:	9104      	str	r1, [sp, #16]
 800ab7c:	9905      	ldr	r1, [sp, #20]
 800ab7e:	eba8 0802 	sub.w	r8, r8, r2
 800ab82:	1a8a      	subs	r2, r1, r2
 800ab84:	9205      	str	r2, [sp, #20]
 800ab86:	b303      	cbz	r3, 800abca <_dtoa_r+0x6b2>
 800ab88:	9a07      	ldr	r2, [sp, #28]
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	f000 80a5 	beq.w	800acda <_dtoa_r+0x7c2>
 800ab90:	2c00      	cmp	r4, #0
 800ab92:	dd13      	ble.n	800abbc <_dtoa_r+0x6a4>
 800ab94:	4639      	mov	r1, r7
 800ab96:	4622      	mov	r2, r4
 800ab98:	4630      	mov	r0, r6
 800ab9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab9c:	f000 fd28 	bl	800b5f0 <__pow5mult>
 800aba0:	462a      	mov	r2, r5
 800aba2:	4601      	mov	r1, r0
 800aba4:	4607      	mov	r7, r0
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 fc78 	bl	800b49c <__multiply>
 800abac:	4629      	mov	r1, r5
 800abae:	9009      	str	r0, [sp, #36]	; 0x24
 800abb0:	4630      	mov	r0, r6
 800abb2:	f000 fb5d 	bl	800b270 <_Bfree>
 800abb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abba:	4615      	mov	r5, r2
 800abbc:	1b1a      	subs	r2, r3, r4
 800abbe:	d004      	beq.n	800abca <_dtoa_r+0x6b2>
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f000 fd14 	bl	800b5f0 <__pow5mult>
 800abc8:	4605      	mov	r5, r0
 800abca:	2101      	movs	r1, #1
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 fc4f 	bl	800b470 <__i2b>
 800abd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	4604      	mov	r4, r0
 800abd8:	f340 8081 	ble.w	800acde <_dtoa_r+0x7c6>
 800abdc:	461a      	mov	r2, r3
 800abde:	4601      	mov	r1, r0
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 fd05 	bl	800b5f0 <__pow5mult>
 800abe6:	9b06      	ldr	r3, [sp, #24]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	4604      	mov	r4, r0
 800abec:	dd7a      	ble.n	800ace4 <_dtoa_r+0x7cc>
 800abee:	2300      	movs	r3, #0
 800abf0:	9309      	str	r3, [sp, #36]	; 0x24
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800abf8:	6910      	ldr	r0, [r2, #16]
 800abfa:	f000 fbeb 	bl	800b3d4 <__hi0bits>
 800abfe:	f1c0 0020 	rsb	r0, r0, #32
 800ac02:	9b05      	ldr	r3, [sp, #20]
 800ac04:	4418      	add	r0, r3
 800ac06:	f010 001f 	ands.w	r0, r0, #31
 800ac0a:	f000 8093 	beq.w	800ad34 <_dtoa_r+0x81c>
 800ac0e:	f1c0 0220 	rsb	r2, r0, #32
 800ac12:	2a04      	cmp	r2, #4
 800ac14:	f340 8085 	ble.w	800ad22 <_dtoa_r+0x80a>
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	f1c0 001c 	rsb	r0, r0, #28
 800ac1e:	4403      	add	r3, r0
 800ac20:	9304      	str	r3, [sp, #16]
 800ac22:	9b05      	ldr	r3, [sp, #20]
 800ac24:	4480      	add	r8, r0
 800ac26:	4403      	add	r3, r0
 800ac28:	9305      	str	r3, [sp, #20]
 800ac2a:	9b04      	ldr	r3, [sp, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd05      	ble.n	800ac3c <_dtoa_r+0x724>
 800ac30:	4629      	mov	r1, r5
 800ac32:	461a      	mov	r2, r3
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 fd35 	bl	800b6a4 <__lshift>
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	9b05      	ldr	r3, [sp, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	dd05      	ble.n	800ac4e <_dtoa_r+0x736>
 800ac42:	4621      	mov	r1, r4
 800ac44:	461a      	mov	r2, r3
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 fd2c 	bl	800b6a4 <__lshift>
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d071      	beq.n	800ad38 <_dtoa_r+0x820>
 800ac54:	4621      	mov	r1, r4
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 fd90 	bl	800b77c <__mcmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	da6b      	bge.n	800ad38 <_dtoa_r+0x820>
 800ac60:	2300      	movs	r3, #0
 800ac62:	4629      	mov	r1, r5
 800ac64:	220a      	movs	r2, #10
 800ac66:	4630      	mov	r0, r6
 800ac68:	f000 fb24 	bl	800b2b4 <__multadd>
 800ac6c:	9b07      	ldr	r3, [sp, #28]
 800ac6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac72:	4605      	mov	r5, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8197 	beq.w	800afa8 <_dtoa_r+0xa90>
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	220a      	movs	r2, #10
 800ac80:	4630      	mov	r0, r6
 800ac82:	f000 fb17 	bl	800b2b4 <__multadd>
 800ac86:	f1ba 0f00 	cmp.w	sl, #0
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	f300 8093 	bgt.w	800adb6 <_dtoa_r+0x89e>
 800ac90:	9b06      	ldr	r3, [sp, #24]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	dc57      	bgt.n	800ad46 <_dtoa_r+0x82e>
 800ac96:	e08e      	b.n	800adb6 <_dtoa_r+0x89e>
 800ac98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac9e:	e751      	b.n	800ab44 <_dtoa_r+0x62c>
 800aca0:	f109 34ff 	add.w	r4, r9, #4294967295
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	bfbf      	itttt	lt
 800aca8:	1ae2      	sublt	r2, r4, r3
 800acaa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acac:	189b      	addlt	r3, r3, r2
 800acae:	930a      	strlt	r3, [sp, #40]	; 0x28
 800acb0:	bfae      	itee	ge
 800acb2:	1b1c      	subge	r4, r3, r4
 800acb4:	4623      	movlt	r3, r4
 800acb6:	2400      	movlt	r4, #0
 800acb8:	f1b9 0f00 	cmp.w	r9, #0
 800acbc:	bfb5      	itete	lt
 800acbe:	9a04      	ldrlt	r2, [sp, #16]
 800acc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800acc4:	eba2 0809 	sublt.w	r8, r2, r9
 800acc8:	464a      	movge	r2, r9
 800acca:	bfb8      	it	lt
 800accc:	2200      	movlt	r2, #0
 800acce:	e73c      	b.n	800ab4a <_dtoa_r+0x632>
 800acd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800acd4:	9f07      	ldr	r7, [sp, #28]
 800acd6:	461c      	mov	r4, r3
 800acd8:	e744      	b.n	800ab64 <_dtoa_r+0x64c>
 800acda:	461a      	mov	r2, r3
 800acdc:	e770      	b.n	800abc0 <_dtoa_r+0x6a8>
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	dc18      	bgt.n	800ad16 <_dtoa_r+0x7fe>
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	b9b3      	cbnz	r3, 800ad16 <_dtoa_r+0x7fe>
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800acee:	b9a2      	cbnz	r2, 800ad1a <_dtoa_r+0x802>
 800acf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800acf4:	0d12      	lsrs	r2, r2, #20
 800acf6:	0512      	lsls	r2, r2, #20
 800acf8:	b18a      	cbz	r2, 800ad1e <_dtoa_r+0x806>
 800acfa:	9b04      	ldr	r3, [sp, #16]
 800acfc:	3301      	adds	r3, #1
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	3301      	adds	r3, #1
 800ad04:	9305      	str	r3, [sp, #20]
 800ad06:	2301      	movs	r3, #1
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f47f af70 	bne.w	800abf2 <_dtoa_r+0x6da>
 800ad12:	2001      	movs	r0, #1
 800ad14:	e775      	b.n	800ac02 <_dtoa_r+0x6ea>
 800ad16:	2300      	movs	r3, #0
 800ad18:	e7f6      	b.n	800ad08 <_dtoa_r+0x7f0>
 800ad1a:	9b02      	ldr	r3, [sp, #8]
 800ad1c:	e7f4      	b.n	800ad08 <_dtoa_r+0x7f0>
 800ad1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad20:	e7f3      	b.n	800ad0a <_dtoa_r+0x7f2>
 800ad22:	d082      	beq.n	800ac2a <_dtoa_r+0x712>
 800ad24:	9b04      	ldr	r3, [sp, #16]
 800ad26:	321c      	adds	r2, #28
 800ad28:	4413      	add	r3, r2
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	9b05      	ldr	r3, [sp, #20]
 800ad2e:	4490      	add	r8, r2
 800ad30:	4413      	add	r3, r2
 800ad32:	e779      	b.n	800ac28 <_dtoa_r+0x710>
 800ad34:	4602      	mov	r2, r0
 800ad36:	e7f5      	b.n	800ad24 <_dtoa_r+0x80c>
 800ad38:	f1b9 0f00 	cmp.w	r9, #0
 800ad3c:	dc36      	bgt.n	800adac <_dtoa_r+0x894>
 800ad3e:	9b06      	ldr	r3, [sp, #24]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	dd33      	ble.n	800adac <_dtoa_r+0x894>
 800ad44:	46ca      	mov	sl, r9
 800ad46:	f1ba 0f00 	cmp.w	sl, #0
 800ad4a:	d10d      	bne.n	800ad68 <_dtoa_r+0x850>
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4653      	mov	r3, sl
 800ad50:	2205      	movs	r2, #5
 800ad52:	4630      	mov	r0, r6
 800ad54:	f000 faae 	bl	800b2b4 <__multadd>
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f000 fd0d 	bl	800b77c <__mcmp>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	f73f ade4 	bgt.w	800a930 <_dtoa_r+0x418>
 800ad68:	9b08      	ldr	r3, [sp, #32]
 800ad6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad6e:	ea6f 0b03 	mvn.w	fp, r3
 800ad72:	f04f 0900 	mov.w	r9, #0
 800ad76:	4621      	mov	r1, r4
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f000 fa79 	bl	800b270 <_Bfree>
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	f43f aea1 	beq.w	800aac6 <_dtoa_r+0x5ae>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	d005      	beq.n	800ad96 <_dtoa_r+0x87e>
 800ad8a:	45b9      	cmp	r9, r7
 800ad8c:	d003      	beq.n	800ad96 <_dtoa_r+0x87e>
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4630      	mov	r0, r6
 800ad92:	f000 fa6d 	bl	800b270 <_Bfree>
 800ad96:	4639      	mov	r1, r7
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f000 fa69 	bl	800b270 <_Bfree>
 800ad9e:	e692      	b.n	800aac6 <_dtoa_r+0x5ae>
 800ada0:	2400      	movs	r4, #0
 800ada2:	4627      	mov	r7, r4
 800ada4:	e7e0      	b.n	800ad68 <_dtoa_r+0x850>
 800ada6:	4693      	mov	fp, r2
 800ada8:	4627      	mov	r7, r4
 800adaa:	e5c1      	b.n	800a930 <_dtoa_r+0x418>
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	46ca      	mov	sl, r9
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8100 	beq.w	800afb6 <_dtoa_r+0xa9e>
 800adb6:	f1b8 0f00 	cmp.w	r8, #0
 800adba:	dd05      	ble.n	800adc8 <_dtoa_r+0x8b0>
 800adbc:	4639      	mov	r1, r7
 800adbe:	4642      	mov	r2, r8
 800adc0:	4630      	mov	r0, r6
 800adc2:	f000 fc6f 	bl	800b6a4 <__lshift>
 800adc6:	4607      	mov	r7, r0
 800adc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d05d      	beq.n	800ae8a <_dtoa_r+0x972>
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	4630      	mov	r0, r6
 800add2:	f000 fa0d 	bl	800b1f0 <_Balloc>
 800add6:	4680      	mov	r8, r0
 800add8:	b928      	cbnz	r0, 800ade6 <_dtoa_r+0x8ce>
 800adda:	4b82      	ldr	r3, [pc, #520]	; (800afe4 <_dtoa_r+0xacc>)
 800addc:	4602      	mov	r2, r0
 800adde:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ade2:	f7ff bbb1 	b.w	800a548 <_dtoa_r+0x30>
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	3202      	adds	r2, #2
 800adea:	0092      	lsls	r2, r2, #2
 800adec:	f107 010c 	add.w	r1, r7, #12
 800adf0:	300c      	adds	r0, #12
 800adf2:	f7ff faf2 	bl	800a3da <memcpy>
 800adf6:	2201      	movs	r2, #1
 800adf8:	4641      	mov	r1, r8
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 fc52 	bl	800b6a4 <__lshift>
 800ae00:	9b01      	ldr	r3, [sp, #4]
 800ae02:	3301      	adds	r3, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	4453      	add	r3, sl
 800ae0a:	9308      	str	r3, [sp, #32]
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	46b9      	mov	r9, r7
 800ae14:	9307      	str	r3, [sp, #28]
 800ae16:	4607      	mov	r7, r0
 800ae18:	9b04      	ldr	r3, [sp, #16]
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	4628      	mov	r0, r5
 800ae20:	9302      	str	r3, [sp, #8]
 800ae22:	f7ff faef 	bl	800a404 <quorem>
 800ae26:	4603      	mov	r3, r0
 800ae28:	3330      	adds	r3, #48	; 0x30
 800ae2a:	9005      	str	r0, [sp, #20]
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4628      	mov	r0, r5
 800ae30:	9309      	str	r3, [sp, #36]	; 0x24
 800ae32:	f000 fca3 	bl	800b77c <__mcmp>
 800ae36:	463a      	mov	r2, r7
 800ae38:	4682      	mov	sl, r0
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f000 fcb9 	bl	800b7b4 <__mdiff>
 800ae42:	68c2      	ldr	r2, [r0, #12]
 800ae44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae46:	4680      	mov	r8, r0
 800ae48:	bb0a      	cbnz	r2, 800ae8e <_dtoa_r+0x976>
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f000 fc95 	bl	800b77c <__mcmp>
 800ae52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae54:	4602      	mov	r2, r0
 800ae56:	4641      	mov	r1, r8
 800ae58:	4630      	mov	r0, r6
 800ae5a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ae5e:	f000 fa07 	bl	800b270 <_Bfree>
 800ae62:	9b06      	ldr	r3, [sp, #24]
 800ae64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae66:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae6a:	ea43 0102 	orr.w	r1, r3, r2
 800ae6e:	9b07      	ldr	r3, [sp, #28]
 800ae70:	4319      	orrs	r1, r3
 800ae72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae74:	d10d      	bne.n	800ae92 <_dtoa_r+0x97a>
 800ae76:	2b39      	cmp	r3, #57	; 0x39
 800ae78:	d029      	beq.n	800aece <_dtoa_r+0x9b6>
 800ae7a:	f1ba 0f00 	cmp.w	sl, #0
 800ae7e:	dd01      	ble.n	800ae84 <_dtoa_r+0x96c>
 800ae80:	9b05      	ldr	r3, [sp, #20]
 800ae82:	3331      	adds	r3, #49	; 0x31
 800ae84:	9a02      	ldr	r2, [sp, #8]
 800ae86:	7013      	strb	r3, [r2, #0]
 800ae88:	e775      	b.n	800ad76 <_dtoa_r+0x85e>
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	e7b8      	b.n	800ae00 <_dtoa_r+0x8e8>
 800ae8e:	2201      	movs	r2, #1
 800ae90:	e7e1      	b.n	800ae56 <_dtoa_r+0x93e>
 800ae92:	f1ba 0f00 	cmp.w	sl, #0
 800ae96:	db06      	blt.n	800aea6 <_dtoa_r+0x98e>
 800ae98:	9906      	ldr	r1, [sp, #24]
 800ae9a:	ea41 0a0a 	orr.w	sl, r1, sl
 800ae9e:	9907      	ldr	r1, [sp, #28]
 800aea0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800aea4:	d120      	bne.n	800aee8 <_dtoa_r+0x9d0>
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	ddec      	ble.n	800ae84 <_dtoa_r+0x96c>
 800aeaa:	4629      	mov	r1, r5
 800aeac:	2201      	movs	r2, #1
 800aeae:	4630      	mov	r0, r6
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	f000 fbf7 	bl	800b6a4 <__lshift>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4605      	mov	r5, r0
 800aeba:	f000 fc5f 	bl	800b77c <__mcmp>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	dc02      	bgt.n	800aeca <_dtoa_r+0x9b2>
 800aec4:	d1de      	bne.n	800ae84 <_dtoa_r+0x96c>
 800aec6:	07da      	lsls	r2, r3, #31
 800aec8:	d5dc      	bpl.n	800ae84 <_dtoa_r+0x96c>
 800aeca:	2b39      	cmp	r3, #57	; 0x39
 800aecc:	d1d8      	bne.n	800ae80 <_dtoa_r+0x968>
 800aece:	9a02      	ldr	r2, [sp, #8]
 800aed0:	2339      	movs	r3, #57	; 0x39
 800aed2:	7013      	strb	r3, [r2, #0]
 800aed4:	4643      	mov	r3, r8
 800aed6:	4698      	mov	r8, r3
 800aed8:	3b01      	subs	r3, #1
 800aeda:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aede:	2a39      	cmp	r2, #57	; 0x39
 800aee0:	d051      	beq.n	800af86 <_dtoa_r+0xa6e>
 800aee2:	3201      	adds	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	e746      	b.n	800ad76 <_dtoa_r+0x85e>
 800aee8:	2a00      	cmp	r2, #0
 800aeea:	dd03      	ble.n	800aef4 <_dtoa_r+0x9dc>
 800aeec:	2b39      	cmp	r3, #57	; 0x39
 800aeee:	d0ee      	beq.n	800aece <_dtoa_r+0x9b6>
 800aef0:	3301      	adds	r3, #1
 800aef2:	e7c7      	b.n	800ae84 <_dtoa_r+0x96c>
 800aef4:	9a04      	ldr	r2, [sp, #16]
 800aef6:	9908      	ldr	r1, [sp, #32]
 800aef8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aefc:	428a      	cmp	r2, r1
 800aefe:	d02b      	beq.n	800af58 <_dtoa_r+0xa40>
 800af00:	4629      	mov	r1, r5
 800af02:	2300      	movs	r3, #0
 800af04:	220a      	movs	r2, #10
 800af06:	4630      	mov	r0, r6
 800af08:	f000 f9d4 	bl	800b2b4 <__multadd>
 800af0c:	45b9      	cmp	r9, r7
 800af0e:	4605      	mov	r5, r0
 800af10:	f04f 0300 	mov.w	r3, #0
 800af14:	f04f 020a 	mov.w	r2, #10
 800af18:	4649      	mov	r1, r9
 800af1a:	4630      	mov	r0, r6
 800af1c:	d107      	bne.n	800af2e <_dtoa_r+0xa16>
 800af1e:	f000 f9c9 	bl	800b2b4 <__multadd>
 800af22:	4681      	mov	r9, r0
 800af24:	4607      	mov	r7, r0
 800af26:	9b04      	ldr	r3, [sp, #16]
 800af28:	3301      	adds	r3, #1
 800af2a:	9304      	str	r3, [sp, #16]
 800af2c:	e774      	b.n	800ae18 <_dtoa_r+0x900>
 800af2e:	f000 f9c1 	bl	800b2b4 <__multadd>
 800af32:	4639      	mov	r1, r7
 800af34:	4681      	mov	r9, r0
 800af36:	2300      	movs	r3, #0
 800af38:	220a      	movs	r2, #10
 800af3a:	4630      	mov	r0, r6
 800af3c:	f000 f9ba 	bl	800b2b4 <__multadd>
 800af40:	4607      	mov	r7, r0
 800af42:	e7f0      	b.n	800af26 <_dtoa_r+0xa0e>
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	9a01      	ldr	r2, [sp, #4]
 800af4a:	bfcc      	ite	gt
 800af4c:	46d0      	movgt	r8, sl
 800af4e:	f04f 0801 	movle.w	r8, #1
 800af52:	4490      	add	r8, r2
 800af54:	f04f 0900 	mov.w	r9, #0
 800af58:	4629      	mov	r1, r5
 800af5a:	2201      	movs	r2, #1
 800af5c:	4630      	mov	r0, r6
 800af5e:	9302      	str	r3, [sp, #8]
 800af60:	f000 fba0 	bl	800b6a4 <__lshift>
 800af64:	4621      	mov	r1, r4
 800af66:	4605      	mov	r5, r0
 800af68:	f000 fc08 	bl	800b77c <__mcmp>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	dcb1      	bgt.n	800aed4 <_dtoa_r+0x9bc>
 800af70:	d102      	bne.n	800af78 <_dtoa_r+0xa60>
 800af72:	9b02      	ldr	r3, [sp, #8]
 800af74:	07db      	lsls	r3, r3, #31
 800af76:	d4ad      	bmi.n	800aed4 <_dtoa_r+0x9bc>
 800af78:	4643      	mov	r3, r8
 800af7a:	4698      	mov	r8, r3
 800af7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af80:	2a30      	cmp	r2, #48	; 0x30
 800af82:	d0fa      	beq.n	800af7a <_dtoa_r+0xa62>
 800af84:	e6f7      	b.n	800ad76 <_dtoa_r+0x85e>
 800af86:	9a01      	ldr	r2, [sp, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d1a4      	bne.n	800aed6 <_dtoa_r+0x9be>
 800af8c:	f10b 0b01 	add.w	fp, fp, #1
 800af90:	2331      	movs	r3, #49	; 0x31
 800af92:	e778      	b.n	800ae86 <_dtoa_r+0x96e>
 800af94:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <_dtoa_r+0xad0>)
 800af96:	f7ff bb2a 	b.w	800a5ee <_dtoa_r+0xd6>
 800af9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f47f ab05 	bne.w	800a5ac <_dtoa_r+0x94>
 800afa2:	4b12      	ldr	r3, [pc, #72]	; (800afec <_dtoa_r+0xad4>)
 800afa4:	f7ff bb23 	b.w	800a5ee <_dtoa_r+0xd6>
 800afa8:	f1ba 0f00 	cmp.w	sl, #0
 800afac:	dc03      	bgt.n	800afb6 <_dtoa_r+0xa9e>
 800afae:	9b06      	ldr	r3, [sp, #24]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	f73f aec8 	bgt.w	800ad46 <_dtoa_r+0x82e>
 800afb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800afba:	4621      	mov	r1, r4
 800afbc:	4628      	mov	r0, r5
 800afbe:	f7ff fa21 	bl	800a404 <quorem>
 800afc2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afc6:	f808 3b01 	strb.w	r3, [r8], #1
 800afca:	9a01      	ldr	r2, [sp, #4]
 800afcc:	eba8 0202 	sub.w	r2, r8, r2
 800afd0:	4592      	cmp	sl, r2
 800afd2:	ddb7      	ble.n	800af44 <_dtoa_r+0xa2c>
 800afd4:	4629      	mov	r1, r5
 800afd6:	2300      	movs	r3, #0
 800afd8:	220a      	movs	r2, #10
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f96a 	bl	800b2b4 <__multadd>
 800afe0:	4605      	mov	r5, r0
 800afe2:	e7ea      	b.n	800afba <_dtoa_r+0xaa2>
 800afe4:	0800eba7 	.word	0x0800eba7
 800afe8:	0800ee90 	.word	0x0800ee90
 800afec:	0800eb2b 	.word	0x0800eb2b

0800aff0 <_free_r>:
 800aff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aff2:	2900      	cmp	r1, #0
 800aff4:	d044      	beq.n	800b080 <_free_r+0x90>
 800aff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affa:	9001      	str	r0, [sp, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f1a1 0404 	sub.w	r4, r1, #4
 800b002:	bfb8      	it	lt
 800b004:	18e4      	addlt	r4, r4, r3
 800b006:	f000 f8e7 	bl	800b1d8 <__malloc_lock>
 800b00a:	4a1e      	ldr	r2, [pc, #120]	; (800b084 <_free_r+0x94>)
 800b00c:	9801      	ldr	r0, [sp, #4]
 800b00e:	6813      	ldr	r3, [r2, #0]
 800b010:	b933      	cbnz	r3, 800b020 <_free_r+0x30>
 800b012:	6063      	str	r3, [r4, #4]
 800b014:	6014      	str	r4, [r2, #0]
 800b016:	b003      	add	sp, #12
 800b018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b01c:	f000 b8e2 	b.w	800b1e4 <__malloc_unlock>
 800b020:	42a3      	cmp	r3, r4
 800b022:	d908      	bls.n	800b036 <_free_r+0x46>
 800b024:	6825      	ldr	r5, [r4, #0]
 800b026:	1961      	adds	r1, r4, r5
 800b028:	428b      	cmp	r3, r1
 800b02a:	bf01      	itttt	eq
 800b02c:	6819      	ldreq	r1, [r3, #0]
 800b02e:	685b      	ldreq	r3, [r3, #4]
 800b030:	1949      	addeq	r1, r1, r5
 800b032:	6021      	streq	r1, [r4, #0]
 800b034:	e7ed      	b.n	800b012 <_free_r+0x22>
 800b036:	461a      	mov	r2, r3
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	b10b      	cbz	r3, 800b040 <_free_r+0x50>
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	d9fa      	bls.n	800b036 <_free_r+0x46>
 800b040:	6811      	ldr	r1, [r2, #0]
 800b042:	1855      	adds	r5, r2, r1
 800b044:	42a5      	cmp	r5, r4
 800b046:	d10b      	bne.n	800b060 <_free_r+0x70>
 800b048:	6824      	ldr	r4, [r4, #0]
 800b04a:	4421      	add	r1, r4
 800b04c:	1854      	adds	r4, r2, r1
 800b04e:	42a3      	cmp	r3, r4
 800b050:	6011      	str	r1, [r2, #0]
 800b052:	d1e0      	bne.n	800b016 <_free_r+0x26>
 800b054:	681c      	ldr	r4, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	6053      	str	r3, [r2, #4]
 800b05a:	440c      	add	r4, r1
 800b05c:	6014      	str	r4, [r2, #0]
 800b05e:	e7da      	b.n	800b016 <_free_r+0x26>
 800b060:	d902      	bls.n	800b068 <_free_r+0x78>
 800b062:	230c      	movs	r3, #12
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	e7d6      	b.n	800b016 <_free_r+0x26>
 800b068:	6825      	ldr	r5, [r4, #0]
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	428b      	cmp	r3, r1
 800b06e:	bf04      	itt	eq
 800b070:	6819      	ldreq	r1, [r3, #0]
 800b072:	685b      	ldreq	r3, [r3, #4]
 800b074:	6063      	str	r3, [r4, #4]
 800b076:	bf04      	itt	eq
 800b078:	1949      	addeq	r1, r1, r5
 800b07a:	6021      	streq	r1, [r4, #0]
 800b07c:	6054      	str	r4, [r2, #4]
 800b07e:	e7ca      	b.n	800b016 <_free_r+0x26>
 800b080:	b003      	add	sp, #12
 800b082:	bd30      	pop	{r4, r5, pc}
 800b084:	200011f4 	.word	0x200011f4

0800b088 <malloc>:
 800b088:	4b02      	ldr	r3, [pc, #8]	; (800b094 <malloc+0xc>)
 800b08a:	4601      	mov	r1, r0
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	f000 b823 	b.w	800b0d8 <_malloc_r>
 800b092:	bf00      	nop
 800b094:	20000078 	.word	0x20000078

0800b098 <sbrk_aligned>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	4e0e      	ldr	r6, [pc, #56]	; (800b0d4 <sbrk_aligned+0x3c>)
 800b09c:	460c      	mov	r4, r1
 800b09e:	6831      	ldr	r1, [r6, #0]
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	b911      	cbnz	r1, 800b0aa <sbrk_aligned+0x12>
 800b0a4:	f002 f96a 	bl	800d37c <_sbrk_r>
 800b0a8:	6030      	str	r0, [r6, #0]
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f002 f965 	bl	800d37c <_sbrk_r>
 800b0b2:	1c43      	adds	r3, r0, #1
 800b0b4:	d00a      	beq.n	800b0cc <sbrk_aligned+0x34>
 800b0b6:	1cc4      	adds	r4, r0, #3
 800b0b8:	f024 0403 	bic.w	r4, r4, #3
 800b0bc:	42a0      	cmp	r0, r4
 800b0be:	d007      	beq.n	800b0d0 <sbrk_aligned+0x38>
 800b0c0:	1a21      	subs	r1, r4, r0
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f002 f95a 	bl	800d37c <_sbrk_r>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d101      	bne.n	800b0d0 <sbrk_aligned+0x38>
 800b0cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	200011f8 	.word	0x200011f8

0800b0d8 <_malloc_r>:
 800b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	1ccd      	adds	r5, r1, #3
 800b0de:	f025 0503 	bic.w	r5, r5, #3
 800b0e2:	3508      	adds	r5, #8
 800b0e4:	2d0c      	cmp	r5, #12
 800b0e6:	bf38      	it	cc
 800b0e8:	250c      	movcc	r5, #12
 800b0ea:	2d00      	cmp	r5, #0
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	db01      	blt.n	800b0f4 <_malloc_r+0x1c>
 800b0f0:	42a9      	cmp	r1, r5
 800b0f2:	d905      	bls.n	800b100 <_malloc_r+0x28>
 800b0f4:	230c      	movs	r3, #12
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	2600      	movs	r6, #0
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b1d4 <_malloc_r+0xfc>
 800b104:	f000 f868 	bl	800b1d8 <__malloc_lock>
 800b108:	f8d8 3000 	ldr.w	r3, [r8]
 800b10c:	461c      	mov	r4, r3
 800b10e:	bb5c      	cbnz	r4, 800b168 <_malloc_r+0x90>
 800b110:	4629      	mov	r1, r5
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff ffc0 	bl	800b098 <sbrk_aligned>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	4604      	mov	r4, r0
 800b11c:	d155      	bne.n	800b1ca <_malloc_r+0xf2>
 800b11e:	f8d8 4000 	ldr.w	r4, [r8]
 800b122:	4626      	mov	r6, r4
 800b124:	2e00      	cmp	r6, #0
 800b126:	d145      	bne.n	800b1b4 <_malloc_r+0xdc>
 800b128:	2c00      	cmp	r4, #0
 800b12a:	d048      	beq.n	800b1be <_malloc_r+0xe6>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	4631      	mov	r1, r6
 800b130:	4638      	mov	r0, r7
 800b132:	eb04 0903 	add.w	r9, r4, r3
 800b136:	f002 f921 	bl	800d37c <_sbrk_r>
 800b13a:	4581      	cmp	r9, r0
 800b13c:	d13f      	bne.n	800b1be <_malloc_r+0xe6>
 800b13e:	6821      	ldr	r1, [r4, #0]
 800b140:	1a6d      	subs	r5, r5, r1
 800b142:	4629      	mov	r1, r5
 800b144:	4638      	mov	r0, r7
 800b146:	f7ff ffa7 	bl	800b098 <sbrk_aligned>
 800b14a:	3001      	adds	r0, #1
 800b14c:	d037      	beq.n	800b1be <_malloc_r+0xe6>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	442b      	add	r3, r5
 800b152:	6023      	str	r3, [r4, #0]
 800b154:	f8d8 3000 	ldr.w	r3, [r8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d038      	beq.n	800b1ce <_malloc_r+0xf6>
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	42a2      	cmp	r2, r4
 800b160:	d12b      	bne.n	800b1ba <_malloc_r+0xe2>
 800b162:	2200      	movs	r2, #0
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	e00f      	b.n	800b188 <_malloc_r+0xb0>
 800b168:	6822      	ldr	r2, [r4, #0]
 800b16a:	1b52      	subs	r2, r2, r5
 800b16c:	d41f      	bmi.n	800b1ae <_malloc_r+0xd6>
 800b16e:	2a0b      	cmp	r2, #11
 800b170:	d917      	bls.n	800b1a2 <_malloc_r+0xca>
 800b172:	1961      	adds	r1, r4, r5
 800b174:	42a3      	cmp	r3, r4
 800b176:	6025      	str	r5, [r4, #0]
 800b178:	bf18      	it	ne
 800b17a:	6059      	strne	r1, [r3, #4]
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	bf08      	it	eq
 800b180:	f8c8 1000 	streq.w	r1, [r8]
 800b184:	5162      	str	r2, [r4, r5]
 800b186:	604b      	str	r3, [r1, #4]
 800b188:	4638      	mov	r0, r7
 800b18a:	f104 060b 	add.w	r6, r4, #11
 800b18e:	f000 f829 	bl	800b1e4 <__malloc_unlock>
 800b192:	f026 0607 	bic.w	r6, r6, #7
 800b196:	1d23      	adds	r3, r4, #4
 800b198:	1af2      	subs	r2, r6, r3
 800b19a:	d0ae      	beq.n	800b0fa <_malloc_r+0x22>
 800b19c:	1b9b      	subs	r3, r3, r6
 800b19e:	50a3      	str	r3, [r4, r2]
 800b1a0:	e7ab      	b.n	800b0fa <_malloc_r+0x22>
 800b1a2:	42a3      	cmp	r3, r4
 800b1a4:	6862      	ldr	r2, [r4, #4]
 800b1a6:	d1dd      	bne.n	800b164 <_malloc_r+0x8c>
 800b1a8:	f8c8 2000 	str.w	r2, [r8]
 800b1ac:	e7ec      	b.n	800b188 <_malloc_r+0xb0>
 800b1ae:	4623      	mov	r3, r4
 800b1b0:	6864      	ldr	r4, [r4, #4]
 800b1b2:	e7ac      	b.n	800b10e <_malloc_r+0x36>
 800b1b4:	4634      	mov	r4, r6
 800b1b6:	6876      	ldr	r6, [r6, #4]
 800b1b8:	e7b4      	b.n	800b124 <_malloc_r+0x4c>
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	e7cc      	b.n	800b158 <_malloc_r+0x80>
 800b1be:	230c      	movs	r3, #12
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f000 f80e 	bl	800b1e4 <__malloc_unlock>
 800b1c8:	e797      	b.n	800b0fa <_malloc_r+0x22>
 800b1ca:	6025      	str	r5, [r4, #0]
 800b1cc:	e7dc      	b.n	800b188 <_malloc_r+0xb0>
 800b1ce:	605b      	str	r3, [r3, #4]
 800b1d0:	deff      	udf	#255	; 0xff
 800b1d2:	bf00      	nop
 800b1d4:	200011f4 	.word	0x200011f4

0800b1d8 <__malloc_lock>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__malloc_lock+0x8>)
 800b1da:	f7ff b8fc 	b.w	800a3d6 <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	200011f0 	.word	0x200011f0

0800b1e4 <__malloc_unlock>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__malloc_unlock+0x8>)
 800b1e6:	f7ff b8f7 	b.w	800a3d8 <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	200011f0 	.word	0x200011f0

0800b1f0 <_Balloc>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	69c6      	ldr	r6, [r0, #28]
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	460d      	mov	r5, r1
 800b1f8:	b976      	cbnz	r6, 800b218 <_Balloc+0x28>
 800b1fa:	2010      	movs	r0, #16
 800b1fc:	f7ff ff44 	bl	800b088 <malloc>
 800b200:	4602      	mov	r2, r0
 800b202:	61e0      	str	r0, [r4, #28]
 800b204:	b920      	cbnz	r0, 800b210 <_Balloc+0x20>
 800b206:	4b18      	ldr	r3, [pc, #96]	; (800b268 <_Balloc+0x78>)
 800b208:	4818      	ldr	r0, [pc, #96]	; (800b26c <_Balloc+0x7c>)
 800b20a:	216b      	movs	r1, #107	; 0x6b
 800b20c:	f002 f8d0 	bl	800d3b0 <__assert_func>
 800b210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b214:	6006      	str	r6, [r0, #0]
 800b216:	60c6      	str	r6, [r0, #12]
 800b218:	69e6      	ldr	r6, [r4, #28]
 800b21a:	68f3      	ldr	r3, [r6, #12]
 800b21c:	b183      	cbz	r3, 800b240 <_Balloc+0x50>
 800b21e:	69e3      	ldr	r3, [r4, #28]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b226:	b9b8      	cbnz	r0, 800b258 <_Balloc+0x68>
 800b228:	2101      	movs	r1, #1
 800b22a:	fa01 f605 	lsl.w	r6, r1, r5
 800b22e:	1d72      	adds	r2, r6, #5
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	4620      	mov	r0, r4
 800b234:	f002 f8da 	bl	800d3ec <_calloc_r>
 800b238:	b160      	cbz	r0, 800b254 <_Balloc+0x64>
 800b23a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b23e:	e00e      	b.n	800b25e <_Balloc+0x6e>
 800b240:	2221      	movs	r2, #33	; 0x21
 800b242:	2104      	movs	r1, #4
 800b244:	4620      	mov	r0, r4
 800b246:	f002 f8d1 	bl	800d3ec <_calloc_r>
 800b24a:	69e3      	ldr	r3, [r4, #28]
 800b24c:	60f0      	str	r0, [r6, #12]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e4      	bne.n	800b21e <_Balloc+0x2e>
 800b254:	2000      	movs	r0, #0
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	6802      	ldr	r2, [r0, #0]
 800b25a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b25e:	2300      	movs	r3, #0
 800b260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b264:	e7f7      	b.n	800b256 <_Balloc+0x66>
 800b266:	bf00      	nop
 800b268:	0800eb38 	.word	0x0800eb38
 800b26c:	0800ebb8 	.word	0x0800ebb8

0800b270 <_Bfree>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	69c6      	ldr	r6, [r0, #28]
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b976      	cbnz	r6, 800b298 <_Bfree+0x28>
 800b27a:	2010      	movs	r0, #16
 800b27c:	f7ff ff04 	bl	800b088 <malloc>
 800b280:	4602      	mov	r2, r0
 800b282:	61e8      	str	r0, [r5, #28]
 800b284:	b920      	cbnz	r0, 800b290 <_Bfree+0x20>
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <_Bfree+0x3c>)
 800b288:	4809      	ldr	r0, [pc, #36]	; (800b2b0 <_Bfree+0x40>)
 800b28a:	218f      	movs	r1, #143	; 0x8f
 800b28c:	f002 f890 	bl	800d3b0 <__assert_func>
 800b290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b294:	6006      	str	r6, [r0, #0]
 800b296:	60c6      	str	r6, [r0, #12]
 800b298:	b13c      	cbz	r4, 800b2aa <_Bfree+0x3a>
 800b29a:	69eb      	ldr	r3, [r5, #28]
 800b29c:	6862      	ldr	r2, [r4, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2a4:	6021      	str	r1, [r4, #0]
 800b2a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	0800eb38 	.word	0x0800eb38
 800b2b0:	0800ebb8 	.word	0x0800ebb8

0800b2b4 <__multadd>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	690d      	ldr	r5, [r1, #16]
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	460c      	mov	r4, r1
 800b2be:	461e      	mov	r6, r3
 800b2c0:	f101 0c14 	add.w	ip, r1, #20
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ca:	b299      	uxth	r1, r3
 800b2cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b2d0:	0c1e      	lsrs	r6, r3, #16
 800b2d2:	0c0b      	lsrs	r3, r1, #16
 800b2d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2d8:	b289      	uxth	r1, r1
 800b2da:	3001      	adds	r0, #1
 800b2dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2e0:	4285      	cmp	r5, r0
 800b2e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ea:	dcec      	bgt.n	800b2c6 <__multadd+0x12>
 800b2ec:	b30e      	cbz	r6, 800b332 <__multadd+0x7e>
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	42ab      	cmp	r3, r5
 800b2f2:	dc19      	bgt.n	800b328 <__multadd+0x74>
 800b2f4:	6861      	ldr	r1, [r4, #4]
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	f7ff ff79 	bl	800b1f0 <_Balloc>
 800b2fe:	4680      	mov	r8, r0
 800b300:	b928      	cbnz	r0, 800b30e <__multadd+0x5a>
 800b302:	4602      	mov	r2, r0
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <__multadd+0x84>)
 800b306:	480d      	ldr	r0, [pc, #52]	; (800b33c <__multadd+0x88>)
 800b308:	21ba      	movs	r1, #186	; 0xba
 800b30a:	f002 f851 	bl	800d3b0 <__assert_func>
 800b30e:	6922      	ldr	r2, [r4, #16]
 800b310:	3202      	adds	r2, #2
 800b312:	f104 010c 	add.w	r1, r4, #12
 800b316:	0092      	lsls	r2, r2, #2
 800b318:	300c      	adds	r0, #12
 800b31a:	f7ff f85e 	bl	800a3da <memcpy>
 800b31e:	4621      	mov	r1, r4
 800b320:	4638      	mov	r0, r7
 800b322:	f7ff ffa5 	bl	800b270 <_Bfree>
 800b326:	4644      	mov	r4, r8
 800b328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b32c:	3501      	adds	r5, #1
 800b32e:	615e      	str	r6, [r3, #20]
 800b330:	6125      	str	r5, [r4, #16]
 800b332:	4620      	mov	r0, r4
 800b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b338:	0800eba7 	.word	0x0800eba7
 800b33c:	0800ebb8 	.word	0x0800ebb8

0800b340 <__s2b>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	4615      	mov	r5, r2
 800b348:	461f      	mov	r7, r3
 800b34a:	2209      	movs	r2, #9
 800b34c:	3308      	adds	r3, #8
 800b34e:	4606      	mov	r6, r0
 800b350:	fb93 f3f2 	sdiv	r3, r3, r2
 800b354:	2100      	movs	r1, #0
 800b356:	2201      	movs	r2, #1
 800b358:	429a      	cmp	r2, r3
 800b35a:	db09      	blt.n	800b370 <__s2b+0x30>
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff ff47 	bl	800b1f0 <_Balloc>
 800b362:	b940      	cbnz	r0, 800b376 <__s2b+0x36>
 800b364:	4602      	mov	r2, r0
 800b366:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <__s2b+0x8c>)
 800b368:	4819      	ldr	r0, [pc, #100]	; (800b3d0 <__s2b+0x90>)
 800b36a:	21d3      	movs	r1, #211	; 0xd3
 800b36c:	f002 f820 	bl	800d3b0 <__assert_func>
 800b370:	0052      	lsls	r2, r2, #1
 800b372:	3101      	adds	r1, #1
 800b374:	e7f0      	b.n	800b358 <__s2b+0x18>
 800b376:	9b08      	ldr	r3, [sp, #32]
 800b378:	6143      	str	r3, [r0, #20]
 800b37a:	2d09      	cmp	r5, #9
 800b37c:	f04f 0301 	mov.w	r3, #1
 800b380:	6103      	str	r3, [r0, #16]
 800b382:	dd16      	ble.n	800b3b2 <__s2b+0x72>
 800b384:	f104 0909 	add.w	r9, r4, #9
 800b388:	46c8      	mov	r8, r9
 800b38a:	442c      	add	r4, r5
 800b38c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b390:	4601      	mov	r1, r0
 800b392:	3b30      	subs	r3, #48	; 0x30
 800b394:	220a      	movs	r2, #10
 800b396:	4630      	mov	r0, r6
 800b398:	f7ff ff8c 	bl	800b2b4 <__multadd>
 800b39c:	45a0      	cmp	r8, r4
 800b39e:	d1f5      	bne.n	800b38c <__s2b+0x4c>
 800b3a0:	f1a5 0408 	sub.w	r4, r5, #8
 800b3a4:	444c      	add	r4, r9
 800b3a6:	1b2d      	subs	r5, r5, r4
 800b3a8:	1963      	adds	r3, r4, r5
 800b3aa:	42bb      	cmp	r3, r7
 800b3ac:	db04      	blt.n	800b3b8 <__s2b+0x78>
 800b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3b2:	340a      	adds	r4, #10
 800b3b4:	2509      	movs	r5, #9
 800b3b6:	e7f6      	b.n	800b3a6 <__s2b+0x66>
 800b3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3bc:	4601      	mov	r1, r0
 800b3be:	3b30      	subs	r3, #48	; 0x30
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7ff ff76 	bl	800b2b4 <__multadd>
 800b3c8:	e7ee      	b.n	800b3a8 <__s2b+0x68>
 800b3ca:	bf00      	nop
 800b3cc:	0800eba7 	.word	0x0800eba7
 800b3d0:	0800ebb8 	.word	0x0800ebb8

0800b3d4 <__hi0bits>:
 800b3d4:	0c03      	lsrs	r3, r0, #16
 800b3d6:	041b      	lsls	r3, r3, #16
 800b3d8:	b9d3      	cbnz	r3, 800b410 <__hi0bits+0x3c>
 800b3da:	0400      	lsls	r0, r0, #16
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3e2:	bf04      	itt	eq
 800b3e4:	0200      	lsleq	r0, r0, #8
 800b3e6:	3308      	addeq	r3, #8
 800b3e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3ec:	bf04      	itt	eq
 800b3ee:	0100      	lsleq	r0, r0, #4
 800b3f0:	3304      	addeq	r3, #4
 800b3f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3f6:	bf04      	itt	eq
 800b3f8:	0080      	lsleq	r0, r0, #2
 800b3fa:	3302      	addeq	r3, #2
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	db05      	blt.n	800b40c <__hi0bits+0x38>
 800b400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b404:	f103 0301 	add.w	r3, r3, #1
 800b408:	bf08      	it	eq
 800b40a:	2320      	moveq	r3, #32
 800b40c:	4618      	mov	r0, r3
 800b40e:	4770      	bx	lr
 800b410:	2300      	movs	r3, #0
 800b412:	e7e4      	b.n	800b3de <__hi0bits+0xa>

0800b414 <__lo0bits>:
 800b414:	6803      	ldr	r3, [r0, #0]
 800b416:	f013 0207 	ands.w	r2, r3, #7
 800b41a:	d00c      	beq.n	800b436 <__lo0bits+0x22>
 800b41c:	07d9      	lsls	r1, r3, #31
 800b41e:	d422      	bmi.n	800b466 <__lo0bits+0x52>
 800b420:	079a      	lsls	r2, r3, #30
 800b422:	bf49      	itett	mi
 800b424:	085b      	lsrmi	r3, r3, #1
 800b426:	089b      	lsrpl	r3, r3, #2
 800b428:	6003      	strmi	r3, [r0, #0]
 800b42a:	2201      	movmi	r2, #1
 800b42c:	bf5c      	itt	pl
 800b42e:	6003      	strpl	r3, [r0, #0]
 800b430:	2202      	movpl	r2, #2
 800b432:	4610      	mov	r0, r2
 800b434:	4770      	bx	lr
 800b436:	b299      	uxth	r1, r3
 800b438:	b909      	cbnz	r1, 800b43e <__lo0bits+0x2a>
 800b43a:	0c1b      	lsrs	r3, r3, #16
 800b43c:	2210      	movs	r2, #16
 800b43e:	b2d9      	uxtb	r1, r3
 800b440:	b909      	cbnz	r1, 800b446 <__lo0bits+0x32>
 800b442:	3208      	adds	r2, #8
 800b444:	0a1b      	lsrs	r3, r3, #8
 800b446:	0719      	lsls	r1, r3, #28
 800b448:	bf04      	itt	eq
 800b44a:	091b      	lsreq	r3, r3, #4
 800b44c:	3204      	addeq	r2, #4
 800b44e:	0799      	lsls	r1, r3, #30
 800b450:	bf04      	itt	eq
 800b452:	089b      	lsreq	r3, r3, #2
 800b454:	3202      	addeq	r2, #2
 800b456:	07d9      	lsls	r1, r3, #31
 800b458:	d403      	bmi.n	800b462 <__lo0bits+0x4e>
 800b45a:	085b      	lsrs	r3, r3, #1
 800b45c:	f102 0201 	add.w	r2, r2, #1
 800b460:	d003      	beq.n	800b46a <__lo0bits+0x56>
 800b462:	6003      	str	r3, [r0, #0]
 800b464:	e7e5      	b.n	800b432 <__lo0bits+0x1e>
 800b466:	2200      	movs	r2, #0
 800b468:	e7e3      	b.n	800b432 <__lo0bits+0x1e>
 800b46a:	2220      	movs	r2, #32
 800b46c:	e7e1      	b.n	800b432 <__lo0bits+0x1e>
	...

0800b470 <__i2b>:
 800b470:	b510      	push	{r4, lr}
 800b472:	460c      	mov	r4, r1
 800b474:	2101      	movs	r1, #1
 800b476:	f7ff febb 	bl	800b1f0 <_Balloc>
 800b47a:	4602      	mov	r2, r0
 800b47c:	b928      	cbnz	r0, 800b48a <__i2b+0x1a>
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <__i2b+0x24>)
 800b480:	4805      	ldr	r0, [pc, #20]	; (800b498 <__i2b+0x28>)
 800b482:	f240 1145 	movw	r1, #325	; 0x145
 800b486:	f001 ff93 	bl	800d3b0 <__assert_func>
 800b48a:	2301      	movs	r3, #1
 800b48c:	6144      	str	r4, [r0, #20]
 800b48e:	6103      	str	r3, [r0, #16]
 800b490:	bd10      	pop	{r4, pc}
 800b492:	bf00      	nop
 800b494:	0800eba7 	.word	0x0800eba7
 800b498:	0800ebb8 	.word	0x0800ebb8

0800b49c <__multiply>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	4691      	mov	r9, r2
 800b4a2:	690a      	ldr	r2, [r1, #16]
 800b4a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	bfb8      	it	lt
 800b4ac:	460b      	movlt	r3, r1
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	bfbc      	itt	lt
 800b4b2:	464c      	movlt	r4, r9
 800b4b4:	4699      	movlt	r9, r3
 800b4b6:	6927      	ldr	r7, [r4, #16]
 800b4b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4bc:	68a3      	ldr	r3, [r4, #8]
 800b4be:	6861      	ldr	r1, [r4, #4]
 800b4c0:	eb07 060a 	add.w	r6, r7, sl
 800b4c4:	42b3      	cmp	r3, r6
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	bfb8      	it	lt
 800b4ca:	3101      	addlt	r1, #1
 800b4cc:	f7ff fe90 	bl	800b1f0 <_Balloc>
 800b4d0:	b930      	cbnz	r0, 800b4e0 <__multiply+0x44>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4b44      	ldr	r3, [pc, #272]	; (800b5e8 <__multiply+0x14c>)
 800b4d6:	4845      	ldr	r0, [pc, #276]	; (800b5ec <__multiply+0x150>)
 800b4d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b4dc:	f001 ff68 	bl	800d3b0 <__assert_func>
 800b4e0:	f100 0514 	add.w	r5, r0, #20
 800b4e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4543      	cmp	r3, r8
 800b4ee:	d321      	bcc.n	800b534 <__multiply+0x98>
 800b4f0:	f104 0314 	add.w	r3, r4, #20
 800b4f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4f8:	f109 0314 	add.w	r3, r9, #20
 800b4fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b500:	9202      	str	r2, [sp, #8]
 800b502:	1b3a      	subs	r2, r7, r4
 800b504:	3a15      	subs	r2, #21
 800b506:	f022 0203 	bic.w	r2, r2, #3
 800b50a:	3204      	adds	r2, #4
 800b50c:	f104 0115 	add.w	r1, r4, #21
 800b510:	428f      	cmp	r7, r1
 800b512:	bf38      	it	cc
 800b514:	2204      	movcc	r2, #4
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	9a02      	ldr	r2, [sp, #8]
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d80c      	bhi.n	800b53a <__multiply+0x9e>
 800b520:	2e00      	cmp	r6, #0
 800b522:	dd03      	ble.n	800b52c <__multiply+0x90>
 800b524:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d05b      	beq.n	800b5e4 <__multiply+0x148>
 800b52c:	6106      	str	r6, [r0, #16]
 800b52e:	b005      	add	sp, #20
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	f843 2b04 	str.w	r2, [r3], #4
 800b538:	e7d8      	b.n	800b4ec <__multiply+0x50>
 800b53a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b53e:	f1ba 0f00 	cmp.w	sl, #0
 800b542:	d024      	beq.n	800b58e <__multiply+0xf2>
 800b544:	f104 0e14 	add.w	lr, r4, #20
 800b548:	46a9      	mov	r9, r5
 800b54a:	f04f 0c00 	mov.w	ip, #0
 800b54e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b552:	f8d9 1000 	ldr.w	r1, [r9]
 800b556:	fa1f fb82 	uxth.w	fp, r2
 800b55a:	b289      	uxth	r1, r1
 800b55c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b560:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b564:	f8d9 2000 	ldr.w	r2, [r9]
 800b568:	4461      	add	r1, ip
 800b56a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b56e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b576:	b289      	uxth	r1, r1
 800b578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b57c:	4577      	cmp	r7, lr
 800b57e:	f849 1b04 	str.w	r1, [r9], #4
 800b582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b586:	d8e2      	bhi.n	800b54e <__multiply+0xb2>
 800b588:	9a01      	ldr	r2, [sp, #4]
 800b58a:	f845 c002 	str.w	ip, [r5, r2]
 800b58e:	9a03      	ldr	r2, [sp, #12]
 800b590:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b594:	3304      	adds	r3, #4
 800b596:	f1b9 0f00 	cmp.w	r9, #0
 800b59a:	d021      	beq.n	800b5e0 <__multiply+0x144>
 800b59c:	6829      	ldr	r1, [r5, #0]
 800b59e:	f104 0c14 	add.w	ip, r4, #20
 800b5a2:	46ae      	mov	lr, r5
 800b5a4:	f04f 0a00 	mov.w	sl, #0
 800b5a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b5ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b5b4:	4452      	add	r2, sl
 800b5b6:	b289      	uxth	r1, r1
 800b5b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b5c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b5c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b5cc:	fb09 110a 	mla	r1, r9, sl, r1
 800b5d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b5d4:	4567      	cmp	r7, ip
 800b5d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5da:	d8e5      	bhi.n	800b5a8 <__multiply+0x10c>
 800b5dc:	9a01      	ldr	r2, [sp, #4]
 800b5de:	50a9      	str	r1, [r5, r2]
 800b5e0:	3504      	adds	r5, #4
 800b5e2:	e799      	b.n	800b518 <__multiply+0x7c>
 800b5e4:	3e01      	subs	r6, #1
 800b5e6:	e79b      	b.n	800b520 <__multiply+0x84>
 800b5e8:	0800eba7 	.word	0x0800eba7
 800b5ec:	0800ebb8 	.word	0x0800ebb8

0800b5f0 <__pow5mult>:
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	4615      	mov	r5, r2
 800b5f6:	f012 0203 	ands.w	r2, r2, #3
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	d007      	beq.n	800b610 <__pow5mult+0x20>
 800b600:	4c25      	ldr	r4, [pc, #148]	; (800b698 <__pow5mult+0xa8>)
 800b602:	3a01      	subs	r2, #1
 800b604:	2300      	movs	r3, #0
 800b606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b60a:	f7ff fe53 	bl	800b2b4 <__multadd>
 800b60e:	4607      	mov	r7, r0
 800b610:	10ad      	asrs	r5, r5, #2
 800b612:	d03d      	beq.n	800b690 <__pow5mult+0xa0>
 800b614:	69f4      	ldr	r4, [r6, #28]
 800b616:	b97c      	cbnz	r4, 800b638 <__pow5mult+0x48>
 800b618:	2010      	movs	r0, #16
 800b61a:	f7ff fd35 	bl	800b088 <malloc>
 800b61e:	4602      	mov	r2, r0
 800b620:	61f0      	str	r0, [r6, #28]
 800b622:	b928      	cbnz	r0, 800b630 <__pow5mult+0x40>
 800b624:	4b1d      	ldr	r3, [pc, #116]	; (800b69c <__pow5mult+0xac>)
 800b626:	481e      	ldr	r0, [pc, #120]	; (800b6a0 <__pow5mult+0xb0>)
 800b628:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b62c:	f001 fec0 	bl	800d3b0 <__assert_func>
 800b630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b634:	6004      	str	r4, [r0, #0]
 800b636:	60c4      	str	r4, [r0, #12]
 800b638:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b640:	b94c      	cbnz	r4, 800b656 <__pow5mult+0x66>
 800b642:	f240 2171 	movw	r1, #625	; 0x271
 800b646:	4630      	mov	r0, r6
 800b648:	f7ff ff12 	bl	800b470 <__i2b>
 800b64c:	2300      	movs	r3, #0
 800b64e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b652:	4604      	mov	r4, r0
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	f04f 0900 	mov.w	r9, #0
 800b65a:	07eb      	lsls	r3, r5, #31
 800b65c:	d50a      	bpl.n	800b674 <__pow5mult+0x84>
 800b65e:	4639      	mov	r1, r7
 800b660:	4622      	mov	r2, r4
 800b662:	4630      	mov	r0, r6
 800b664:	f7ff ff1a 	bl	800b49c <__multiply>
 800b668:	4639      	mov	r1, r7
 800b66a:	4680      	mov	r8, r0
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7ff fdff 	bl	800b270 <_Bfree>
 800b672:	4647      	mov	r7, r8
 800b674:	106d      	asrs	r5, r5, #1
 800b676:	d00b      	beq.n	800b690 <__pow5mult+0xa0>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	b938      	cbnz	r0, 800b68c <__pow5mult+0x9c>
 800b67c:	4622      	mov	r2, r4
 800b67e:	4621      	mov	r1, r4
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ff0b 	bl	800b49c <__multiply>
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	f8c0 9000 	str.w	r9, [r0]
 800b68c:	4604      	mov	r4, r0
 800b68e:	e7e4      	b.n	800b65a <__pow5mult+0x6a>
 800b690:	4638      	mov	r0, r7
 800b692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b696:	bf00      	nop
 800b698:	0800ed08 	.word	0x0800ed08
 800b69c:	0800eb38 	.word	0x0800eb38
 800b6a0:	0800ebb8 	.word	0x0800ebb8

0800b6a4 <__lshift>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	6849      	ldr	r1, [r1, #4]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	4607      	mov	r7, r0
 800b6b6:	4691      	mov	r9, r2
 800b6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6bc:	f108 0601 	add.w	r6, r8, #1
 800b6c0:	42b3      	cmp	r3, r6
 800b6c2:	db0b      	blt.n	800b6dc <__lshift+0x38>
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7ff fd93 	bl	800b1f0 <_Balloc>
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b948      	cbnz	r0, 800b6e2 <__lshift+0x3e>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b28      	ldr	r3, [pc, #160]	; (800b774 <__lshift+0xd0>)
 800b6d2:	4829      	ldr	r0, [pc, #164]	; (800b778 <__lshift+0xd4>)
 800b6d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b6d8:	f001 fe6a 	bl	800d3b0 <__assert_func>
 800b6dc:	3101      	adds	r1, #1
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	e7ee      	b.n	800b6c0 <__lshift+0x1c>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f100 0114 	add.w	r1, r0, #20
 800b6e8:	f100 0210 	add.w	r2, r0, #16
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	4553      	cmp	r3, sl
 800b6f0:	db33      	blt.n	800b75a <__lshift+0xb6>
 800b6f2:	6920      	ldr	r0, [r4, #16]
 800b6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f8:	f104 0314 	add.w	r3, r4, #20
 800b6fc:	f019 091f 	ands.w	r9, r9, #31
 800b700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b708:	d02b      	beq.n	800b762 <__lshift+0xbe>
 800b70a:	f1c9 0e20 	rsb	lr, r9, #32
 800b70e:	468a      	mov	sl, r1
 800b710:	2200      	movs	r2, #0
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	fa00 f009 	lsl.w	r0, r0, r9
 800b718:	4310      	orrs	r0, r2
 800b71a:	f84a 0b04 	str.w	r0, [sl], #4
 800b71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b722:	459c      	cmp	ip, r3
 800b724:	fa22 f20e 	lsr.w	r2, r2, lr
 800b728:	d8f3      	bhi.n	800b712 <__lshift+0x6e>
 800b72a:	ebac 0304 	sub.w	r3, ip, r4
 800b72e:	3b15      	subs	r3, #21
 800b730:	f023 0303 	bic.w	r3, r3, #3
 800b734:	3304      	adds	r3, #4
 800b736:	f104 0015 	add.w	r0, r4, #21
 800b73a:	4584      	cmp	ip, r0
 800b73c:	bf38      	it	cc
 800b73e:	2304      	movcc	r3, #4
 800b740:	50ca      	str	r2, [r1, r3]
 800b742:	b10a      	cbz	r2, 800b748 <__lshift+0xa4>
 800b744:	f108 0602 	add.w	r6, r8, #2
 800b748:	3e01      	subs	r6, #1
 800b74a:	4638      	mov	r0, r7
 800b74c:	612e      	str	r6, [r5, #16]
 800b74e:	4621      	mov	r1, r4
 800b750:	f7ff fd8e 	bl	800b270 <_Bfree>
 800b754:	4628      	mov	r0, r5
 800b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b75e:	3301      	adds	r3, #1
 800b760:	e7c5      	b.n	800b6ee <__lshift+0x4a>
 800b762:	3904      	subs	r1, #4
 800b764:	f853 2b04 	ldr.w	r2, [r3], #4
 800b768:	f841 2f04 	str.w	r2, [r1, #4]!
 800b76c:	459c      	cmp	ip, r3
 800b76e:	d8f9      	bhi.n	800b764 <__lshift+0xc0>
 800b770:	e7ea      	b.n	800b748 <__lshift+0xa4>
 800b772:	bf00      	nop
 800b774:	0800eba7 	.word	0x0800eba7
 800b778:	0800ebb8 	.word	0x0800ebb8

0800b77c <__mcmp>:
 800b77c:	b530      	push	{r4, r5, lr}
 800b77e:	6902      	ldr	r2, [r0, #16]
 800b780:	690c      	ldr	r4, [r1, #16]
 800b782:	1b12      	subs	r2, r2, r4
 800b784:	d10e      	bne.n	800b7a4 <__mcmp+0x28>
 800b786:	f100 0314 	add.w	r3, r0, #20
 800b78a:	3114      	adds	r1, #20
 800b78c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b790:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b794:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b79c:	42a5      	cmp	r5, r4
 800b79e:	d003      	beq.n	800b7a8 <__mcmp+0x2c>
 800b7a0:	d305      	bcc.n	800b7ae <__mcmp+0x32>
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	bd30      	pop	{r4, r5, pc}
 800b7a8:	4283      	cmp	r3, r0
 800b7aa:	d3f3      	bcc.n	800b794 <__mcmp+0x18>
 800b7ac:	e7fa      	b.n	800b7a4 <__mcmp+0x28>
 800b7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b2:	e7f7      	b.n	800b7a4 <__mcmp+0x28>

0800b7b4 <__mdiff>:
 800b7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4690      	mov	r8, r2
 800b7c2:	f7ff ffdb 	bl	800b77c <__mcmp>
 800b7c6:	1e05      	subs	r5, r0, #0
 800b7c8:	d110      	bne.n	800b7ec <__mdiff+0x38>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff fd0f 	bl	800b1f0 <_Balloc>
 800b7d2:	b930      	cbnz	r0, 800b7e2 <__mdiff+0x2e>
 800b7d4:	4b3a      	ldr	r3, [pc, #232]	; (800b8c0 <__mdiff+0x10c>)
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	f240 2137 	movw	r1, #567	; 0x237
 800b7dc:	4839      	ldr	r0, [pc, #228]	; (800b8c4 <__mdiff+0x110>)
 800b7de:	f001 fde7 	bl	800d3b0 <__assert_func>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	bfa4      	itt	ge
 800b7ee:	4643      	movge	r3, r8
 800b7f0:	46a0      	movge	r8, r4
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7f8:	bfa6      	itte	ge
 800b7fa:	461c      	movge	r4, r3
 800b7fc:	2500      	movge	r5, #0
 800b7fe:	2501      	movlt	r5, #1
 800b800:	f7ff fcf6 	bl	800b1f0 <_Balloc>
 800b804:	b920      	cbnz	r0, 800b810 <__mdiff+0x5c>
 800b806:	4b2e      	ldr	r3, [pc, #184]	; (800b8c0 <__mdiff+0x10c>)
 800b808:	4602      	mov	r2, r0
 800b80a:	f240 2145 	movw	r1, #581	; 0x245
 800b80e:	e7e5      	b.n	800b7dc <__mdiff+0x28>
 800b810:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b814:	6926      	ldr	r6, [r4, #16]
 800b816:	60c5      	str	r5, [r0, #12]
 800b818:	f104 0914 	add.w	r9, r4, #20
 800b81c:	f108 0514 	add.w	r5, r8, #20
 800b820:	f100 0e14 	add.w	lr, r0, #20
 800b824:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b82c:	f108 0210 	add.w	r2, r8, #16
 800b830:	46f2      	mov	sl, lr
 800b832:	2100      	movs	r1, #0
 800b834:	f859 3b04 	ldr.w	r3, [r9], #4
 800b838:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b83c:	fa11 f88b 	uxtah	r8, r1, fp
 800b840:	b299      	uxth	r1, r3
 800b842:	0c1b      	lsrs	r3, r3, #16
 800b844:	eba8 0801 	sub.w	r8, r8, r1
 800b848:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b84c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b850:	fa1f f888 	uxth.w	r8, r8
 800b854:	1419      	asrs	r1, r3, #16
 800b856:	454e      	cmp	r6, r9
 800b858:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b85c:	f84a 3b04 	str.w	r3, [sl], #4
 800b860:	d8e8      	bhi.n	800b834 <__mdiff+0x80>
 800b862:	1b33      	subs	r3, r6, r4
 800b864:	3b15      	subs	r3, #21
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	3304      	adds	r3, #4
 800b86c:	3415      	adds	r4, #21
 800b86e:	42a6      	cmp	r6, r4
 800b870:	bf38      	it	cc
 800b872:	2304      	movcc	r3, #4
 800b874:	441d      	add	r5, r3
 800b876:	4473      	add	r3, lr
 800b878:	469e      	mov	lr, r3
 800b87a:	462e      	mov	r6, r5
 800b87c:	4566      	cmp	r6, ip
 800b87e:	d30e      	bcc.n	800b89e <__mdiff+0xea>
 800b880:	f10c 0203 	add.w	r2, ip, #3
 800b884:	1b52      	subs	r2, r2, r5
 800b886:	f022 0203 	bic.w	r2, r2, #3
 800b88a:	3d03      	subs	r5, #3
 800b88c:	45ac      	cmp	ip, r5
 800b88e:	bf38      	it	cc
 800b890:	2200      	movcc	r2, #0
 800b892:	4413      	add	r3, r2
 800b894:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b898:	b17a      	cbz	r2, 800b8ba <__mdiff+0x106>
 800b89a:	6107      	str	r7, [r0, #16]
 800b89c:	e7a4      	b.n	800b7e8 <__mdiff+0x34>
 800b89e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8a2:	fa11 f288 	uxtah	r2, r1, r8
 800b8a6:	1414      	asrs	r4, r2, #16
 800b8a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8ac:	b292      	uxth	r2, r2
 800b8ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8b2:	f84e 2b04 	str.w	r2, [lr], #4
 800b8b6:	1421      	asrs	r1, r4, #16
 800b8b8:	e7e0      	b.n	800b87c <__mdiff+0xc8>
 800b8ba:	3f01      	subs	r7, #1
 800b8bc:	e7ea      	b.n	800b894 <__mdiff+0xe0>
 800b8be:	bf00      	nop
 800b8c0:	0800eba7 	.word	0x0800eba7
 800b8c4:	0800ebb8 	.word	0x0800ebb8

0800b8c8 <__ulp>:
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	ed8d 0b00 	vstr	d0, [sp]
 800b8ce:	9a01      	ldr	r2, [sp, #4]
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <__ulp+0x48>)
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	dc08      	bgt.n	800b8ee <__ulp+0x26>
 800b8dc:	425b      	negs	r3, r3
 800b8de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b8e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b8e6:	da04      	bge.n	800b8f2 <__ulp+0x2a>
 800b8e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8ec:	4113      	asrs	r3, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	e008      	b.n	800b904 <__ulp+0x3c>
 800b8f2:	f1a2 0314 	sub.w	r3, r2, #20
 800b8f6:	2b1e      	cmp	r3, #30
 800b8f8:	bfda      	itte	le
 800b8fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b8fe:	40da      	lsrle	r2, r3
 800b900:	2201      	movgt	r2, #1
 800b902:	2300      	movs	r3, #0
 800b904:	4619      	mov	r1, r3
 800b906:	4610      	mov	r0, r2
 800b908:	ec41 0b10 	vmov	d0, r0, r1
 800b90c:	b002      	add	sp, #8
 800b90e:	4770      	bx	lr
 800b910:	7ff00000 	.word	0x7ff00000

0800b914 <__b2d>:
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	6906      	ldr	r6, [r0, #16]
 800b91a:	f100 0814 	add.w	r8, r0, #20
 800b91e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b922:	1f37      	subs	r7, r6, #4
 800b924:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b928:	4610      	mov	r0, r2
 800b92a:	f7ff fd53 	bl	800b3d4 <__hi0bits>
 800b92e:	f1c0 0320 	rsb	r3, r0, #32
 800b932:	280a      	cmp	r0, #10
 800b934:	600b      	str	r3, [r1, #0]
 800b936:	491b      	ldr	r1, [pc, #108]	; (800b9a4 <__b2d+0x90>)
 800b938:	dc15      	bgt.n	800b966 <__b2d+0x52>
 800b93a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b93e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b942:	45b8      	cmp	r8, r7
 800b944:	ea43 0501 	orr.w	r5, r3, r1
 800b948:	bf34      	ite	cc
 800b94a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b94e:	2300      	movcs	r3, #0
 800b950:	3015      	adds	r0, #21
 800b952:	fa02 f000 	lsl.w	r0, r2, r0
 800b956:	fa23 f30c 	lsr.w	r3, r3, ip
 800b95a:	4303      	orrs	r3, r0
 800b95c:	461c      	mov	r4, r3
 800b95e:	ec45 4b10 	vmov	d0, r4, r5
 800b962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b966:	45b8      	cmp	r8, r7
 800b968:	bf3a      	itte	cc
 800b96a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b96e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b972:	2300      	movcs	r3, #0
 800b974:	380b      	subs	r0, #11
 800b976:	d012      	beq.n	800b99e <__b2d+0x8a>
 800b978:	f1c0 0120 	rsb	r1, r0, #32
 800b97c:	fa23 f401 	lsr.w	r4, r3, r1
 800b980:	4082      	lsls	r2, r0
 800b982:	4322      	orrs	r2, r4
 800b984:	4547      	cmp	r7, r8
 800b986:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b98a:	bf8c      	ite	hi
 800b98c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b990:	2200      	movls	r2, #0
 800b992:	4083      	lsls	r3, r0
 800b994:	40ca      	lsrs	r2, r1
 800b996:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b99a:	4313      	orrs	r3, r2
 800b99c:	e7de      	b.n	800b95c <__b2d+0x48>
 800b99e:	ea42 0501 	orr.w	r5, r2, r1
 800b9a2:	e7db      	b.n	800b95c <__b2d+0x48>
 800b9a4:	3ff00000 	.word	0x3ff00000

0800b9a8 <__d2b>:
 800b9a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9ac:	460f      	mov	r7, r1
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	ec59 8b10 	vmov	r8, r9, d0
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	f7ff fc1b 	bl	800b1f0 <_Balloc>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	b930      	cbnz	r0, 800b9cc <__d2b+0x24>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	4b24      	ldr	r3, [pc, #144]	; (800ba54 <__d2b+0xac>)
 800b9c2:	4825      	ldr	r0, [pc, #148]	; (800ba58 <__d2b+0xb0>)
 800b9c4:	f240 310f 	movw	r1, #783	; 0x30f
 800b9c8:	f001 fcf2 	bl	800d3b0 <__assert_func>
 800b9cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9d4:	bb2d      	cbnz	r5, 800ba22 <__d2b+0x7a>
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	f1b8 0300 	subs.w	r3, r8, #0
 800b9dc:	d026      	beq.n	800ba2c <__d2b+0x84>
 800b9de:	4668      	mov	r0, sp
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	f7ff fd17 	bl	800b414 <__lo0bits>
 800b9e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9ea:	b1e8      	cbz	r0, 800ba28 <__d2b+0x80>
 800b9ec:	f1c0 0320 	rsb	r3, r0, #32
 800b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	40c2      	lsrs	r2, r0
 800b9f8:	6163      	str	r3, [r4, #20]
 800b9fa:	9201      	str	r2, [sp, #4]
 800b9fc:	9b01      	ldr	r3, [sp, #4]
 800b9fe:	61a3      	str	r3, [r4, #24]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bf14      	ite	ne
 800ba04:	2202      	movne	r2, #2
 800ba06:	2201      	moveq	r2, #1
 800ba08:	6122      	str	r2, [r4, #16]
 800ba0a:	b1bd      	cbz	r5, 800ba3c <__d2b+0x94>
 800ba0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba10:	4405      	add	r5, r0
 800ba12:	603d      	str	r5, [r7, #0]
 800ba14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba18:	6030      	str	r0, [r6, #0]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	b003      	add	sp, #12
 800ba1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba26:	e7d6      	b.n	800b9d6 <__d2b+0x2e>
 800ba28:	6161      	str	r1, [r4, #20]
 800ba2a:	e7e7      	b.n	800b9fc <__d2b+0x54>
 800ba2c:	a801      	add	r0, sp, #4
 800ba2e:	f7ff fcf1 	bl	800b414 <__lo0bits>
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	6163      	str	r3, [r4, #20]
 800ba36:	3020      	adds	r0, #32
 800ba38:	2201      	movs	r2, #1
 800ba3a:	e7e5      	b.n	800ba08 <__d2b+0x60>
 800ba3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba44:	6038      	str	r0, [r7, #0]
 800ba46:	6918      	ldr	r0, [r3, #16]
 800ba48:	f7ff fcc4 	bl	800b3d4 <__hi0bits>
 800ba4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba50:	e7e2      	b.n	800ba18 <__d2b+0x70>
 800ba52:	bf00      	nop
 800ba54:	0800eba7 	.word	0x0800eba7
 800ba58:	0800ebb8 	.word	0x0800ebb8

0800ba5c <__ratio>:
 800ba5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	4688      	mov	r8, r1
 800ba62:	4669      	mov	r1, sp
 800ba64:	4681      	mov	r9, r0
 800ba66:	f7ff ff55 	bl	800b914 <__b2d>
 800ba6a:	a901      	add	r1, sp, #4
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	ec55 4b10 	vmov	r4, r5, d0
 800ba72:	ee10 aa10 	vmov	sl, s0
 800ba76:	f7ff ff4d 	bl	800b914 <__b2d>
 800ba7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ba7e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ba82:	1ad2      	subs	r2, r2, r3
 800ba84:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ba88:	1a5b      	subs	r3, r3, r1
 800ba8a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ba8e:	ec57 6b10 	vmov	r6, r7, d0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bfd6      	itet	le
 800ba96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba9a:	462a      	movgt	r2, r5
 800ba9c:	463a      	movle	r2, r7
 800ba9e:	46ab      	mov	fp, r5
 800baa0:	bfd6      	itet	le
 800baa2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800baa6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800baaa:	ee00 3a90 	vmovle	s1, r3
 800baae:	ec4b ab17 	vmov	d7, sl, fp
 800bab2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bab6:	b003      	add	sp, #12
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800babc <__copybits>:
 800babc:	3901      	subs	r1, #1
 800babe:	b570      	push	{r4, r5, r6, lr}
 800bac0:	1149      	asrs	r1, r1, #5
 800bac2:	6914      	ldr	r4, [r2, #16]
 800bac4:	3101      	adds	r1, #1
 800bac6:	f102 0314 	add.w	r3, r2, #20
 800baca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bace:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bad2:	1f05      	subs	r5, r0, #4
 800bad4:	42a3      	cmp	r3, r4
 800bad6:	d30c      	bcc.n	800baf2 <__copybits+0x36>
 800bad8:	1aa3      	subs	r3, r4, r2
 800bada:	3b11      	subs	r3, #17
 800badc:	f023 0303 	bic.w	r3, r3, #3
 800bae0:	3211      	adds	r2, #17
 800bae2:	42a2      	cmp	r2, r4
 800bae4:	bf88      	it	hi
 800bae6:	2300      	movhi	r3, #0
 800bae8:	4418      	add	r0, r3
 800baea:	2300      	movs	r3, #0
 800baec:	4288      	cmp	r0, r1
 800baee:	d305      	bcc.n	800bafc <__copybits+0x40>
 800baf0:	bd70      	pop	{r4, r5, r6, pc}
 800baf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800baf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800bafa:	e7eb      	b.n	800bad4 <__copybits+0x18>
 800bafc:	f840 3b04 	str.w	r3, [r0], #4
 800bb00:	e7f4      	b.n	800baec <__copybits+0x30>

0800bb02 <__any_on>:
 800bb02:	f100 0214 	add.w	r2, r0, #20
 800bb06:	6900      	ldr	r0, [r0, #16]
 800bb08:	114b      	asrs	r3, r1, #5
 800bb0a:	4298      	cmp	r0, r3
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	db11      	blt.n	800bb34 <__any_on+0x32>
 800bb10:	dd0a      	ble.n	800bb28 <__any_on+0x26>
 800bb12:	f011 011f 	ands.w	r1, r1, #31
 800bb16:	d007      	beq.n	800bb28 <__any_on+0x26>
 800bb18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb1c:	fa24 f001 	lsr.w	r0, r4, r1
 800bb20:	fa00 f101 	lsl.w	r1, r0, r1
 800bb24:	428c      	cmp	r4, r1
 800bb26:	d10b      	bne.n	800bb40 <__any_on+0x3e>
 800bb28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d803      	bhi.n	800bb38 <__any_on+0x36>
 800bb30:	2000      	movs	r0, #0
 800bb32:	bd10      	pop	{r4, pc}
 800bb34:	4603      	mov	r3, r0
 800bb36:	e7f7      	b.n	800bb28 <__any_on+0x26>
 800bb38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb3c:	2900      	cmp	r1, #0
 800bb3e:	d0f5      	beq.n	800bb2c <__any_on+0x2a>
 800bb40:	2001      	movs	r0, #1
 800bb42:	e7f6      	b.n	800bb32 <__any_on+0x30>

0800bb44 <sulp>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	4604      	mov	r4, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	4616      	mov	r6, r2
 800bb4c:	ec45 4b10 	vmov	d0, r4, r5
 800bb50:	f7ff feba 	bl	800b8c8 <__ulp>
 800bb54:	b17e      	cbz	r6, 800bb76 <sulp+0x32>
 800bb56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bb5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd09      	ble.n	800bb76 <sulp+0x32>
 800bb62:	051b      	lsls	r3, r3, #20
 800bb64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bb68:	2000      	movs	r0, #0
 800bb6a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bb6e:	ec41 0b17 	vmov	d7, r0, r1
 800bb72:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb76:	bd70      	pop	{r4, r5, r6, pc}

0800bb78 <_strtod_l>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	ed2d 8b0e 	vpush	{d8-d14}
 800bb80:	b097      	sub	sp, #92	; 0x5c
 800bb82:	4604      	mov	r4, r0
 800bb84:	920d      	str	r2, [sp, #52]	; 0x34
 800bb86:	2200      	movs	r2, #0
 800bb88:	9212      	str	r2, [sp, #72]	; 0x48
 800bb8a:	468a      	mov	sl, r1
 800bb8c:	f04f 0800 	mov.w	r8, #0
 800bb90:	f04f 0900 	mov.w	r9, #0
 800bb94:	460a      	mov	r2, r1
 800bb96:	9211      	str	r2, [sp, #68]	; 0x44
 800bb98:	7811      	ldrb	r1, [r2, #0]
 800bb9a:	292b      	cmp	r1, #43	; 0x2b
 800bb9c:	d04c      	beq.n	800bc38 <_strtod_l+0xc0>
 800bb9e:	d839      	bhi.n	800bc14 <_strtod_l+0x9c>
 800bba0:	290d      	cmp	r1, #13
 800bba2:	d833      	bhi.n	800bc0c <_strtod_l+0x94>
 800bba4:	2908      	cmp	r1, #8
 800bba6:	d833      	bhi.n	800bc10 <_strtod_l+0x98>
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d03c      	beq.n	800bc26 <_strtod_l+0xae>
 800bbac:	2200      	movs	r2, #0
 800bbae:	9208      	str	r2, [sp, #32]
 800bbb0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bbb2:	7832      	ldrb	r2, [r6, #0]
 800bbb4:	2a30      	cmp	r2, #48	; 0x30
 800bbb6:	f040 80b8 	bne.w	800bd2a <_strtod_l+0x1b2>
 800bbba:	7872      	ldrb	r2, [r6, #1]
 800bbbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bbc0:	2a58      	cmp	r2, #88	; 0x58
 800bbc2:	d170      	bne.n	800bca6 <_strtod_l+0x12e>
 800bbc4:	9302      	str	r3, [sp, #8]
 800bbc6:	9b08      	ldr	r3, [sp, #32]
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	ab12      	add	r3, sp, #72	; 0x48
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	4a91      	ldr	r2, [pc, #580]	; (800be14 <_strtod_l+0x29c>)
 800bbd0:	ab13      	add	r3, sp, #76	; 0x4c
 800bbd2:	a911      	add	r1, sp, #68	; 0x44
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f001 fc87 	bl	800d4e8 <__gethex>
 800bbda:	f010 070f 	ands.w	r7, r0, #15
 800bbde:	4605      	mov	r5, r0
 800bbe0:	d005      	beq.n	800bbee <_strtod_l+0x76>
 800bbe2:	2f06      	cmp	r7, #6
 800bbe4:	d12a      	bne.n	800bc3c <_strtod_l+0xc4>
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	2300      	movs	r3, #0
 800bbea:	9611      	str	r6, [sp, #68]	; 0x44
 800bbec:	9308      	str	r3, [sp, #32]
 800bbee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 8555 	bne.w	800c6a0 <_strtod_l+0xb28>
 800bbf6:	9b08      	ldr	r3, [sp, #32]
 800bbf8:	ec49 8b10 	vmov	d0, r8, r9
 800bbfc:	b1cb      	cbz	r3, 800bc32 <_strtod_l+0xba>
 800bbfe:	eeb1 0b40 	vneg.f64	d0, d0
 800bc02:	b017      	add	sp, #92	; 0x5c
 800bc04:	ecbd 8b0e 	vpop	{d8-d14}
 800bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0c:	2920      	cmp	r1, #32
 800bc0e:	d1cd      	bne.n	800bbac <_strtod_l+0x34>
 800bc10:	3201      	adds	r2, #1
 800bc12:	e7c0      	b.n	800bb96 <_strtod_l+0x1e>
 800bc14:	292d      	cmp	r1, #45	; 0x2d
 800bc16:	d1c9      	bne.n	800bbac <_strtod_l+0x34>
 800bc18:	2101      	movs	r1, #1
 800bc1a:	9108      	str	r1, [sp, #32]
 800bc1c:	1c51      	adds	r1, r2, #1
 800bc1e:	9111      	str	r1, [sp, #68]	; 0x44
 800bc20:	7852      	ldrb	r2, [r2, #1]
 800bc22:	2a00      	cmp	r2, #0
 800bc24:	d1c4      	bne.n	800bbb0 <_strtod_l+0x38>
 800bc26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc28:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f040 8535 	bne.w	800c69c <_strtod_l+0xb24>
 800bc32:	ec49 8b10 	vmov	d0, r8, r9
 800bc36:	e7e4      	b.n	800bc02 <_strtod_l+0x8a>
 800bc38:	2100      	movs	r1, #0
 800bc3a:	e7ee      	b.n	800bc1a <_strtod_l+0xa2>
 800bc3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc3e:	b13a      	cbz	r2, 800bc50 <_strtod_l+0xd8>
 800bc40:	2135      	movs	r1, #53	; 0x35
 800bc42:	a814      	add	r0, sp, #80	; 0x50
 800bc44:	f7ff ff3a 	bl	800babc <__copybits>
 800bc48:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7ff fb10 	bl	800b270 <_Bfree>
 800bc50:	1e7b      	subs	r3, r7, #1
 800bc52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d806      	bhi.n	800bc66 <_strtod_l+0xee>
 800bc58:	e8df f003 	tbb	[pc, r3]
 800bc5c:	201d0314 	.word	0x201d0314
 800bc60:	14          	.byte	0x14
 800bc61:	00          	.byte	0x00
 800bc62:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800bc66:	05eb      	lsls	r3, r5, #23
 800bc68:	bf48      	it	mi
 800bc6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bc6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc72:	0d1b      	lsrs	r3, r3, #20
 800bc74:	051b      	lsls	r3, r3, #20
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1b9      	bne.n	800bbee <_strtod_l+0x76>
 800bc7a:	f7fe fb81 	bl	800a380 <__errno>
 800bc7e:	2322      	movs	r3, #34	; 0x22
 800bc80:	6003      	str	r3, [r0, #0]
 800bc82:	e7b4      	b.n	800bbee <_strtod_l+0x76>
 800bc84:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800bc88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bc8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bc94:	e7e7      	b.n	800bc66 <_strtod_l+0xee>
 800bc96:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800be1c <_strtod_l+0x2a4>
 800bc9a:	e7e4      	b.n	800bc66 <_strtod_l+0xee>
 800bc9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bca0:	f04f 38ff 	mov.w	r8, #4294967295
 800bca4:	e7df      	b.n	800bc66 <_strtod_l+0xee>
 800bca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	9211      	str	r2, [sp, #68]	; 0x44
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	2b30      	cmp	r3, #48	; 0x30
 800bcb0:	d0f9      	beq.n	800bca6 <_strtod_l+0x12e>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d09b      	beq.n	800bbee <_strtod_l+0x76>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	9306      	str	r3, [sp, #24]
 800bcba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	9307      	str	r3, [sp, #28]
 800bcc4:	461e      	mov	r6, r3
 800bcc6:	220a      	movs	r2, #10
 800bcc8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bcca:	7805      	ldrb	r5, [r0, #0]
 800bccc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bcd0:	b2d9      	uxtb	r1, r3
 800bcd2:	2909      	cmp	r1, #9
 800bcd4:	d92b      	bls.n	800bd2e <_strtod_l+0x1b6>
 800bcd6:	4950      	ldr	r1, [pc, #320]	; (800be18 <_strtod_l+0x2a0>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f001 fb3c 	bl	800d356 <strncmp>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d035      	beq.n	800bd4e <_strtod_l+0x1d6>
 800bce2:	2000      	movs	r0, #0
 800bce4:	462a      	mov	r2, r5
 800bce6:	4633      	mov	r3, r6
 800bce8:	4683      	mov	fp, r0
 800bcea:	4601      	mov	r1, r0
 800bcec:	2a65      	cmp	r2, #101	; 0x65
 800bcee:	d001      	beq.n	800bcf4 <_strtod_l+0x17c>
 800bcf0:	2a45      	cmp	r2, #69	; 0x45
 800bcf2:	d118      	bne.n	800bd26 <_strtod_l+0x1ae>
 800bcf4:	b91b      	cbnz	r3, 800bcfe <_strtod_l+0x186>
 800bcf6:	9b06      	ldr	r3, [sp, #24]
 800bcf8:	4303      	orrs	r3, r0
 800bcfa:	d094      	beq.n	800bc26 <_strtod_l+0xae>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800bd02:	f10a 0201 	add.w	r2, sl, #1
 800bd06:	9211      	str	r2, [sp, #68]	; 0x44
 800bd08:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800bd0c:	2a2b      	cmp	r2, #43	; 0x2b
 800bd0e:	d075      	beq.n	800bdfc <_strtod_l+0x284>
 800bd10:	2a2d      	cmp	r2, #45	; 0x2d
 800bd12:	d07b      	beq.n	800be0c <_strtod_l+0x294>
 800bd14:	f04f 0e00 	mov.w	lr, #0
 800bd18:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bd1c:	2d09      	cmp	r5, #9
 800bd1e:	f240 8083 	bls.w	800be28 <_strtod_l+0x2b0>
 800bd22:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800bd26:	2500      	movs	r5, #0
 800bd28:	e09e      	b.n	800be68 <_strtod_l+0x2f0>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e7c4      	b.n	800bcb8 <_strtod_l+0x140>
 800bd2e:	2e08      	cmp	r6, #8
 800bd30:	bfd5      	itete	le
 800bd32:	9907      	ldrle	r1, [sp, #28]
 800bd34:	9905      	ldrgt	r1, [sp, #20]
 800bd36:	fb02 3301 	mlale	r3, r2, r1, r3
 800bd3a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bd3e:	f100 0001 	add.w	r0, r0, #1
 800bd42:	bfd4      	ite	le
 800bd44:	9307      	strle	r3, [sp, #28]
 800bd46:	9305      	strgt	r3, [sp, #20]
 800bd48:	3601      	adds	r6, #1
 800bd4a:	9011      	str	r0, [sp, #68]	; 0x44
 800bd4c:	e7bc      	b.n	800bcc8 <_strtod_l+0x150>
 800bd4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	9211      	str	r2, [sp, #68]	; 0x44
 800bd54:	785a      	ldrb	r2, [r3, #1]
 800bd56:	b3ae      	cbz	r6, 800bdc4 <_strtod_l+0x24c>
 800bd58:	4683      	mov	fp, r0
 800bd5a:	4633      	mov	r3, r6
 800bd5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bd60:	2909      	cmp	r1, #9
 800bd62:	d912      	bls.n	800bd8a <_strtod_l+0x212>
 800bd64:	2101      	movs	r1, #1
 800bd66:	e7c1      	b.n	800bcec <_strtod_l+0x174>
 800bd68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	9211      	str	r2, [sp, #68]	; 0x44
 800bd6e:	785a      	ldrb	r2, [r3, #1]
 800bd70:	3001      	adds	r0, #1
 800bd72:	2a30      	cmp	r2, #48	; 0x30
 800bd74:	d0f8      	beq.n	800bd68 <_strtod_l+0x1f0>
 800bd76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bd7a:	2b08      	cmp	r3, #8
 800bd7c:	f200 8495 	bhi.w	800c6aa <_strtod_l+0xb32>
 800bd80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd82:	9309      	str	r3, [sp, #36]	; 0x24
 800bd84:	4683      	mov	fp, r0
 800bd86:	2000      	movs	r0, #0
 800bd88:	4603      	mov	r3, r0
 800bd8a:	3a30      	subs	r2, #48	; 0x30
 800bd8c:	f100 0101 	add.w	r1, r0, #1
 800bd90:	d012      	beq.n	800bdb8 <_strtod_l+0x240>
 800bd92:	448b      	add	fp, r1
 800bd94:	eb00 0c03 	add.w	ip, r0, r3
 800bd98:	4619      	mov	r1, r3
 800bd9a:	250a      	movs	r5, #10
 800bd9c:	4561      	cmp	r1, ip
 800bd9e:	d113      	bne.n	800bdc8 <_strtod_l+0x250>
 800bda0:	1819      	adds	r1, r3, r0
 800bda2:	2908      	cmp	r1, #8
 800bda4:	f103 0301 	add.w	r3, r3, #1
 800bda8:	4403      	add	r3, r0
 800bdaa:	dc1b      	bgt.n	800bde4 <_strtod_l+0x26c>
 800bdac:	9807      	ldr	r0, [sp, #28]
 800bdae:	210a      	movs	r1, #10
 800bdb0:	fb01 2200 	mla	r2, r1, r0, r2
 800bdb4:	9207      	str	r2, [sp, #28]
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bdba:	1c50      	adds	r0, r2, #1
 800bdbc:	9011      	str	r0, [sp, #68]	; 0x44
 800bdbe:	7852      	ldrb	r2, [r2, #1]
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	e7cb      	b.n	800bd5c <_strtod_l+0x1e4>
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	e7d4      	b.n	800bd72 <_strtod_l+0x1fa>
 800bdc8:	2908      	cmp	r1, #8
 800bdca:	f101 0101 	add.w	r1, r1, #1
 800bdce:	dc03      	bgt.n	800bdd8 <_strtod_l+0x260>
 800bdd0:	9f07      	ldr	r7, [sp, #28]
 800bdd2:	436f      	muls	r7, r5
 800bdd4:	9707      	str	r7, [sp, #28]
 800bdd6:	e7e1      	b.n	800bd9c <_strtod_l+0x224>
 800bdd8:	2910      	cmp	r1, #16
 800bdda:	bfde      	ittt	le
 800bddc:	9f05      	ldrle	r7, [sp, #20]
 800bdde:	436f      	mulle	r7, r5
 800bde0:	9705      	strle	r7, [sp, #20]
 800bde2:	e7db      	b.n	800bd9c <_strtod_l+0x224>
 800bde4:	2b10      	cmp	r3, #16
 800bde6:	bfdf      	itttt	le
 800bde8:	9805      	ldrle	r0, [sp, #20]
 800bdea:	210a      	movle	r1, #10
 800bdec:	fb01 2200 	mlale	r2, r1, r0, r2
 800bdf0:	9205      	strle	r2, [sp, #20]
 800bdf2:	e7e0      	b.n	800bdb6 <_strtod_l+0x23e>
 800bdf4:	f04f 0b00 	mov.w	fp, #0
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	e77c      	b.n	800bcf6 <_strtod_l+0x17e>
 800bdfc:	f04f 0e00 	mov.w	lr, #0
 800be00:	f10a 0202 	add.w	r2, sl, #2
 800be04:	9211      	str	r2, [sp, #68]	; 0x44
 800be06:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800be0a:	e785      	b.n	800bd18 <_strtod_l+0x1a0>
 800be0c:	f04f 0e01 	mov.w	lr, #1
 800be10:	e7f6      	b.n	800be00 <_strtod_l+0x288>
 800be12:	bf00      	nop
 800be14:	0800ed18 	.word	0x0800ed18
 800be18:	0800ed14 	.word	0x0800ed14
 800be1c:	7ff00000 	.word	0x7ff00000
 800be20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be22:	1c55      	adds	r5, r2, #1
 800be24:	9511      	str	r5, [sp, #68]	; 0x44
 800be26:	7852      	ldrb	r2, [r2, #1]
 800be28:	2a30      	cmp	r2, #48	; 0x30
 800be2a:	d0f9      	beq.n	800be20 <_strtod_l+0x2a8>
 800be2c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800be30:	2d08      	cmp	r5, #8
 800be32:	f63f af78 	bhi.w	800bd26 <_strtod_l+0x1ae>
 800be36:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800be3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be3c:	920a      	str	r2, [sp, #40]	; 0x28
 800be3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be40:	1c55      	adds	r5, r2, #1
 800be42:	9511      	str	r5, [sp, #68]	; 0x44
 800be44:	7852      	ldrb	r2, [r2, #1]
 800be46:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800be4a:	2f09      	cmp	r7, #9
 800be4c:	d937      	bls.n	800bebe <_strtod_l+0x346>
 800be4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800be50:	1bed      	subs	r5, r5, r7
 800be52:	2d08      	cmp	r5, #8
 800be54:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800be58:	dc02      	bgt.n	800be60 <_strtod_l+0x2e8>
 800be5a:	4565      	cmp	r5, ip
 800be5c:	bfa8      	it	ge
 800be5e:	4665      	movge	r5, ip
 800be60:	f1be 0f00 	cmp.w	lr, #0
 800be64:	d000      	beq.n	800be68 <_strtod_l+0x2f0>
 800be66:	426d      	negs	r5, r5
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d14d      	bne.n	800bf08 <_strtod_l+0x390>
 800be6c:	9b06      	ldr	r3, [sp, #24]
 800be6e:	4303      	orrs	r3, r0
 800be70:	f47f aebd 	bne.w	800bbee <_strtod_l+0x76>
 800be74:	2900      	cmp	r1, #0
 800be76:	f47f aed6 	bne.w	800bc26 <_strtod_l+0xae>
 800be7a:	2a69      	cmp	r2, #105	; 0x69
 800be7c:	d027      	beq.n	800bece <_strtod_l+0x356>
 800be7e:	dc24      	bgt.n	800beca <_strtod_l+0x352>
 800be80:	2a49      	cmp	r2, #73	; 0x49
 800be82:	d024      	beq.n	800bece <_strtod_l+0x356>
 800be84:	2a4e      	cmp	r2, #78	; 0x4e
 800be86:	f47f aece 	bne.w	800bc26 <_strtod_l+0xae>
 800be8a:	4995      	ldr	r1, [pc, #596]	; (800c0e0 <_strtod_l+0x568>)
 800be8c:	a811      	add	r0, sp, #68	; 0x44
 800be8e:	f001 fd6b 	bl	800d968 <__match>
 800be92:	2800      	cmp	r0, #0
 800be94:	f43f aec7 	beq.w	800bc26 <_strtod_l+0xae>
 800be98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b28      	cmp	r3, #40	; 0x28
 800be9e:	d12d      	bne.n	800befc <_strtod_l+0x384>
 800bea0:	4990      	ldr	r1, [pc, #576]	; (800c0e4 <_strtod_l+0x56c>)
 800bea2:	aa14      	add	r2, sp, #80	; 0x50
 800bea4:	a811      	add	r0, sp, #68	; 0x44
 800bea6:	f001 fd73 	bl	800d990 <__hexnan>
 800beaa:	2805      	cmp	r0, #5
 800beac:	d126      	bne.n	800befc <_strtod_l+0x384>
 800beae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800beb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800beb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bebc:	e697      	b.n	800bbee <_strtod_l+0x76>
 800bebe:	250a      	movs	r5, #10
 800bec0:	fb05 2c0c 	mla	ip, r5, ip, r2
 800bec4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800bec8:	e7b9      	b.n	800be3e <_strtod_l+0x2c6>
 800beca:	2a6e      	cmp	r2, #110	; 0x6e
 800becc:	e7db      	b.n	800be86 <_strtod_l+0x30e>
 800bece:	4986      	ldr	r1, [pc, #536]	; (800c0e8 <_strtod_l+0x570>)
 800bed0:	a811      	add	r0, sp, #68	; 0x44
 800bed2:	f001 fd49 	bl	800d968 <__match>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f43f aea5 	beq.w	800bc26 <_strtod_l+0xae>
 800bedc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bede:	4983      	ldr	r1, [pc, #524]	; (800c0ec <_strtod_l+0x574>)
 800bee0:	3b01      	subs	r3, #1
 800bee2:	a811      	add	r0, sp, #68	; 0x44
 800bee4:	9311      	str	r3, [sp, #68]	; 0x44
 800bee6:	f001 fd3f 	bl	800d968 <__match>
 800beea:	b910      	cbnz	r0, 800bef2 <_strtod_l+0x37a>
 800beec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beee:	3301      	adds	r3, #1
 800bef0:	9311      	str	r3, [sp, #68]	; 0x44
 800bef2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c100 <_strtod_l+0x588>
 800bef6:	f04f 0800 	mov.w	r8, #0
 800befa:	e678      	b.n	800bbee <_strtod_l+0x76>
 800befc:	487c      	ldr	r0, [pc, #496]	; (800c0f0 <_strtod_l+0x578>)
 800befe:	f001 fa4f 	bl	800d3a0 <nan>
 800bf02:	ec59 8b10 	vmov	r8, r9, d0
 800bf06:	e672      	b.n	800bbee <_strtod_l+0x76>
 800bf08:	eddd 7a07 	vldr	s15, [sp, #28]
 800bf0c:	eba5 020b 	sub.w	r2, r5, fp
 800bf10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bf14:	2e00      	cmp	r6, #0
 800bf16:	bf08      	it	eq
 800bf18:	461e      	moveq	r6, r3
 800bf1a:	2b10      	cmp	r3, #16
 800bf1c:	9206      	str	r2, [sp, #24]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	bfa8      	it	ge
 800bf22:	2210      	movge	r2, #16
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	ec59 8b17 	vmov	r8, r9, d7
 800bf2a:	dd0c      	ble.n	800bf46 <_strtod_l+0x3ce>
 800bf2c:	4971      	ldr	r1, [pc, #452]	; (800c0f4 <_strtod_l+0x57c>)
 800bf2e:	eddd 6a05 	vldr	s13, [sp, #20]
 800bf32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bf36:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bf3a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bf3e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf42:	ec59 8b16 	vmov	r8, r9, d6
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	dc37      	bgt.n	800bfba <_strtod_l+0x442>
 800bf4a:	9906      	ldr	r1, [sp, #24]
 800bf4c:	2900      	cmp	r1, #0
 800bf4e:	f43f ae4e 	beq.w	800bbee <_strtod_l+0x76>
 800bf52:	dd23      	ble.n	800bf9c <_strtod_l+0x424>
 800bf54:	2916      	cmp	r1, #22
 800bf56:	dc0b      	bgt.n	800bf70 <_strtod_l+0x3f8>
 800bf58:	4b66      	ldr	r3, [pc, #408]	; (800c0f4 <_strtod_l+0x57c>)
 800bf5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bf5e:	ed93 7b00 	vldr	d7, [r3]
 800bf62:	ec49 8b16 	vmov	d6, r8, r9
 800bf66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf6a:	ec59 8b17 	vmov	r8, r9, d7
 800bf6e:	e63e      	b.n	800bbee <_strtod_l+0x76>
 800bf70:	9806      	ldr	r0, [sp, #24]
 800bf72:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800bf76:	4281      	cmp	r1, r0
 800bf78:	db1f      	blt.n	800bfba <_strtod_l+0x442>
 800bf7a:	4a5e      	ldr	r2, [pc, #376]	; (800c0f4 <_strtod_l+0x57c>)
 800bf7c:	f1c3 030f 	rsb	r3, r3, #15
 800bf80:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bf84:	ed91 7b00 	vldr	d7, [r1]
 800bf88:	ec49 8b16 	vmov	d6, r8, r9
 800bf8c:	1ac3      	subs	r3, r0, r3
 800bf8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bf92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf96:	ed92 6b00 	vldr	d6, [r2]
 800bf9a:	e7e4      	b.n	800bf66 <_strtod_l+0x3ee>
 800bf9c:	9906      	ldr	r1, [sp, #24]
 800bf9e:	3116      	adds	r1, #22
 800bfa0:	db0b      	blt.n	800bfba <_strtod_l+0x442>
 800bfa2:	4b54      	ldr	r3, [pc, #336]	; (800c0f4 <_strtod_l+0x57c>)
 800bfa4:	ebab 0505 	sub.w	r5, fp, r5
 800bfa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bfac:	ed95 7b00 	vldr	d7, [r5]
 800bfb0:	ec49 8b16 	vmov	d6, r8, r9
 800bfb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bfb8:	e7d7      	b.n	800bf6a <_strtod_l+0x3f2>
 800bfba:	9906      	ldr	r1, [sp, #24]
 800bfbc:	1a9a      	subs	r2, r3, r2
 800bfbe:	440a      	add	r2, r1
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	dd6e      	ble.n	800c0a2 <_strtod_l+0x52a>
 800bfc4:	f012 000f 	ands.w	r0, r2, #15
 800bfc8:	d00a      	beq.n	800bfe0 <_strtod_l+0x468>
 800bfca:	494a      	ldr	r1, [pc, #296]	; (800c0f4 <_strtod_l+0x57c>)
 800bfcc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bfd0:	ed91 7b00 	vldr	d7, [r1]
 800bfd4:	ec49 8b16 	vmov	d6, r8, r9
 800bfd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bfdc:	ec59 8b17 	vmov	r8, r9, d7
 800bfe0:	f032 020f 	bics.w	r2, r2, #15
 800bfe4:	d04e      	beq.n	800c084 <_strtod_l+0x50c>
 800bfe6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800bfea:	dd22      	ble.n	800c032 <_strtod_l+0x4ba>
 800bfec:	2500      	movs	r5, #0
 800bfee:	462e      	mov	r6, r5
 800bff0:	9507      	str	r5, [sp, #28]
 800bff2:	462f      	mov	r7, r5
 800bff4:	2322      	movs	r3, #34	; 0x22
 800bff6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c100 <_strtod_l+0x588>
 800bffa:	6023      	str	r3, [r4, #0]
 800bffc:	f04f 0800 	mov.w	r8, #0
 800c000:	9b07      	ldr	r3, [sp, #28]
 800c002:	2b00      	cmp	r3, #0
 800c004:	f43f adf3 	beq.w	800bbee <_strtod_l+0x76>
 800c008:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff f930 	bl	800b270 <_Bfree>
 800c010:	4639      	mov	r1, r7
 800c012:	4620      	mov	r0, r4
 800c014:	f7ff f92c 	bl	800b270 <_Bfree>
 800c018:	4631      	mov	r1, r6
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7ff f928 	bl	800b270 <_Bfree>
 800c020:	9907      	ldr	r1, [sp, #28]
 800c022:	4620      	mov	r0, r4
 800c024:	f7ff f924 	bl	800b270 <_Bfree>
 800c028:	4629      	mov	r1, r5
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff f920 	bl	800b270 <_Bfree>
 800c030:	e5dd      	b.n	800bbee <_strtod_l+0x76>
 800c032:	2000      	movs	r0, #0
 800c034:	ec49 8b17 	vmov	d7, r8, r9
 800c038:	4f2f      	ldr	r7, [pc, #188]	; (800c0f8 <_strtod_l+0x580>)
 800c03a:	1112      	asrs	r2, r2, #4
 800c03c:	4601      	mov	r1, r0
 800c03e:	2a01      	cmp	r2, #1
 800c040:	dc23      	bgt.n	800c08a <_strtod_l+0x512>
 800c042:	b108      	cbz	r0, 800c048 <_strtod_l+0x4d0>
 800c044:	ec59 8b17 	vmov	r8, r9, d7
 800c048:	4a2b      	ldr	r2, [pc, #172]	; (800c0f8 <_strtod_l+0x580>)
 800c04a:	482c      	ldr	r0, [pc, #176]	; (800c0fc <_strtod_l+0x584>)
 800c04c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c050:	ed92 7b00 	vldr	d7, [r2]
 800c054:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c058:	ec49 8b16 	vmov	d6, r8, r9
 800c05c:	4a28      	ldr	r2, [pc, #160]	; (800c100 <_strtod_l+0x588>)
 800c05e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c062:	ee17 1a90 	vmov	r1, s15
 800c066:	400a      	ands	r2, r1
 800c068:	4282      	cmp	r2, r0
 800c06a:	ec59 8b17 	vmov	r8, r9, d7
 800c06e:	d8bd      	bhi.n	800bfec <_strtod_l+0x474>
 800c070:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c074:	4282      	cmp	r2, r0
 800c076:	bf86      	itte	hi
 800c078:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c104 <_strtod_l+0x58c>
 800c07c:	f04f 38ff 	movhi.w	r8, #4294967295
 800c080:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c084:	2200      	movs	r2, #0
 800c086:	9205      	str	r2, [sp, #20]
 800c088:	e076      	b.n	800c178 <_strtod_l+0x600>
 800c08a:	f012 0f01 	tst.w	r2, #1
 800c08e:	d004      	beq.n	800c09a <_strtod_l+0x522>
 800c090:	ed97 6b00 	vldr	d6, [r7]
 800c094:	2001      	movs	r0, #1
 800c096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c09a:	3101      	adds	r1, #1
 800c09c:	1052      	asrs	r2, r2, #1
 800c09e:	3708      	adds	r7, #8
 800c0a0:	e7cd      	b.n	800c03e <_strtod_l+0x4c6>
 800c0a2:	d0ef      	beq.n	800c084 <_strtod_l+0x50c>
 800c0a4:	4252      	negs	r2, r2
 800c0a6:	f012 000f 	ands.w	r0, r2, #15
 800c0aa:	d00a      	beq.n	800c0c2 <_strtod_l+0x54a>
 800c0ac:	4911      	ldr	r1, [pc, #68]	; (800c0f4 <_strtod_l+0x57c>)
 800c0ae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c0b2:	ed91 7b00 	vldr	d7, [r1]
 800c0b6:	ec49 8b16 	vmov	d6, r8, r9
 800c0ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c0be:	ec59 8b17 	vmov	r8, r9, d7
 800c0c2:	1112      	asrs	r2, r2, #4
 800c0c4:	d0de      	beq.n	800c084 <_strtod_l+0x50c>
 800c0c6:	2a1f      	cmp	r2, #31
 800c0c8:	dd1e      	ble.n	800c108 <_strtod_l+0x590>
 800c0ca:	2500      	movs	r5, #0
 800c0cc:	462e      	mov	r6, r5
 800c0ce:	9507      	str	r5, [sp, #28]
 800c0d0:	462f      	mov	r7, r5
 800c0d2:	2322      	movs	r3, #34	; 0x22
 800c0d4:	f04f 0800 	mov.w	r8, #0
 800c0d8:	f04f 0900 	mov.w	r9, #0
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	e78f      	b.n	800c000 <_strtod_l+0x488>
 800c0e0:	0800eb01 	.word	0x0800eb01
 800c0e4:	0800ed2c 	.word	0x0800ed2c
 800c0e8:	0800eaf9 	.word	0x0800eaf9
 800c0ec:	0800eb2e 	.word	0x0800eb2e
 800c0f0:	0800eed8 	.word	0x0800eed8
 800c0f4:	0800ec40 	.word	0x0800ec40
 800c0f8:	0800ec18 	.word	0x0800ec18
 800c0fc:	7ca00000 	.word	0x7ca00000
 800c100:	7ff00000 	.word	0x7ff00000
 800c104:	7fefffff 	.word	0x7fefffff
 800c108:	f012 0110 	ands.w	r1, r2, #16
 800c10c:	bf18      	it	ne
 800c10e:	216a      	movne	r1, #106	; 0x6a
 800c110:	9105      	str	r1, [sp, #20]
 800c112:	ec49 8b17 	vmov	d7, r8, r9
 800c116:	49be      	ldr	r1, [pc, #760]	; (800c410 <_strtod_l+0x898>)
 800c118:	2000      	movs	r0, #0
 800c11a:	07d7      	lsls	r7, r2, #31
 800c11c:	d504      	bpl.n	800c128 <_strtod_l+0x5b0>
 800c11e:	ed91 6b00 	vldr	d6, [r1]
 800c122:	2001      	movs	r0, #1
 800c124:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c128:	1052      	asrs	r2, r2, #1
 800c12a:	f101 0108 	add.w	r1, r1, #8
 800c12e:	d1f4      	bne.n	800c11a <_strtod_l+0x5a2>
 800c130:	b108      	cbz	r0, 800c136 <_strtod_l+0x5be>
 800c132:	ec59 8b17 	vmov	r8, r9, d7
 800c136:	9a05      	ldr	r2, [sp, #20]
 800c138:	b1ba      	cbz	r2, 800c16a <_strtod_l+0x5f2>
 800c13a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c13e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c142:	2a00      	cmp	r2, #0
 800c144:	4648      	mov	r0, r9
 800c146:	dd10      	ble.n	800c16a <_strtod_l+0x5f2>
 800c148:	2a1f      	cmp	r2, #31
 800c14a:	f340 812c 	ble.w	800c3a6 <_strtod_l+0x82e>
 800c14e:	2a34      	cmp	r2, #52	; 0x34
 800c150:	bfde      	ittt	le
 800c152:	f04f 32ff 	movle.w	r2, #4294967295
 800c156:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c15a:	408a      	lslle	r2, r1
 800c15c:	f04f 0800 	mov.w	r8, #0
 800c160:	bfcc      	ite	gt
 800c162:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c166:	ea02 0900 	andle.w	r9, r2, r0
 800c16a:	ec49 8b17 	vmov	d7, r8, r9
 800c16e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c176:	d0a8      	beq.n	800c0ca <_strtod_l+0x552>
 800c178:	9a07      	ldr	r2, [sp, #28]
 800c17a:	9200      	str	r2, [sp, #0]
 800c17c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c17e:	4632      	mov	r2, r6
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff f8dd 	bl	800b340 <__s2b>
 800c186:	9007      	str	r0, [sp, #28]
 800c188:	2800      	cmp	r0, #0
 800c18a:	f43f af2f 	beq.w	800bfec <_strtod_l+0x474>
 800c18e:	9a06      	ldr	r2, [sp, #24]
 800c190:	2a00      	cmp	r2, #0
 800c192:	ebab 0305 	sub.w	r3, fp, r5
 800c196:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c3f0 <_strtod_l+0x878>
 800c19a:	bfa8      	it	ge
 800c19c:	2300      	movge	r3, #0
 800c19e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800c3f8 <_strtod_l+0x880>
 800c1a2:	ed9f bb97 	vldr	d11, [pc, #604]	; 800c400 <_strtod_l+0x888>
 800c1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c1ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c1b0:	462e      	mov	r6, r5
 800c1b2:	9b07      	ldr	r3, [sp, #28]
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	6859      	ldr	r1, [r3, #4]
 800c1b8:	f7ff f81a 	bl	800b1f0 <_Balloc>
 800c1bc:	4607      	mov	r7, r0
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	f43f af18 	beq.w	800bff4 <_strtod_l+0x47c>
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	3202      	adds	r2, #2
 800c1ca:	f103 010c 	add.w	r1, r3, #12
 800c1ce:	0092      	lsls	r2, r2, #2
 800c1d0:	300c      	adds	r0, #12
 800c1d2:	f7fe f902 	bl	800a3da <memcpy>
 800c1d6:	ec49 8b10 	vmov	d0, r8, r9
 800c1da:	aa14      	add	r2, sp, #80	; 0x50
 800c1dc:	a913      	add	r1, sp, #76	; 0x4c
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7ff fbe2 	bl	800b9a8 <__d2b>
 800c1e4:	ec49 8b18 	vmov	d8, r8, r9
 800c1e8:	9012      	str	r0, [sp, #72]	; 0x48
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	f43f af02 	beq.w	800bff4 <_strtod_l+0x47c>
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7ff f93c 	bl	800b470 <__i2b>
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	f43f aefa 	beq.w	800bff4 <_strtod_l+0x47c>
 800c200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c202:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c204:	2b00      	cmp	r3, #0
 800c206:	bfab      	itete	ge
 800c208:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c20a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c20c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c210:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c214:	bfac      	ite	ge
 800c216:	eb03 0b02 	addge.w	fp, r3, r2
 800c21a:	eba2 0a03 	sublt.w	sl, r2, r3
 800c21e:	9a05      	ldr	r2, [sp, #20]
 800c220:	1a9b      	subs	r3, r3, r2
 800c222:	440b      	add	r3, r1
 800c224:	4a7b      	ldr	r2, [pc, #492]	; (800c414 <_strtod_l+0x89c>)
 800c226:	3b01      	subs	r3, #1
 800c228:	4293      	cmp	r3, r2
 800c22a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c22e:	f280 80cd 	bge.w	800c3cc <_strtod_l+0x854>
 800c232:	1ad2      	subs	r2, r2, r3
 800c234:	2a1f      	cmp	r2, #31
 800c236:	eba1 0102 	sub.w	r1, r1, r2
 800c23a:	f04f 0001 	mov.w	r0, #1
 800c23e:	f300 80b9 	bgt.w	800c3b4 <_strtod_l+0x83c>
 800c242:	fa00 f302 	lsl.w	r3, r0, r2
 800c246:	930b      	str	r3, [sp, #44]	; 0x2c
 800c248:	2300      	movs	r3, #0
 800c24a:	930a      	str	r3, [sp, #40]	; 0x28
 800c24c:	eb0b 0301 	add.w	r3, fp, r1
 800c250:	9a05      	ldr	r2, [sp, #20]
 800c252:	459b      	cmp	fp, r3
 800c254:	448a      	add	sl, r1
 800c256:	4492      	add	sl, r2
 800c258:	465a      	mov	r2, fp
 800c25a:	bfa8      	it	ge
 800c25c:	461a      	movge	r2, r3
 800c25e:	4552      	cmp	r2, sl
 800c260:	bfa8      	it	ge
 800c262:	4652      	movge	r2, sl
 800c264:	2a00      	cmp	r2, #0
 800c266:	bfc2      	ittt	gt
 800c268:	1a9b      	subgt	r3, r3, r2
 800c26a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c26e:	ebab 0b02 	subgt.w	fp, fp, r2
 800c272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c274:	2a00      	cmp	r2, #0
 800c276:	dd18      	ble.n	800c2aa <_strtod_l+0x732>
 800c278:	4631      	mov	r1, r6
 800c27a:	4620      	mov	r0, r4
 800c27c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c27e:	f7ff f9b7 	bl	800b5f0 <__pow5mult>
 800c282:	4606      	mov	r6, r0
 800c284:	2800      	cmp	r0, #0
 800c286:	f43f aeb5 	beq.w	800bff4 <_strtod_l+0x47c>
 800c28a:	4601      	mov	r1, r0
 800c28c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c28e:	4620      	mov	r0, r4
 800c290:	f7ff f904 	bl	800b49c <__multiply>
 800c294:	900e      	str	r0, [sp, #56]	; 0x38
 800c296:	2800      	cmp	r0, #0
 800c298:	f43f aeac 	beq.w	800bff4 <_strtod_l+0x47c>
 800c29c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f7fe ffe6 	bl	800b270 <_Bfree>
 800c2a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a8:	9212      	str	r2, [sp, #72]	; 0x48
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f300 8093 	bgt.w	800c3d6 <_strtod_l+0x85e>
 800c2b0:	9b06      	ldr	r3, [sp, #24]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	dd08      	ble.n	800c2c8 <_strtod_l+0x750>
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f7ff f998 	bl	800b5f0 <__pow5mult>
 800c2c0:	4607      	mov	r7, r0
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	f43f ae96 	beq.w	800bff4 <_strtod_l+0x47c>
 800c2c8:	f1ba 0f00 	cmp.w	sl, #0
 800c2cc:	dd08      	ble.n	800c2e0 <_strtod_l+0x768>
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4652      	mov	r2, sl
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7ff f9e6 	bl	800b6a4 <__lshift>
 800c2d8:	4607      	mov	r7, r0
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	f43f ae8a 	beq.w	800bff4 <_strtod_l+0x47c>
 800c2e0:	f1bb 0f00 	cmp.w	fp, #0
 800c2e4:	dd08      	ble.n	800c2f8 <_strtod_l+0x780>
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	465a      	mov	r2, fp
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f7ff f9da 	bl	800b6a4 <__lshift>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f43f ae7e 	beq.w	800bff4 <_strtod_l+0x47c>
 800c2f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c2fa:	463a      	mov	r2, r7
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f7ff fa59 	bl	800b7b4 <__mdiff>
 800c302:	4605      	mov	r5, r0
 800c304:	2800      	cmp	r0, #0
 800c306:	f43f ae75 	beq.w	800bff4 <_strtod_l+0x47c>
 800c30a:	2300      	movs	r3, #0
 800c30c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c310:	60c3      	str	r3, [r0, #12]
 800c312:	4631      	mov	r1, r6
 800c314:	f7ff fa32 	bl	800b77c <__mcmp>
 800c318:	2800      	cmp	r0, #0
 800c31a:	da7f      	bge.n	800c41c <_strtod_l+0x8a4>
 800c31c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800c320:	f040 80a5 	bne.w	800c46e <_strtod_l+0x8f6>
 800c324:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 80a0 	bne.w	800c46e <_strtod_l+0x8f6>
 800c32e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c332:	0d1b      	lsrs	r3, r3, #20
 800c334:	051b      	lsls	r3, r3, #20
 800c336:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c33a:	f240 8098 	bls.w	800c46e <_strtod_l+0x8f6>
 800c33e:	696b      	ldr	r3, [r5, #20]
 800c340:	b91b      	cbnz	r3, 800c34a <_strtod_l+0x7d2>
 800c342:	692b      	ldr	r3, [r5, #16]
 800c344:	2b01      	cmp	r3, #1
 800c346:	f340 8092 	ble.w	800c46e <_strtod_l+0x8f6>
 800c34a:	4629      	mov	r1, r5
 800c34c:	2201      	movs	r2, #1
 800c34e:	4620      	mov	r0, r4
 800c350:	f7ff f9a8 	bl	800b6a4 <__lshift>
 800c354:	4631      	mov	r1, r6
 800c356:	4605      	mov	r5, r0
 800c358:	f7ff fa10 	bl	800b77c <__mcmp>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f340 8086 	ble.w	800c46e <_strtod_l+0x8f6>
 800c362:	9905      	ldr	r1, [sp, #20]
 800c364:	4a2c      	ldr	r2, [pc, #176]	; (800c418 <_strtod_l+0x8a0>)
 800c366:	464b      	mov	r3, r9
 800c368:	2900      	cmp	r1, #0
 800c36a:	f000 809f 	beq.w	800c4ac <_strtod_l+0x934>
 800c36e:	ea02 0109 	and.w	r1, r2, r9
 800c372:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c376:	f300 8099 	bgt.w	800c4ac <_strtod_l+0x934>
 800c37a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c37e:	f77f aea8 	ble.w	800c0d2 <_strtod_l+0x55a>
 800c382:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c408 <_strtod_l+0x890>
 800c386:	ec49 8b16 	vmov	d6, r8, r9
 800c38a:	4b23      	ldr	r3, [pc, #140]	; (800c418 <_strtod_l+0x8a0>)
 800c38c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c390:	ee17 2a90 	vmov	r2, s15
 800c394:	4013      	ands	r3, r2
 800c396:	ec59 8b17 	vmov	r8, r9, d7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f47f ae34 	bne.w	800c008 <_strtod_l+0x490>
 800c3a0:	2322      	movs	r3, #34	; 0x22
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	e630      	b.n	800c008 <_strtod_l+0x490>
 800c3a6:	f04f 31ff 	mov.w	r1, #4294967295
 800c3aa:	fa01 f202 	lsl.w	r2, r1, r2
 800c3ae:	ea02 0808 	and.w	r8, r2, r8
 800c3b2:	e6da      	b.n	800c16a <_strtod_l+0x5f2>
 800c3b4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c3b8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c3bc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c3c0:	33e2      	adds	r3, #226	; 0xe2
 800c3c2:	fa00 f303 	lsl.w	r3, r0, r3
 800c3c6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c3ca:	e73f      	b.n	800c24c <_strtod_l+0x6d4>
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c3d4:	e73a      	b.n	800c24c <_strtod_l+0x6d4>
 800c3d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f7ff f962 	bl	800b6a4 <__lshift>
 800c3e0:	9012      	str	r0, [sp, #72]	; 0x48
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f47f af64 	bne.w	800c2b0 <_strtod_l+0x738>
 800c3e8:	e604      	b.n	800bff4 <_strtod_l+0x47c>
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	94a03595 	.word	0x94a03595
 800c3f4:	3fcfffff 	.word	0x3fcfffff
 800c3f8:	94a03595 	.word	0x94a03595
 800c3fc:	3fdfffff 	.word	0x3fdfffff
 800c400:	35afe535 	.word	0x35afe535
 800c404:	3fe00000 	.word	0x3fe00000
 800c408:	00000000 	.word	0x00000000
 800c40c:	39500000 	.word	0x39500000
 800c410:	0800ed40 	.word	0x0800ed40
 800c414:	fffffc02 	.word	0xfffffc02
 800c418:	7ff00000 	.word	0x7ff00000
 800c41c:	46cb      	mov	fp, r9
 800c41e:	d15f      	bne.n	800c4e0 <_strtod_l+0x968>
 800c420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c424:	f1ba 0f00 	cmp.w	sl, #0
 800c428:	d02a      	beq.n	800c480 <_strtod_l+0x908>
 800c42a:	4aa7      	ldr	r2, [pc, #668]	; (800c6c8 <_strtod_l+0xb50>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d12b      	bne.n	800c488 <_strtod_l+0x910>
 800c430:	9b05      	ldr	r3, [sp, #20]
 800c432:	4642      	mov	r2, r8
 800c434:	b1fb      	cbz	r3, 800c476 <_strtod_l+0x8fe>
 800c436:	4ba5      	ldr	r3, [pc, #660]	; (800c6cc <_strtod_l+0xb54>)
 800c438:	ea09 0303 	and.w	r3, r9, r3
 800c43c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c440:	f04f 31ff 	mov.w	r1, #4294967295
 800c444:	d81a      	bhi.n	800c47c <_strtod_l+0x904>
 800c446:	0d1b      	lsrs	r3, r3, #20
 800c448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c44c:	fa01 f303 	lsl.w	r3, r1, r3
 800c450:	429a      	cmp	r2, r3
 800c452:	d119      	bne.n	800c488 <_strtod_l+0x910>
 800c454:	4b9e      	ldr	r3, [pc, #632]	; (800c6d0 <_strtod_l+0xb58>)
 800c456:	459b      	cmp	fp, r3
 800c458:	d102      	bne.n	800c460 <_strtod_l+0x8e8>
 800c45a:	3201      	adds	r2, #1
 800c45c:	f43f adca 	beq.w	800bff4 <_strtod_l+0x47c>
 800c460:	4b9a      	ldr	r3, [pc, #616]	; (800c6cc <_strtod_l+0xb54>)
 800c462:	ea0b 0303 	and.w	r3, fp, r3
 800c466:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	9b05      	ldr	r3, [sp, #20]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d186      	bne.n	800c382 <_strtod_l+0x80a>
 800c474:	e5c8      	b.n	800c008 <_strtod_l+0x490>
 800c476:	f04f 33ff 	mov.w	r3, #4294967295
 800c47a:	e7e9      	b.n	800c450 <_strtod_l+0x8d8>
 800c47c:	460b      	mov	r3, r1
 800c47e:	e7e7      	b.n	800c450 <_strtod_l+0x8d8>
 800c480:	ea53 0308 	orrs.w	r3, r3, r8
 800c484:	f43f af6d 	beq.w	800c362 <_strtod_l+0x7ea>
 800c488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48a:	b1cb      	cbz	r3, 800c4c0 <_strtod_l+0x948>
 800c48c:	ea13 0f0b 	tst.w	r3, fp
 800c490:	d0ed      	beq.n	800c46e <_strtod_l+0x8f6>
 800c492:	9a05      	ldr	r2, [sp, #20]
 800c494:	4640      	mov	r0, r8
 800c496:	4649      	mov	r1, r9
 800c498:	f1ba 0f00 	cmp.w	sl, #0
 800c49c:	d014      	beq.n	800c4c8 <_strtod_l+0x950>
 800c49e:	f7ff fb51 	bl	800bb44 <sulp>
 800c4a2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c4a6:	ec59 8b17 	vmov	r8, r9, d7
 800c4aa:	e7e0      	b.n	800c46e <_strtod_l+0x8f6>
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c4b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c4b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c4ba:	f04f 38ff 	mov.w	r8, #4294967295
 800c4be:	e7d6      	b.n	800c46e <_strtod_l+0x8f6>
 800c4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c2:	ea13 0f08 	tst.w	r3, r8
 800c4c6:	e7e3      	b.n	800c490 <_strtod_l+0x918>
 800c4c8:	f7ff fb3c 	bl	800bb44 <sulp>
 800c4cc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c4d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d8:	ec59 8b10 	vmov	r8, r9, d0
 800c4dc:	d1c7      	bne.n	800c46e <_strtod_l+0x8f6>
 800c4de:	e5f8      	b.n	800c0d2 <_strtod_l+0x55a>
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7ff faba 	bl	800ba5c <__ratio>
 800c4e8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c4ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f4:	d85f      	bhi.n	800c5b6 <_strtod_l+0xa3e>
 800c4f6:	f1ba 0f00 	cmp.w	sl, #0
 800c4fa:	d166      	bne.n	800c5ca <_strtod_l+0xa52>
 800c4fc:	f1b8 0f00 	cmp.w	r8, #0
 800c500:	d14d      	bne.n	800c59e <_strtod_l+0xa26>
 800c502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c506:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d162      	bne.n	800c5d4 <_strtod_l+0xa5c>
 800c50e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800c512:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51a:	d401      	bmi.n	800c520 <_strtod_l+0x9a8>
 800c51c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c520:	eeb1 cb4d 	vneg.f64	d12, d13
 800c524:	4869      	ldr	r0, [pc, #420]	; (800c6cc <_strtod_l+0xb54>)
 800c526:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800c6d8 <_strtod_l+0xb60>
 800c52a:	ea0b 0100 	and.w	r1, fp, r0
 800c52e:	4561      	cmp	r1, ip
 800c530:	ec53 2b1c 	vmov	r2, r3, d12
 800c534:	d17a      	bne.n	800c62c <_strtod_l+0xab4>
 800c536:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c53a:	ec49 8b10 	vmov	d0, r8, r9
 800c53e:	910a      	str	r1, [sp, #40]	; 0x28
 800c540:	f7ff f9c2 	bl	800b8c8 <__ulp>
 800c544:	ec49 8b1e 	vmov	d14, r8, r9
 800c548:	4860      	ldr	r0, [pc, #384]	; (800c6cc <_strtod_l+0xb54>)
 800c54a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800c54e:	ee1e 3a90 	vmov	r3, s29
 800c552:	4a60      	ldr	r2, [pc, #384]	; (800c6d4 <_strtod_l+0xb5c>)
 800c554:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c556:	4018      	ands	r0, r3
 800c558:	4290      	cmp	r0, r2
 800c55a:	ec59 8b1e 	vmov	r8, r9, d14
 800c55e:	d93c      	bls.n	800c5da <_strtod_l+0xa62>
 800c560:	ee18 2a90 	vmov	r2, s17
 800c564:	4b5a      	ldr	r3, [pc, #360]	; (800c6d0 <_strtod_l+0xb58>)
 800c566:	429a      	cmp	r2, r3
 800c568:	d104      	bne.n	800c574 <_strtod_l+0x9fc>
 800c56a:	ee18 3a10 	vmov	r3, s16
 800c56e:	3301      	adds	r3, #1
 800c570:	f43f ad40 	beq.w	800bff4 <_strtod_l+0x47c>
 800c574:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800c6d0 <_strtod_l+0xb58>
 800c578:	f04f 38ff 	mov.w	r8, #4294967295
 800c57c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c57e:	4620      	mov	r0, r4
 800c580:	f7fe fe76 	bl	800b270 <_Bfree>
 800c584:	4639      	mov	r1, r7
 800c586:	4620      	mov	r0, r4
 800c588:	f7fe fe72 	bl	800b270 <_Bfree>
 800c58c:	4631      	mov	r1, r6
 800c58e:	4620      	mov	r0, r4
 800c590:	f7fe fe6e 	bl	800b270 <_Bfree>
 800c594:	4629      	mov	r1, r5
 800c596:	4620      	mov	r0, r4
 800c598:	f7fe fe6a 	bl	800b270 <_Bfree>
 800c59c:	e609      	b.n	800c1b2 <_strtod_l+0x63a>
 800c59e:	f1b8 0f01 	cmp.w	r8, #1
 800c5a2:	d103      	bne.n	800c5ac <_strtod_l+0xa34>
 800c5a4:	f1b9 0f00 	cmp.w	r9, #0
 800c5a8:	f43f ad93 	beq.w	800c0d2 <_strtod_l+0x55a>
 800c5ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c5b0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c5b4:	e7b6      	b.n	800c524 <_strtod_l+0x9ac>
 800c5b6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c5ba:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c5be:	f1ba 0f00 	cmp.w	sl, #0
 800c5c2:	d0ad      	beq.n	800c520 <_strtod_l+0x9a8>
 800c5c4:	eeb0 cb4d 	vmov.f64	d12, d13
 800c5c8:	e7ac      	b.n	800c524 <_strtod_l+0x9ac>
 800c5ca:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800c5ce:	eeb0 db4c 	vmov.f64	d13, d12
 800c5d2:	e7a7      	b.n	800c524 <_strtod_l+0x9ac>
 800c5d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c5d8:	e7a4      	b.n	800c524 <_strtod_l+0x9ac>
 800c5da:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c5de:	9b05      	ldr	r3, [sp, #20]
 800c5e0:	46cb      	mov	fp, r9
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1ca      	bne.n	800c57c <_strtod_l+0xa04>
 800c5e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5ea:	0d1b      	lsrs	r3, r3, #20
 800c5ec:	051b      	lsls	r3, r3, #20
 800c5ee:	4299      	cmp	r1, r3
 800c5f0:	d1c4      	bne.n	800c57c <_strtod_l+0xa04>
 800c5f2:	ec51 0b1d 	vmov	r0, r1, d13
 800c5f6:	f7f4 f89f 	bl	8000738 <__aeabi_d2lz>
 800c5fa:	f7f4 f807 	bl	800060c <__aeabi_l2d>
 800c5fe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800c602:	ec41 0b17 	vmov	d7, r0, r1
 800c606:	ea4b 0b08 	orr.w	fp, fp, r8
 800c60a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800c60e:	ee3d db47 	vsub.f64	d13, d13, d7
 800c612:	d03c      	beq.n	800c68e <_strtod_l+0xb16>
 800c614:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61c:	f53f acf4 	bmi.w	800c008 <_strtod_l+0x490>
 800c620:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c628:	dda8      	ble.n	800c57c <_strtod_l+0xa04>
 800c62a:	e4ed      	b.n	800c008 <_strtod_l+0x490>
 800c62c:	9805      	ldr	r0, [sp, #20]
 800c62e:	b1f0      	cbz	r0, 800c66e <_strtod_l+0xaf6>
 800c630:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c634:	d81b      	bhi.n	800c66e <_strtod_l+0xaf6>
 800c636:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c6c0 <_strtod_l+0xb48>
 800c63a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c642:	d811      	bhi.n	800c668 <_strtod_l+0xaf0>
 800c644:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c648:	ee1d 3a10 	vmov	r3, s26
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	bf38      	it	cc
 800c650:	2301      	movcc	r3, #1
 800c652:	ee0d 3a10 	vmov	s26, r3
 800c656:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c65a:	f1ba 0f00 	cmp.w	sl, #0
 800c65e:	d113      	bne.n	800c688 <_strtod_l+0xb10>
 800c660:	eeb1 7b4d 	vneg.f64	d7, d13
 800c664:	ec53 2b17 	vmov	r2, r3, d7
 800c668:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c66c:	1a43      	subs	r3, r0, r1
 800c66e:	eeb0 0b48 	vmov.f64	d0, d8
 800c672:	ec43 2b1c 	vmov	d12, r2, r3
 800c676:	910a      	str	r1, [sp, #40]	; 0x28
 800c678:	f7ff f926 	bl	800b8c8 <__ulp>
 800c67c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c67e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c682:	ec59 8b18 	vmov	r8, r9, d8
 800c686:	e7aa      	b.n	800c5de <_strtod_l+0xa66>
 800c688:	eeb0 7b4d 	vmov.f64	d7, d13
 800c68c:	e7ea      	b.n	800c664 <_strtod_l+0xaec>
 800c68e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c696:	f57f af71 	bpl.w	800c57c <_strtod_l+0xa04>
 800c69a:	e4b5      	b.n	800c008 <_strtod_l+0x490>
 800c69c:	2300      	movs	r3, #0
 800c69e:	9308      	str	r3, [sp, #32]
 800c6a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	f7ff baa6 	b.w	800bbf6 <_strtod_l+0x7e>
 800c6aa:	2a65      	cmp	r2, #101	; 0x65
 800c6ac:	f43f aba2 	beq.w	800bdf4 <_strtod_l+0x27c>
 800c6b0:	2a45      	cmp	r2, #69	; 0x45
 800c6b2:	f43f ab9f 	beq.w	800bdf4 <_strtod_l+0x27c>
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	f7ff bbd8 	b.w	800be6c <_strtod_l+0x2f4>
 800c6bc:	f3af 8000 	nop.w
 800c6c0:	ffc00000 	.word	0xffc00000
 800c6c4:	41dfffff 	.word	0x41dfffff
 800c6c8:	000fffff 	.word	0x000fffff
 800c6cc:	7ff00000 	.word	0x7ff00000
 800c6d0:	7fefffff 	.word	0x7fefffff
 800c6d4:	7c9fffff 	.word	0x7c9fffff
 800c6d8:	7fe00000 	.word	0x7fe00000

0800c6dc <_strtod_r>:
 800c6dc:	4b01      	ldr	r3, [pc, #4]	; (800c6e4 <_strtod_r+0x8>)
 800c6de:	f7ff ba4b 	b.w	800bb78 <_strtod_l>
 800c6e2:	bf00      	nop
 800c6e4:	2000007c 	.word	0x2000007c

0800c6e8 <_strtol_l.constprop.0>:
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ee:	d001      	beq.n	800c6f4 <_strtol_l.constprop.0+0xc>
 800c6f0:	2b24      	cmp	r3, #36	; 0x24
 800c6f2:	d906      	bls.n	800c702 <_strtol_l.constprop.0+0x1a>
 800c6f4:	f7fd fe44 	bl	800a380 <__errno>
 800c6f8:	2316      	movs	r3, #22
 800c6fa:	6003      	str	r3, [r0, #0]
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c702:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c7e8 <_strtol_l.constprop.0+0x100>
 800c706:	460d      	mov	r5, r1
 800c708:	462e      	mov	r6, r5
 800c70a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c70e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c712:	f017 0708 	ands.w	r7, r7, #8
 800c716:	d1f7      	bne.n	800c708 <_strtol_l.constprop.0+0x20>
 800c718:	2c2d      	cmp	r4, #45	; 0x2d
 800c71a:	d132      	bne.n	800c782 <_strtol_l.constprop.0+0x9a>
 800c71c:	782c      	ldrb	r4, [r5, #0]
 800c71e:	2701      	movs	r7, #1
 800c720:	1cb5      	adds	r5, r6, #2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d05b      	beq.n	800c7de <_strtol_l.constprop.0+0xf6>
 800c726:	2b10      	cmp	r3, #16
 800c728:	d109      	bne.n	800c73e <_strtol_l.constprop.0+0x56>
 800c72a:	2c30      	cmp	r4, #48	; 0x30
 800c72c:	d107      	bne.n	800c73e <_strtol_l.constprop.0+0x56>
 800c72e:	782c      	ldrb	r4, [r5, #0]
 800c730:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c734:	2c58      	cmp	r4, #88	; 0x58
 800c736:	d14d      	bne.n	800c7d4 <_strtol_l.constprop.0+0xec>
 800c738:	786c      	ldrb	r4, [r5, #1]
 800c73a:	2310      	movs	r3, #16
 800c73c:	3502      	adds	r5, #2
 800c73e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c742:	f108 38ff 	add.w	r8, r8, #4294967295
 800c746:	f04f 0e00 	mov.w	lr, #0
 800c74a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c74e:	4676      	mov	r6, lr
 800c750:	fb03 8a19 	mls	sl, r3, r9, r8
 800c754:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c758:	f1bc 0f09 	cmp.w	ip, #9
 800c75c:	d816      	bhi.n	800c78c <_strtol_l.constprop.0+0xa4>
 800c75e:	4664      	mov	r4, ip
 800c760:	42a3      	cmp	r3, r4
 800c762:	dd24      	ble.n	800c7ae <_strtol_l.constprop.0+0xc6>
 800c764:	f1be 3fff 	cmp.w	lr, #4294967295
 800c768:	d008      	beq.n	800c77c <_strtol_l.constprop.0+0x94>
 800c76a:	45b1      	cmp	r9, r6
 800c76c:	d31c      	bcc.n	800c7a8 <_strtol_l.constprop.0+0xc0>
 800c76e:	d101      	bne.n	800c774 <_strtol_l.constprop.0+0x8c>
 800c770:	45a2      	cmp	sl, r4
 800c772:	db19      	blt.n	800c7a8 <_strtol_l.constprop.0+0xc0>
 800c774:	fb06 4603 	mla	r6, r6, r3, r4
 800c778:	f04f 0e01 	mov.w	lr, #1
 800c77c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c780:	e7e8      	b.n	800c754 <_strtol_l.constprop.0+0x6c>
 800c782:	2c2b      	cmp	r4, #43	; 0x2b
 800c784:	bf04      	itt	eq
 800c786:	782c      	ldrbeq	r4, [r5, #0]
 800c788:	1cb5      	addeq	r5, r6, #2
 800c78a:	e7ca      	b.n	800c722 <_strtol_l.constprop.0+0x3a>
 800c78c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c790:	f1bc 0f19 	cmp.w	ip, #25
 800c794:	d801      	bhi.n	800c79a <_strtol_l.constprop.0+0xb2>
 800c796:	3c37      	subs	r4, #55	; 0x37
 800c798:	e7e2      	b.n	800c760 <_strtol_l.constprop.0+0x78>
 800c79a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c79e:	f1bc 0f19 	cmp.w	ip, #25
 800c7a2:	d804      	bhi.n	800c7ae <_strtol_l.constprop.0+0xc6>
 800c7a4:	3c57      	subs	r4, #87	; 0x57
 800c7a6:	e7db      	b.n	800c760 <_strtol_l.constprop.0+0x78>
 800c7a8:	f04f 3eff 	mov.w	lr, #4294967295
 800c7ac:	e7e6      	b.n	800c77c <_strtol_l.constprop.0+0x94>
 800c7ae:	f1be 3fff 	cmp.w	lr, #4294967295
 800c7b2:	d105      	bne.n	800c7c0 <_strtol_l.constprop.0+0xd8>
 800c7b4:	2322      	movs	r3, #34	; 0x22
 800c7b6:	6003      	str	r3, [r0, #0]
 800c7b8:	4646      	mov	r6, r8
 800c7ba:	b942      	cbnz	r2, 800c7ce <_strtol_l.constprop.0+0xe6>
 800c7bc:	4630      	mov	r0, r6
 800c7be:	e79e      	b.n	800c6fe <_strtol_l.constprop.0+0x16>
 800c7c0:	b107      	cbz	r7, 800c7c4 <_strtol_l.constprop.0+0xdc>
 800c7c2:	4276      	negs	r6, r6
 800c7c4:	2a00      	cmp	r2, #0
 800c7c6:	d0f9      	beq.n	800c7bc <_strtol_l.constprop.0+0xd4>
 800c7c8:	f1be 0f00 	cmp.w	lr, #0
 800c7cc:	d000      	beq.n	800c7d0 <_strtol_l.constprop.0+0xe8>
 800c7ce:	1e69      	subs	r1, r5, #1
 800c7d0:	6011      	str	r1, [r2, #0]
 800c7d2:	e7f3      	b.n	800c7bc <_strtol_l.constprop.0+0xd4>
 800c7d4:	2430      	movs	r4, #48	; 0x30
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1b1      	bne.n	800c73e <_strtol_l.constprop.0+0x56>
 800c7da:	2308      	movs	r3, #8
 800c7dc:	e7af      	b.n	800c73e <_strtol_l.constprop.0+0x56>
 800c7de:	2c30      	cmp	r4, #48	; 0x30
 800c7e0:	d0a5      	beq.n	800c72e <_strtol_l.constprop.0+0x46>
 800c7e2:	230a      	movs	r3, #10
 800c7e4:	e7ab      	b.n	800c73e <_strtol_l.constprop.0+0x56>
 800c7e6:	bf00      	nop
 800c7e8:	0800ed69 	.word	0x0800ed69

0800c7ec <_strtol_r>:
 800c7ec:	f7ff bf7c 	b.w	800c6e8 <_strtol_l.constprop.0>

0800c7f0 <__ssputs_r>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	688e      	ldr	r6, [r1, #8]
 800c7f6:	461f      	mov	r7, r3
 800c7f8:	42be      	cmp	r6, r7
 800c7fa:	680b      	ldr	r3, [r1, #0]
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	4690      	mov	r8, r2
 800c802:	d82c      	bhi.n	800c85e <__ssputs_r+0x6e>
 800c804:	898a      	ldrh	r2, [r1, #12]
 800c806:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c80a:	d026      	beq.n	800c85a <__ssputs_r+0x6a>
 800c80c:	6965      	ldr	r5, [r4, #20]
 800c80e:	6909      	ldr	r1, [r1, #16]
 800c810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c814:	eba3 0901 	sub.w	r9, r3, r1
 800c818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c81c:	1c7b      	adds	r3, r7, #1
 800c81e:	444b      	add	r3, r9
 800c820:	106d      	asrs	r5, r5, #1
 800c822:	429d      	cmp	r5, r3
 800c824:	bf38      	it	cc
 800c826:	461d      	movcc	r5, r3
 800c828:	0553      	lsls	r3, r2, #21
 800c82a:	d527      	bpl.n	800c87c <__ssputs_r+0x8c>
 800c82c:	4629      	mov	r1, r5
 800c82e:	f7fe fc53 	bl	800b0d8 <_malloc_r>
 800c832:	4606      	mov	r6, r0
 800c834:	b360      	cbz	r0, 800c890 <__ssputs_r+0xa0>
 800c836:	6921      	ldr	r1, [r4, #16]
 800c838:	464a      	mov	r2, r9
 800c83a:	f7fd fdce 	bl	800a3da <memcpy>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c848:	81a3      	strh	r3, [r4, #12]
 800c84a:	6126      	str	r6, [r4, #16]
 800c84c:	6165      	str	r5, [r4, #20]
 800c84e:	444e      	add	r6, r9
 800c850:	eba5 0509 	sub.w	r5, r5, r9
 800c854:	6026      	str	r6, [r4, #0]
 800c856:	60a5      	str	r5, [r4, #8]
 800c858:	463e      	mov	r6, r7
 800c85a:	42be      	cmp	r6, r7
 800c85c:	d900      	bls.n	800c860 <__ssputs_r+0x70>
 800c85e:	463e      	mov	r6, r7
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	4632      	mov	r2, r6
 800c864:	4641      	mov	r1, r8
 800c866:	f000 fd5c 	bl	800d322 <memmove>
 800c86a:	68a3      	ldr	r3, [r4, #8]
 800c86c:	1b9b      	subs	r3, r3, r6
 800c86e:	60a3      	str	r3, [r4, #8]
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	4433      	add	r3, r6
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	2000      	movs	r0, #0
 800c878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87c:	462a      	mov	r2, r5
 800c87e:	f001 f934 	bl	800daea <_realloc_r>
 800c882:	4606      	mov	r6, r0
 800c884:	2800      	cmp	r0, #0
 800c886:	d1e0      	bne.n	800c84a <__ssputs_r+0x5a>
 800c888:	6921      	ldr	r1, [r4, #16]
 800c88a:	4650      	mov	r0, sl
 800c88c:	f7fe fbb0 	bl	800aff0 <_free_r>
 800c890:	230c      	movs	r3, #12
 800c892:	f8ca 3000 	str.w	r3, [sl]
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a2:	e7e9      	b.n	800c878 <__ssputs_r+0x88>

0800c8a4 <_svfiprintf_r>:
 800c8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a8:	4698      	mov	r8, r3
 800c8aa:	898b      	ldrh	r3, [r1, #12]
 800c8ac:	061b      	lsls	r3, r3, #24
 800c8ae:	b09d      	sub	sp, #116	; 0x74
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	d50e      	bpl.n	800c8d6 <_svfiprintf_r+0x32>
 800c8b8:	690b      	ldr	r3, [r1, #16]
 800c8ba:	b963      	cbnz	r3, 800c8d6 <_svfiprintf_r+0x32>
 800c8bc:	2140      	movs	r1, #64	; 0x40
 800c8be:	f7fe fc0b 	bl	800b0d8 <_malloc_r>
 800c8c2:	6028      	str	r0, [r5, #0]
 800c8c4:	6128      	str	r0, [r5, #16]
 800c8c6:	b920      	cbnz	r0, 800c8d2 <_svfiprintf_r+0x2e>
 800c8c8:	230c      	movs	r3, #12
 800c8ca:	603b      	str	r3, [r7, #0]
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e0d0      	b.n	800ca74 <_svfiprintf_r+0x1d0>
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	616b      	str	r3, [r5, #20]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8da:	2320      	movs	r3, #32
 800c8dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8e4:	2330      	movs	r3, #48	; 0x30
 800c8e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ca8c <_svfiprintf_r+0x1e8>
 800c8ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ee:	f04f 0901 	mov.w	r9, #1
 800c8f2:	4623      	mov	r3, r4
 800c8f4:	469a      	mov	sl, r3
 800c8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8fa:	b10a      	cbz	r2, 800c900 <_svfiprintf_r+0x5c>
 800c8fc:	2a25      	cmp	r2, #37	; 0x25
 800c8fe:	d1f9      	bne.n	800c8f4 <_svfiprintf_r+0x50>
 800c900:	ebba 0b04 	subs.w	fp, sl, r4
 800c904:	d00b      	beq.n	800c91e <_svfiprintf_r+0x7a>
 800c906:	465b      	mov	r3, fp
 800c908:	4622      	mov	r2, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	4638      	mov	r0, r7
 800c90e:	f7ff ff6f 	bl	800c7f0 <__ssputs_r>
 800c912:	3001      	adds	r0, #1
 800c914:	f000 80a9 	beq.w	800ca6a <_svfiprintf_r+0x1c6>
 800c918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c91a:	445a      	add	r2, fp
 800c91c:	9209      	str	r2, [sp, #36]	; 0x24
 800c91e:	f89a 3000 	ldrb.w	r3, [sl]
 800c922:	2b00      	cmp	r3, #0
 800c924:	f000 80a1 	beq.w	800ca6a <_svfiprintf_r+0x1c6>
 800c928:	2300      	movs	r3, #0
 800c92a:	f04f 32ff 	mov.w	r2, #4294967295
 800c92e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c932:	f10a 0a01 	add.w	sl, sl, #1
 800c936:	9304      	str	r3, [sp, #16]
 800c938:	9307      	str	r3, [sp, #28]
 800c93a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c93e:	931a      	str	r3, [sp, #104]	; 0x68
 800c940:	4654      	mov	r4, sl
 800c942:	2205      	movs	r2, #5
 800c944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c948:	4850      	ldr	r0, [pc, #320]	; (800ca8c <_svfiprintf_r+0x1e8>)
 800c94a:	f7f3 fc79 	bl	8000240 <memchr>
 800c94e:	9a04      	ldr	r2, [sp, #16]
 800c950:	b9d8      	cbnz	r0, 800c98a <_svfiprintf_r+0xe6>
 800c952:	06d0      	lsls	r0, r2, #27
 800c954:	bf44      	itt	mi
 800c956:	2320      	movmi	r3, #32
 800c958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95c:	0711      	lsls	r1, r2, #28
 800c95e:	bf44      	itt	mi
 800c960:	232b      	movmi	r3, #43	; 0x2b
 800c962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c966:	f89a 3000 	ldrb.w	r3, [sl]
 800c96a:	2b2a      	cmp	r3, #42	; 0x2a
 800c96c:	d015      	beq.n	800c99a <_svfiprintf_r+0xf6>
 800c96e:	9a07      	ldr	r2, [sp, #28]
 800c970:	4654      	mov	r4, sl
 800c972:	2000      	movs	r0, #0
 800c974:	f04f 0c0a 	mov.w	ip, #10
 800c978:	4621      	mov	r1, r4
 800c97a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c97e:	3b30      	subs	r3, #48	; 0x30
 800c980:	2b09      	cmp	r3, #9
 800c982:	d94d      	bls.n	800ca20 <_svfiprintf_r+0x17c>
 800c984:	b1b0      	cbz	r0, 800c9b4 <_svfiprintf_r+0x110>
 800c986:	9207      	str	r2, [sp, #28]
 800c988:	e014      	b.n	800c9b4 <_svfiprintf_r+0x110>
 800c98a:	eba0 0308 	sub.w	r3, r0, r8
 800c98e:	fa09 f303 	lsl.w	r3, r9, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	9304      	str	r3, [sp, #16]
 800c996:	46a2      	mov	sl, r4
 800c998:	e7d2      	b.n	800c940 <_svfiprintf_r+0x9c>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	9103      	str	r1, [sp, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bfbb      	ittet	lt
 800c9a6:	425b      	neglt	r3, r3
 800c9a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9ac:	9307      	strge	r3, [sp, #28]
 800c9ae:	9307      	strlt	r3, [sp, #28]
 800c9b0:	bfb8      	it	lt
 800c9b2:	9204      	strlt	r2, [sp, #16]
 800c9b4:	7823      	ldrb	r3, [r4, #0]
 800c9b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b8:	d10c      	bne.n	800c9d4 <_svfiprintf_r+0x130>
 800c9ba:	7863      	ldrb	r3, [r4, #1]
 800c9bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9be:	d134      	bne.n	800ca2a <_svfiprintf_r+0x186>
 800c9c0:	9b03      	ldr	r3, [sp, #12]
 800c9c2:	1d1a      	adds	r2, r3, #4
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	9203      	str	r2, [sp, #12]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	bfb8      	it	lt
 800c9cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9d0:	3402      	adds	r4, #2
 800c9d2:	9305      	str	r3, [sp, #20]
 800c9d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ca9c <_svfiprintf_r+0x1f8>
 800c9d8:	7821      	ldrb	r1, [r4, #0]
 800c9da:	2203      	movs	r2, #3
 800c9dc:	4650      	mov	r0, sl
 800c9de:	f7f3 fc2f 	bl	8000240 <memchr>
 800c9e2:	b138      	cbz	r0, 800c9f4 <_svfiprintf_r+0x150>
 800c9e4:	9b04      	ldr	r3, [sp, #16]
 800c9e6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ea:	2240      	movs	r2, #64	; 0x40
 800c9ec:	4082      	lsls	r2, r0
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	3401      	adds	r4, #1
 800c9f2:	9304      	str	r3, [sp, #16]
 800c9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f8:	4825      	ldr	r0, [pc, #148]	; (800ca90 <_svfiprintf_r+0x1ec>)
 800c9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9fe:	2206      	movs	r2, #6
 800ca00:	f7f3 fc1e 	bl	8000240 <memchr>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d038      	beq.n	800ca7a <_svfiprintf_r+0x1d6>
 800ca08:	4b22      	ldr	r3, [pc, #136]	; (800ca94 <_svfiprintf_r+0x1f0>)
 800ca0a:	bb1b      	cbnz	r3, 800ca54 <_svfiprintf_r+0x1b0>
 800ca0c:	9b03      	ldr	r3, [sp, #12]
 800ca0e:	3307      	adds	r3, #7
 800ca10:	f023 0307 	bic.w	r3, r3, #7
 800ca14:	3308      	adds	r3, #8
 800ca16:	9303      	str	r3, [sp, #12]
 800ca18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1a:	4433      	add	r3, r6
 800ca1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1e:	e768      	b.n	800c8f2 <_svfiprintf_r+0x4e>
 800ca20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca24:	460c      	mov	r4, r1
 800ca26:	2001      	movs	r0, #1
 800ca28:	e7a6      	b.n	800c978 <_svfiprintf_r+0xd4>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	3401      	adds	r4, #1
 800ca2e:	9305      	str	r3, [sp, #20]
 800ca30:	4619      	mov	r1, r3
 800ca32:	f04f 0c0a 	mov.w	ip, #10
 800ca36:	4620      	mov	r0, r4
 800ca38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca3c:	3a30      	subs	r2, #48	; 0x30
 800ca3e:	2a09      	cmp	r2, #9
 800ca40:	d903      	bls.n	800ca4a <_svfiprintf_r+0x1a6>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d0c6      	beq.n	800c9d4 <_svfiprintf_r+0x130>
 800ca46:	9105      	str	r1, [sp, #20]
 800ca48:	e7c4      	b.n	800c9d4 <_svfiprintf_r+0x130>
 800ca4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca4e:	4604      	mov	r4, r0
 800ca50:	2301      	movs	r3, #1
 800ca52:	e7f0      	b.n	800ca36 <_svfiprintf_r+0x192>
 800ca54:	ab03      	add	r3, sp, #12
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4b0f      	ldr	r3, [pc, #60]	; (800ca98 <_svfiprintf_r+0x1f4>)
 800ca5c:	a904      	add	r1, sp, #16
 800ca5e:	4638      	mov	r0, r7
 800ca60:	f7fc fd06 	bl	8009470 <_printf_float>
 800ca64:	1c42      	adds	r2, r0, #1
 800ca66:	4606      	mov	r6, r0
 800ca68:	d1d6      	bne.n	800ca18 <_svfiprintf_r+0x174>
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	065b      	lsls	r3, r3, #25
 800ca6e:	f53f af2d 	bmi.w	800c8cc <_svfiprintf_r+0x28>
 800ca72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca74:	b01d      	add	sp, #116	; 0x74
 800ca76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7a:	ab03      	add	r3, sp, #12
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	462a      	mov	r2, r5
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <_svfiprintf_r+0x1f4>)
 800ca82:	a904      	add	r1, sp, #16
 800ca84:	4638      	mov	r0, r7
 800ca86:	f7fc ff7b 	bl	8009980 <_printf_i>
 800ca8a:	e7eb      	b.n	800ca64 <_svfiprintf_r+0x1c0>
 800ca8c:	0800ee69 	.word	0x0800ee69
 800ca90:	0800ee73 	.word	0x0800ee73
 800ca94:	08009471 	.word	0x08009471
 800ca98:	0800c7f1 	.word	0x0800c7f1
 800ca9c:	0800ee6f 	.word	0x0800ee6f

0800caa0 <_sungetc_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	1c4b      	adds	r3, r1, #1
 800caa4:	4614      	mov	r4, r2
 800caa6:	d103      	bne.n	800cab0 <_sungetc_r+0x10>
 800caa8:	f04f 35ff 	mov.w	r5, #4294967295
 800caac:	4628      	mov	r0, r5
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	8993      	ldrh	r3, [r2, #12]
 800cab2:	f023 0320 	bic.w	r3, r3, #32
 800cab6:	8193      	strh	r3, [r2, #12]
 800cab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caba:	6852      	ldr	r2, [r2, #4]
 800cabc:	b2cd      	uxtb	r5, r1
 800cabe:	b18b      	cbz	r3, 800cae4 <_sungetc_r+0x44>
 800cac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cac2:	4293      	cmp	r3, r2
 800cac4:	dd08      	ble.n	800cad8 <_sungetc_r+0x38>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	1e5a      	subs	r2, r3, #1
 800caca:	6022      	str	r2, [r4, #0]
 800cacc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cad0:	6863      	ldr	r3, [r4, #4]
 800cad2:	3301      	adds	r3, #1
 800cad4:	6063      	str	r3, [r4, #4]
 800cad6:	e7e9      	b.n	800caac <_sungetc_r+0xc>
 800cad8:	4621      	mov	r1, r4
 800cada:	f000 fbe8 	bl	800d2ae <__submore>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d0f1      	beq.n	800cac6 <_sungetc_r+0x26>
 800cae2:	e7e1      	b.n	800caa8 <_sungetc_r+0x8>
 800cae4:	6921      	ldr	r1, [r4, #16]
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	b151      	cbz	r1, 800cb00 <_sungetc_r+0x60>
 800caea:	4299      	cmp	r1, r3
 800caec:	d208      	bcs.n	800cb00 <_sungetc_r+0x60>
 800caee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800caf2:	42a9      	cmp	r1, r5
 800caf4:	d104      	bne.n	800cb00 <_sungetc_r+0x60>
 800caf6:	3b01      	subs	r3, #1
 800caf8:	3201      	adds	r2, #1
 800cafa:	6023      	str	r3, [r4, #0]
 800cafc:	6062      	str	r2, [r4, #4]
 800cafe:	e7d5      	b.n	800caac <_sungetc_r+0xc>
 800cb00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cb04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb08:	6363      	str	r3, [r4, #52]	; 0x34
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb0e:	4623      	mov	r3, r4
 800cb10:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	2301      	movs	r3, #1
 800cb18:	e7dc      	b.n	800cad4 <_sungetc_r+0x34>

0800cb1a <__ssrefill_r>:
 800cb1a:	b510      	push	{r4, lr}
 800cb1c:	460c      	mov	r4, r1
 800cb1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb20:	b169      	cbz	r1, 800cb3e <__ssrefill_r+0x24>
 800cb22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb26:	4299      	cmp	r1, r3
 800cb28:	d001      	beq.n	800cb2e <__ssrefill_r+0x14>
 800cb2a:	f7fe fa61 	bl	800aff0 <_free_r>
 800cb2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb30:	6063      	str	r3, [r4, #4]
 800cb32:	2000      	movs	r0, #0
 800cb34:	6360      	str	r0, [r4, #52]	; 0x34
 800cb36:	b113      	cbz	r3, 800cb3e <__ssrefill_r+0x24>
 800cb38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cb3a:	6023      	str	r3, [r4, #0]
 800cb3c:	bd10      	pop	{r4, pc}
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	2300      	movs	r3, #0
 800cb44:	6063      	str	r3, [r4, #4]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	f043 0320 	orr.w	r3, r3, #32
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	e7f3      	b.n	800cb3c <__ssrefill_r+0x22>

0800cb54 <__ssvfiscanf_r>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	460c      	mov	r4, r1
 800cb5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cb5e:	2100      	movs	r1, #0
 800cb60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cb64:	49a6      	ldr	r1, [pc, #664]	; (800ce00 <__ssvfiscanf_r+0x2ac>)
 800cb66:	91a0      	str	r1, [sp, #640]	; 0x280
 800cb68:	f10d 0804 	add.w	r8, sp, #4
 800cb6c:	49a5      	ldr	r1, [pc, #660]	; (800ce04 <__ssvfiscanf_r+0x2b0>)
 800cb6e:	4fa6      	ldr	r7, [pc, #664]	; (800ce08 <__ssvfiscanf_r+0x2b4>)
 800cb70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ce0c <__ssvfiscanf_r+0x2b8>
 800cb74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cb78:	4606      	mov	r6, r0
 800cb7a:	91a1      	str	r1, [sp, #644]	; 0x284
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	7813      	ldrb	r3, [r2, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 815a 	beq.w	800ce3a <__ssvfiscanf_r+0x2e6>
 800cb86:	5cf9      	ldrb	r1, [r7, r3]
 800cb88:	f011 0108 	ands.w	r1, r1, #8
 800cb8c:	f102 0501 	add.w	r5, r2, #1
 800cb90:	d019      	beq.n	800cbc6 <__ssvfiscanf_r+0x72>
 800cb92:	6863      	ldr	r3, [r4, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dd0f      	ble.n	800cbb8 <__ssvfiscanf_r+0x64>
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	781a      	ldrb	r2, [r3, #0]
 800cb9c:	5cba      	ldrb	r2, [r7, r2]
 800cb9e:	0712      	lsls	r2, r2, #28
 800cba0:	d401      	bmi.n	800cba6 <__ssvfiscanf_r+0x52>
 800cba2:	462a      	mov	r2, r5
 800cba4:	e7eb      	b.n	800cb7e <__ssvfiscanf_r+0x2a>
 800cba6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cba8:	3201      	adds	r2, #1
 800cbaa:	9245      	str	r2, [sp, #276]	; 0x114
 800cbac:	6862      	ldr	r2, [r4, #4]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	3a01      	subs	r2, #1
 800cbb2:	6062      	str	r2, [r4, #4]
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	e7ec      	b.n	800cb92 <__ssvfiscanf_r+0x3e>
 800cbb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4798      	blx	r3
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d0e9      	beq.n	800cb98 <__ssvfiscanf_r+0x44>
 800cbc4:	e7ed      	b.n	800cba2 <__ssvfiscanf_r+0x4e>
 800cbc6:	2b25      	cmp	r3, #37	; 0x25
 800cbc8:	d012      	beq.n	800cbf0 <__ssvfiscanf_r+0x9c>
 800cbca:	469a      	mov	sl, r3
 800cbcc:	6863      	ldr	r3, [r4, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f340 8091 	ble.w	800ccf6 <__ssvfiscanf_r+0x1a2>
 800cbd4:	6822      	ldr	r2, [r4, #0]
 800cbd6:	7813      	ldrb	r3, [r2, #0]
 800cbd8:	4553      	cmp	r3, sl
 800cbda:	f040 812e 	bne.w	800ce3a <__ssvfiscanf_r+0x2e6>
 800cbde:	6863      	ldr	r3, [r4, #4]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	6063      	str	r3, [r4, #4]
 800cbe4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cbe6:	3201      	adds	r2, #1
 800cbe8:	3301      	adds	r3, #1
 800cbea:	6022      	str	r2, [r4, #0]
 800cbec:	9345      	str	r3, [sp, #276]	; 0x114
 800cbee:	e7d8      	b.n	800cba2 <__ssvfiscanf_r+0x4e>
 800cbf0:	9141      	str	r1, [sp, #260]	; 0x104
 800cbf2:	9143      	str	r1, [sp, #268]	; 0x10c
 800cbf4:	7853      	ldrb	r3, [r2, #1]
 800cbf6:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf8:	bf02      	ittt	eq
 800cbfa:	2310      	moveq	r3, #16
 800cbfc:	1c95      	addeq	r5, r2, #2
 800cbfe:	9341      	streq	r3, [sp, #260]	; 0x104
 800cc00:	220a      	movs	r2, #10
 800cc02:	46aa      	mov	sl, r5
 800cc04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cc08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cc0c:	2b09      	cmp	r3, #9
 800cc0e:	d91c      	bls.n	800cc4a <__ssvfiscanf_r+0xf6>
 800cc10:	487e      	ldr	r0, [pc, #504]	; (800ce0c <__ssvfiscanf_r+0x2b8>)
 800cc12:	2203      	movs	r2, #3
 800cc14:	f7f3 fb14 	bl	8000240 <memchr>
 800cc18:	b138      	cbz	r0, 800cc2a <__ssvfiscanf_r+0xd6>
 800cc1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc1c:	eba0 0009 	sub.w	r0, r0, r9
 800cc20:	2301      	movs	r3, #1
 800cc22:	4083      	lsls	r3, r0
 800cc24:	4313      	orrs	r3, r2
 800cc26:	9341      	str	r3, [sp, #260]	; 0x104
 800cc28:	4655      	mov	r5, sl
 800cc2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc2e:	2b78      	cmp	r3, #120	; 0x78
 800cc30:	d806      	bhi.n	800cc40 <__ssvfiscanf_r+0xec>
 800cc32:	2b57      	cmp	r3, #87	; 0x57
 800cc34:	d810      	bhi.n	800cc58 <__ssvfiscanf_r+0x104>
 800cc36:	2b25      	cmp	r3, #37	; 0x25
 800cc38:	d0c7      	beq.n	800cbca <__ssvfiscanf_r+0x76>
 800cc3a:	d857      	bhi.n	800ccec <__ssvfiscanf_r+0x198>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d065      	beq.n	800cd0c <__ssvfiscanf_r+0x1b8>
 800cc40:	2303      	movs	r3, #3
 800cc42:	9347      	str	r3, [sp, #284]	; 0x11c
 800cc44:	230a      	movs	r3, #10
 800cc46:	9342      	str	r3, [sp, #264]	; 0x108
 800cc48:	e076      	b.n	800cd38 <__ssvfiscanf_r+0x1e4>
 800cc4a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cc4c:	fb02 1103 	mla	r1, r2, r3, r1
 800cc50:	3930      	subs	r1, #48	; 0x30
 800cc52:	9143      	str	r1, [sp, #268]	; 0x10c
 800cc54:	4655      	mov	r5, sl
 800cc56:	e7d4      	b.n	800cc02 <__ssvfiscanf_r+0xae>
 800cc58:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cc5c:	2a20      	cmp	r2, #32
 800cc5e:	d8ef      	bhi.n	800cc40 <__ssvfiscanf_r+0xec>
 800cc60:	a101      	add	r1, pc, #4	; (adr r1, 800cc68 <__ssvfiscanf_r+0x114>)
 800cc62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc66:	bf00      	nop
 800cc68:	0800cd1b 	.word	0x0800cd1b
 800cc6c:	0800cc41 	.word	0x0800cc41
 800cc70:	0800cc41 	.word	0x0800cc41
 800cc74:	0800cd79 	.word	0x0800cd79
 800cc78:	0800cc41 	.word	0x0800cc41
 800cc7c:	0800cc41 	.word	0x0800cc41
 800cc80:	0800cc41 	.word	0x0800cc41
 800cc84:	0800cc41 	.word	0x0800cc41
 800cc88:	0800cc41 	.word	0x0800cc41
 800cc8c:	0800cc41 	.word	0x0800cc41
 800cc90:	0800cc41 	.word	0x0800cc41
 800cc94:	0800cd8f 	.word	0x0800cd8f
 800cc98:	0800cd75 	.word	0x0800cd75
 800cc9c:	0800ccf3 	.word	0x0800ccf3
 800cca0:	0800ccf3 	.word	0x0800ccf3
 800cca4:	0800ccf3 	.word	0x0800ccf3
 800cca8:	0800cc41 	.word	0x0800cc41
 800ccac:	0800cd31 	.word	0x0800cd31
 800ccb0:	0800cc41 	.word	0x0800cc41
 800ccb4:	0800cc41 	.word	0x0800cc41
 800ccb8:	0800cc41 	.word	0x0800cc41
 800ccbc:	0800cc41 	.word	0x0800cc41
 800ccc0:	0800cd9f 	.word	0x0800cd9f
 800ccc4:	0800cd6d 	.word	0x0800cd6d
 800ccc8:	0800cd13 	.word	0x0800cd13
 800cccc:	0800cc41 	.word	0x0800cc41
 800ccd0:	0800cc41 	.word	0x0800cc41
 800ccd4:	0800cd9b 	.word	0x0800cd9b
 800ccd8:	0800cc41 	.word	0x0800cc41
 800ccdc:	0800cd75 	.word	0x0800cd75
 800cce0:	0800cc41 	.word	0x0800cc41
 800cce4:	0800cc41 	.word	0x0800cc41
 800cce8:	0800cd1b 	.word	0x0800cd1b
 800ccec:	3b45      	subs	r3, #69	; 0x45
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d8a6      	bhi.n	800cc40 <__ssvfiscanf_r+0xec>
 800ccf2:	2305      	movs	r3, #5
 800ccf4:	e01f      	b.n	800cd36 <__ssvfiscanf_r+0x1e2>
 800ccf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4798      	blx	r3
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f43f af68 	beq.w	800cbd4 <__ssvfiscanf_r+0x80>
 800cd04:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cd06:	2800      	cmp	r0, #0
 800cd08:	f040 808d 	bne.w	800ce26 <__ssvfiscanf_r+0x2d2>
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	e08f      	b.n	800ce32 <__ssvfiscanf_r+0x2de>
 800cd12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cd14:	f042 0220 	orr.w	r2, r2, #32
 800cd18:	9241      	str	r2, [sp, #260]	; 0x104
 800cd1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cd1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd20:	9241      	str	r2, [sp, #260]	; 0x104
 800cd22:	2210      	movs	r2, #16
 800cd24:	2b6f      	cmp	r3, #111	; 0x6f
 800cd26:	9242      	str	r2, [sp, #264]	; 0x108
 800cd28:	bf34      	ite	cc
 800cd2a:	2303      	movcc	r3, #3
 800cd2c:	2304      	movcs	r3, #4
 800cd2e:	e002      	b.n	800cd36 <__ssvfiscanf_r+0x1e2>
 800cd30:	2300      	movs	r3, #0
 800cd32:	9342      	str	r3, [sp, #264]	; 0x108
 800cd34:	2303      	movs	r3, #3
 800cd36:	9347      	str	r3, [sp, #284]	; 0x11c
 800cd38:	6863      	ldr	r3, [r4, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dd3d      	ble.n	800cdba <__ssvfiscanf_r+0x266>
 800cd3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd40:	0659      	lsls	r1, r3, #25
 800cd42:	d404      	bmi.n	800cd4e <__ssvfiscanf_r+0x1fa>
 800cd44:	6823      	ldr	r3, [r4, #0]
 800cd46:	781a      	ldrb	r2, [r3, #0]
 800cd48:	5cba      	ldrb	r2, [r7, r2]
 800cd4a:	0712      	lsls	r2, r2, #28
 800cd4c:	d43c      	bmi.n	800cdc8 <__ssvfiscanf_r+0x274>
 800cd4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	dc4b      	bgt.n	800cdec <__ssvfiscanf_r+0x298>
 800cd54:	466b      	mov	r3, sp
 800cd56:	4622      	mov	r2, r4
 800cd58:	a941      	add	r1, sp, #260	; 0x104
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f000 f872 	bl	800ce44 <_scanf_chars>
 800cd60:	2801      	cmp	r0, #1
 800cd62:	d06a      	beq.n	800ce3a <__ssvfiscanf_r+0x2e6>
 800cd64:	2802      	cmp	r0, #2
 800cd66:	f47f af1c 	bne.w	800cba2 <__ssvfiscanf_r+0x4e>
 800cd6a:	e7cb      	b.n	800cd04 <__ssvfiscanf_r+0x1b0>
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	9342      	str	r3, [sp, #264]	; 0x108
 800cd70:	2304      	movs	r3, #4
 800cd72:	e7e0      	b.n	800cd36 <__ssvfiscanf_r+0x1e2>
 800cd74:	220a      	movs	r2, #10
 800cd76:	e7d5      	b.n	800cd24 <__ssvfiscanf_r+0x1d0>
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	f000 fa5e 	bl	800d23c <__sccl>
 800cd80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd86:	9341      	str	r3, [sp, #260]	; 0x104
 800cd88:	4605      	mov	r5, r0
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e7d3      	b.n	800cd36 <__ssvfiscanf_r+0x1e2>
 800cd8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd94:	9341      	str	r3, [sp, #260]	; 0x104
 800cd96:	2300      	movs	r3, #0
 800cd98:	e7cd      	b.n	800cd36 <__ssvfiscanf_r+0x1e2>
 800cd9a:	2302      	movs	r3, #2
 800cd9c:	e7cb      	b.n	800cd36 <__ssvfiscanf_r+0x1e2>
 800cd9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cda0:	06c3      	lsls	r3, r0, #27
 800cda2:	f53f aefe 	bmi.w	800cba2 <__ssvfiscanf_r+0x4e>
 800cda6:	9b00      	ldr	r3, [sp, #0]
 800cda8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cdaa:	1d19      	adds	r1, r3, #4
 800cdac:	9100      	str	r1, [sp, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	07c0      	lsls	r0, r0, #31
 800cdb2:	bf4c      	ite	mi
 800cdb4:	801a      	strhmi	r2, [r3, #0]
 800cdb6:	601a      	strpl	r2, [r3, #0]
 800cdb8:	e6f3      	b.n	800cba2 <__ssvfiscanf_r+0x4e>
 800cdba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	4798      	blx	r3
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0bb      	beq.n	800cd3e <__ssvfiscanf_r+0x1ea>
 800cdc6:	e79d      	b.n	800cd04 <__ssvfiscanf_r+0x1b0>
 800cdc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cdca:	3201      	adds	r2, #1
 800cdcc:	9245      	str	r2, [sp, #276]	; 0x114
 800cdce:	6862      	ldr	r2, [r4, #4]
 800cdd0:	3a01      	subs	r2, #1
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	6062      	str	r2, [r4, #4]
 800cdd6:	dd02      	ble.n	800cdde <__ssvfiscanf_r+0x28a>
 800cdd8:	3301      	adds	r3, #1
 800cdda:	6023      	str	r3, [r4, #0]
 800cddc:	e7b2      	b.n	800cd44 <__ssvfiscanf_r+0x1f0>
 800cdde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cde0:	4621      	mov	r1, r4
 800cde2:	4630      	mov	r0, r6
 800cde4:	4798      	blx	r3
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d0ac      	beq.n	800cd44 <__ssvfiscanf_r+0x1f0>
 800cdea:	e78b      	b.n	800cd04 <__ssvfiscanf_r+0x1b0>
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	dc0f      	bgt.n	800ce10 <__ssvfiscanf_r+0x2bc>
 800cdf0:	466b      	mov	r3, sp
 800cdf2:	4622      	mov	r2, r4
 800cdf4:	a941      	add	r1, sp, #260	; 0x104
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f000 f87e 	bl	800cef8 <_scanf_i>
 800cdfc:	e7b0      	b.n	800cd60 <__ssvfiscanf_r+0x20c>
 800cdfe:	bf00      	nop
 800ce00:	0800caa1 	.word	0x0800caa1
 800ce04:	0800cb1b 	.word	0x0800cb1b
 800ce08:	0800ed69 	.word	0x0800ed69
 800ce0c:	0800ee6f 	.word	0x0800ee6f
 800ce10:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <__ssvfiscanf_r+0x2ec>)
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f43f aec5 	beq.w	800cba2 <__ssvfiscanf_r+0x4e>
 800ce18:	466b      	mov	r3, sp
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	a941      	add	r1, sp, #260	; 0x104
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f7fc fed0 	bl	8009bc4 <_scanf_float>
 800ce24:	e79c      	b.n	800cd60 <__ssvfiscanf_r+0x20c>
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce2c:	bf18      	it	ne
 800ce2e:	f04f 30ff 	movne.w	r0, #4294967295
 800ce32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ce36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ce3c:	e7f9      	b.n	800ce32 <__ssvfiscanf_r+0x2de>
 800ce3e:	bf00      	nop
 800ce40:	08009bc5 	.word	0x08009bc5

0800ce44 <_scanf_chars>:
 800ce44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce48:	4615      	mov	r5, r2
 800ce4a:	688a      	ldr	r2, [r1, #8]
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	460c      	mov	r4, r1
 800ce50:	b932      	cbnz	r2, 800ce60 <_scanf_chars+0x1c>
 800ce52:	698a      	ldr	r2, [r1, #24]
 800ce54:	2a00      	cmp	r2, #0
 800ce56:	bf0c      	ite	eq
 800ce58:	2201      	moveq	r2, #1
 800ce5a:	f04f 32ff 	movne.w	r2, #4294967295
 800ce5e:	608a      	str	r2, [r1, #8]
 800ce60:	6822      	ldr	r2, [r4, #0]
 800ce62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cef4 <_scanf_chars+0xb0>
 800ce66:	06d1      	lsls	r1, r2, #27
 800ce68:	bf5f      	itttt	pl
 800ce6a:	681a      	ldrpl	r2, [r3, #0]
 800ce6c:	1d11      	addpl	r1, r2, #4
 800ce6e:	6019      	strpl	r1, [r3, #0]
 800ce70:	6816      	ldrpl	r6, [r2, #0]
 800ce72:	2700      	movs	r7, #0
 800ce74:	69a0      	ldr	r0, [r4, #24]
 800ce76:	b188      	cbz	r0, 800ce9c <_scanf_chars+0x58>
 800ce78:	2801      	cmp	r0, #1
 800ce7a:	d107      	bne.n	800ce8c <_scanf_chars+0x48>
 800ce7c:	682a      	ldr	r2, [r5, #0]
 800ce7e:	7811      	ldrb	r1, [r2, #0]
 800ce80:	6962      	ldr	r2, [r4, #20]
 800ce82:	5c52      	ldrb	r2, [r2, r1]
 800ce84:	b952      	cbnz	r2, 800ce9c <_scanf_chars+0x58>
 800ce86:	2f00      	cmp	r7, #0
 800ce88:	d031      	beq.n	800ceee <_scanf_chars+0xaa>
 800ce8a:	e022      	b.n	800ced2 <_scanf_chars+0x8e>
 800ce8c:	2802      	cmp	r0, #2
 800ce8e:	d120      	bne.n	800ced2 <_scanf_chars+0x8e>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ce98:	071b      	lsls	r3, r3, #28
 800ce9a:	d41a      	bmi.n	800ced2 <_scanf_chars+0x8e>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	06da      	lsls	r2, r3, #27
 800cea0:	bf5e      	ittt	pl
 800cea2:	682b      	ldrpl	r3, [r5, #0]
 800cea4:	781b      	ldrbpl	r3, [r3, #0]
 800cea6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ceaa:	682a      	ldr	r2, [r5, #0]
 800ceac:	686b      	ldr	r3, [r5, #4]
 800ceae:	3201      	adds	r2, #1
 800ceb0:	602a      	str	r2, [r5, #0]
 800ceb2:	68a2      	ldr	r2, [r4, #8]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	3a01      	subs	r2, #1
 800ceb8:	606b      	str	r3, [r5, #4]
 800ceba:	3701      	adds	r7, #1
 800cebc:	60a2      	str	r2, [r4, #8]
 800cebe:	b142      	cbz	r2, 800ced2 <_scanf_chars+0x8e>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	dcd7      	bgt.n	800ce74 <_scanf_chars+0x30>
 800cec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cec8:	4629      	mov	r1, r5
 800ceca:	4640      	mov	r0, r8
 800cecc:	4798      	blx	r3
 800cece:	2800      	cmp	r0, #0
 800ced0:	d0d0      	beq.n	800ce74 <_scanf_chars+0x30>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	f013 0310 	ands.w	r3, r3, #16
 800ced8:	d105      	bne.n	800cee6 <_scanf_chars+0xa2>
 800ceda:	68e2      	ldr	r2, [r4, #12]
 800cedc:	3201      	adds	r2, #1
 800cede:	60e2      	str	r2, [r4, #12]
 800cee0:	69a2      	ldr	r2, [r4, #24]
 800cee2:	b102      	cbz	r2, 800cee6 <_scanf_chars+0xa2>
 800cee4:	7033      	strb	r3, [r6, #0]
 800cee6:	6923      	ldr	r3, [r4, #16]
 800cee8:	443b      	add	r3, r7
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	2000      	movs	r0, #0
 800ceee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef2:	bf00      	nop
 800cef4:	0800ed69 	.word	0x0800ed69

0800cef8 <_scanf_i>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	4698      	mov	r8, r3
 800cefe:	4b74      	ldr	r3, [pc, #464]	; (800d0d0 <_scanf_i+0x1d8>)
 800cf00:	460c      	mov	r4, r1
 800cf02:	4682      	mov	sl, r0
 800cf04:	4616      	mov	r6, r2
 800cf06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	ab03      	add	r3, sp, #12
 800cf0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf12:	4b70      	ldr	r3, [pc, #448]	; (800d0d4 <_scanf_i+0x1dc>)
 800cf14:	69a1      	ldr	r1, [r4, #24]
 800cf16:	4a70      	ldr	r2, [pc, #448]	; (800d0d8 <_scanf_i+0x1e0>)
 800cf18:	2903      	cmp	r1, #3
 800cf1a:	bf18      	it	ne
 800cf1c:	461a      	movne	r2, r3
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	9201      	str	r2, [sp, #4]
 800cf22:	1e5a      	subs	r2, r3, #1
 800cf24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf28:	bf88      	it	hi
 800cf2a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf2e:	4627      	mov	r7, r4
 800cf30:	bf82      	ittt	hi
 800cf32:	eb03 0905 	addhi.w	r9, r3, r5
 800cf36:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf3a:	60a3      	strhi	r3, [r4, #8]
 800cf3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cf40:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf44:	bf98      	it	ls
 800cf46:	f04f 0900 	movls.w	r9, #0
 800cf4a:	6023      	str	r3, [r4, #0]
 800cf4c:	463d      	mov	r5, r7
 800cf4e:	f04f 0b00 	mov.w	fp, #0
 800cf52:	6831      	ldr	r1, [r6, #0]
 800cf54:	ab03      	add	r3, sp, #12
 800cf56:	7809      	ldrb	r1, [r1, #0]
 800cf58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	f7f3 f96f 	bl	8000240 <memchr>
 800cf62:	b328      	cbz	r0, 800cfb0 <_scanf_i+0xb8>
 800cf64:	f1bb 0f01 	cmp.w	fp, #1
 800cf68:	d159      	bne.n	800d01e <_scanf_i+0x126>
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	b92a      	cbnz	r2, 800cf7a <_scanf_i+0x82>
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	2308      	movs	r3, #8
 800cf72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf76:	6063      	str	r3, [r4, #4]
 800cf78:	6022      	str	r2, [r4, #0]
 800cf7a:	6822      	ldr	r2, [r4, #0]
 800cf7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf80:	6022      	str	r2, [r4, #0]
 800cf82:	68a2      	ldr	r2, [r4, #8]
 800cf84:	1e51      	subs	r1, r2, #1
 800cf86:	60a1      	str	r1, [r4, #8]
 800cf88:	b192      	cbz	r2, 800cfb0 <_scanf_i+0xb8>
 800cf8a:	6832      	ldr	r2, [r6, #0]
 800cf8c:	1c51      	adds	r1, r2, #1
 800cf8e:	6031      	str	r1, [r6, #0]
 800cf90:	7812      	ldrb	r2, [r2, #0]
 800cf92:	f805 2b01 	strb.w	r2, [r5], #1
 800cf96:	6872      	ldr	r2, [r6, #4]
 800cf98:	3a01      	subs	r2, #1
 800cf9a:	2a00      	cmp	r2, #0
 800cf9c:	6072      	str	r2, [r6, #4]
 800cf9e:	dc07      	bgt.n	800cfb0 <_scanf_i+0xb8>
 800cfa0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4650      	mov	r0, sl
 800cfa8:	4790      	blx	r2
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	f040 8085 	bne.w	800d0ba <_scanf_i+0x1c2>
 800cfb0:	f10b 0b01 	add.w	fp, fp, #1
 800cfb4:	f1bb 0f03 	cmp.w	fp, #3
 800cfb8:	d1cb      	bne.n	800cf52 <_scanf_i+0x5a>
 800cfba:	6863      	ldr	r3, [r4, #4]
 800cfbc:	b90b      	cbnz	r3, 800cfc2 <_scanf_i+0xca>
 800cfbe:	230a      	movs	r3, #10
 800cfc0:	6063      	str	r3, [r4, #4]
 800cfc2:	6863      	ldr	r3, [r4, #4]
 800cfc4:	4945      	ldr	r1, [pc, #276]	; (800d0dc <_scanf_i+0x1e4>)
 800cfc6:	6960      	ldr	r0, [r4, #20]
 800cfc8:	1ac9      	subs	r1, r1, r3
 800cfca:	f000 f937 	bl	800d23c <__sccl>
 800cfce:	f04f 0b00 	mov.w	fp, #0
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	6822      	ldr	r2, [r4, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d03d      	beq.n	800d056 <_scanf_i+0x15e>
 800cfda:	6831      	ldr	r1, [r6, #0]
 800cfdc:	6960      	ldr	r0, [r4, #20]
 800cfde:	f891 c000 	ldrb.w	ip, [r1]
 800cfe2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d035      	beq.n	800d056 <_scanf_i+0x15e>
 800cfea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cfee:	d124      	bne.n	800d03a <_scanf_i+0x142>
 800cff0:	0510      	lsls	r0, r2, #20
 800cff2:	d522      	bpl.n	800d03a <_scanf_i+0x142>
 800cff4:	f10b 0b01 	add.w	fp, fp, #1
 800cff8:	f1b9 0f00 	cmp.w	r9, #0
 800cffc:	d003      	beq.n	800d006 <_scanf_i+0x10e>
 800cffe:	3301      	adds	r3, #1
 800d000:	f109 39ff 	add.w	r9, r9, #4294967295
 800d004:	60a3      	str	r3, [r4, #8]
 800d006:	6873      	ldr	r3, [r6, #4]
 800d008:	3b01      	subs	r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	6073      	str	r3, [r6, #4]
 800d00e:	dd1b      	ble.n	800d048 <_scanf_i+0x150>
 800d010:	6833      	ldr	r3, [r6, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	6033      	str	r3, [r6, #0]
 800d016:	68a3      	ldr	r3, [r4, #8]
 800d018:	3b01      	subs	r3, #1
 800d01a:	60a3      	str	r3, [r4, #8]
 800d01c:	e7d9      	b.n	800cfd2 <_scanf_i+0xda>
 800d01e:	f1bb 0f02 	cmp.w	fp, #2
 800d022:	d1ae      	bne.n	800cf82 <_scanf_i+0x8a>
 800d024:	6822      	ldr	r2, [r4, #0]
 800d026:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d02a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d02e:	d1bf      	bne.n	800cfb0 <_scanf_i+0xb8>
 800d030:	2310      	movs	r3, #16
 800d032:	6063      	str	r3, [r4, #4]
 800d034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d038:	e7a2      	b.n	800cf80 <_scanf_i+0x88>
 800d03a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d03e:	6022      	str	r2, [r4, #0]
 800d040:	780b      	ldrb	r3, [r1, #0]
 800d042:	f805 3b01 	strb.w	r3, [r5], #1
 800d046:	e7de      	b.n	800d006 <_scanf_i+0x10e>
 800d048:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d04c:	4631      	mov	r1, r6
 800d04e:	4650      	mov	r0, sl
 800d050:	4798      	blx	r3
 800d052:	2800      	cmp	r0, #0
 800d054:	d0df      	beq.n	800d016 <_scanf_i+0x11e>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	05d9      	lsls	r1, r3, #23
 800d05a:	d50d      	bpl.n	800d078 <_scanf_i+0x180>
 800d05c:	42bd      	cmp	r5, r7
 800d05e:	d909      	bls.n	800d074 <_scanf_i+0x17c>
 800d060:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d068:	4632      	mov	r2, r6
 800d06a:	4650      	mov	r0, sl
 800d06c:	4798      	blx	r3
 800d06e:	f105 39ff 	add.w	r9, r5, #4294967295
 800d072:	464d      	mov	r5, r9
 800d074:	42bd      	cmp	r5, r7
 800d076:	d028      	beq.n	800d0ca <_scanf_i+0x1d2>
 800d078:	6822      	ldr	r2, [r4, #0]
 800d07a:	f012 0210 	ands.w	r2, r2, #16
 800d07e:	d113      	bne.n	800d0a8 <_scanf_i+0x1b0>
 800d080:	702a      	strb	r2, [r5, #0]
 800d082:	6863      	ldr	r3, [r4, #4]
 800d084:	9e01      	ldr	r6, [sp, #4]
 800d086:	4639      	mov	r1, r7
 800d088:	4650      	mov	r0, sl
 800d08a:	47b0      	blx	r6
 800d08c:	f8d8 3000 	ldr.w	r3, [r8]
 800d090:	6821      	ldr	r1, [r4, #0]
 800d092:	1d1a      	adds	r2, r3, #4
 800d094:	f8c8 2000 	str.w	r2, [r8]
 800d098:	f011 0f20 	tst.w	r1, #32
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	d00f      	beq.n	800d0c0 <_scanf_i+0x1c8>
 800d0a0:	6018      	str	r0, [r3, #0]
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	60e3      	str	r3, [r4, #12]
 800d0a8:	6923      	ldr	r3, [r4, #16]
 800d0aa:	1bed      	subs	r5, r5, r7
 800d0ac:	445d      	add	r5, fp
 800d0ae:	442b      	add	r3, r5
 800d0b0:	6123      	str	r3, [r4, #16]
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	b007      	add	sp, #28
 800d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ba:	f04f 0b00 	mov.w	fp, #0
 800d0be:	e7ca      	b.n	800d056 <_scanf_i+0x15e>
 800d0c0:	07ca      	lsls	r2, r1, #31
 800d0c2:	bf4c      	ite	mi
 800d0c4:	8018      	strhmi	r0, [r3, #0]
 800d0c6:	6018      	strpl	r0, [r3, #0]
 800d0c8:	e7eb      	b.n	800d0a2 <_scanf_i+0x1aa>
 800d0ca:	2001      	movs	r0, #1
 800d0cc:	e7f2      	b.n	800d0b4 <_scanf_i+0x1bc>
 800d0ce:	bf00      	nop
 800d0d0:	0800e330 	.word	0x0800e330
 800d0d4:	0800dc2d 	.word	0x0800dc2d
 800d0d8:	0800c7ed 	.word	0x0800c7ed
 800d0dc:	0800ee8a 	.word	0x0800ee8a

0800d0e0 <__sflush_r>:
 800d0e0:	898a      	ldrh	r2, [r1, #12]
 800d0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	0710      	lsls	r0, r2, #28
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	d458      	bmi.n	800d1a0 <__sflush_r+0xc0>
 800d0ee:	684b      	ldr	r3, [r1, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	dc05      	bgt.n	800d100 <__sflush_r+0x20>
 800d0f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	dc02      	bgt.n	800d100 <__sflush_r+0x20>
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d102:	2e00      	cmp	r6, #0
 800d104:	d0f9      	beq.n	800d0fa <__sflush_r+0x1a>
 800d106:	2300      	movs	r3, #0
 800d108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d10c:	682f      	ldr	r7, [r5, #0]
 800d10e:	6a21      	ldr	r1, [r4, #32]
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	d032      	beq.n	800d17a <__sflush_r+0x9a>
 800d114:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	075a      	lsls	r2, r3, #29
 800d11a:	d505      	bpl.n	800d128 <__sflush_r+0x48>
 800d11c:	6863      	ldr	r3, [r4, #4]
 800d11e:	1ac0      	subs	r0, r0, r3
 800d120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d122:	b10b      	cbz	r3, 800d128 <__sflush_r+0x48>
 800d124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d126:	1ac0      	subs	r0, r0, r3
 800d128:	2300      	movs	r3, #0
 800d12a:	4602      	mov	r2, r0
 800d12c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d12e:	6a21      	ldr	r1, [r4, #32]
 800d130:	4628      	mov	r0, r5
 800d132:	47b0      	blx	r6
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	89a3      	ldrh	r3, [r4, #12]
 800d138:	d106      	bne.n	800d148 <__sflush_r+0x68>
 800d13a:	6829      	ldr	r1, [r5, #0]
 800d13c:	291d      	cmp	r1, #29
 800d13e:	d82b      	bhi.n	800d198 <__sflush_r+0xb8>
 800d140:	4a29      	ldr	r2, [pc, #164]	; (800d1e8 <__sflush_r+0x108>)
 800d142:	410a      	asrs	r2, r1
 800d144:	07d6      	lsls	r6, r2, #31
 800d146:	d427      	bmi.n	800d198 <__sflush_r+0xb8>
 800d148:	2200      	movs	r2, #0
 800d14a:	6062      	str	r2, [r4, #4]
 800d14c:	04d9      	lsls	r1, r3, #19
 800d14e:	6922      	ldr	r2, [r4, #16]
 800d150:	6022      	str	r2, [r4, #0]
 800d152:	d504      	bpl.n	800d15e <__sflush_r+0x7e>
 800d154:	1c42      	adds	r2, r0, #1
 800d156:	d101      	bne.n	800d15c <__sflush_r+0x7c>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b903      	cbnz	r3, 800d15e <__sflush_r+0x7e>
 800d15c:	6560      	str	r0, [r4, #84]	; 0x54
 800d15e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d160:	602f      	str	r7, [r5, #0]
 800d162:	2900      	cmp	r1, #0
 800d164:	d0c9      	beq.n	800d0fa <__sflush_r+0x1a>
 800d166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d16a:	4299      	cmp	r1, r3
 800d16c:	d002      	beq.n	800d174 <__sflush_r+0x94>
 800d16e:	4628      	mov	r0, r5
 800d170:	f7fd ff3e 	bl	800aff0 <_free_r>
 800d174:	2000      	movs	r0, #0
 800d176:	6360      	str	r0, [r4, #52]	; 0x34
 800d178:	e7c0      	b.n	800d0fc <__sflush_r+0x1c>
 800d17a:	2301      	movs	r3, #1
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b0      	blx	r6
 800d180:	1c41      	adds	r1, r0, #1
 800d182:	d1c8      	bne.n	800d116 <__sflush_r+0x36>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d0c5      	beq.n	800d116 <__sflush_r+0x36>
 800d18a:	2b1d      	cmp	r3, #29
 800d18c:	d001      	beq.n	800d192 <__sflush_r+0xb2>
 800d18e:	2b16      	cmp	r3, #22
 800d190:	d101      	bne.n	800d196 <__sflush_r+0xb6>
 800d192:	602f      	str	r7, [r5, #0]
 800d194:	e7b1      	b.n	800d0fa <__sflush_r+0x1a>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d19c:	81a3      	strh	r3, [r4, #12]
 800d19e:	e7ad      	b.n	800d0fc <__sflush_r+0x1c>
 800d1a0:	690f      	ldr	r7, [r1, #16]
 800d1a2:	2f00      	cmp	r7, #0
 800d1a4:	d0a9      	beq.n	800d0fa <__sflush_r+0x1a>
 800d1a6:	0793      	lsls	r3, r2, #30
 800d1a8:	680e      	ldr	r6, [r1, #0]
 800d1aa:	bf08      	it	eq
 800d1ac:	694b      	ldreq	r3, [r1, #20]
 800d1ae:	600f      	str	r7, [r1, #0]
 800d1b0:	bf18      	it	ne
 800d1b2:	2300      	movne	r3, #0
 800d1b4:	eba6 0807 	sub.w	r8, r6, r7
 800d1b8:	608b      	str	r3, [r1, #8]
 800d1ba:	f1b8 0f00 	cmp.w	r8, #0
 800d1be:	dd9c      	ble.n	800d0fa <__sflush_r+0x1a>
 800d1c0:	6a21      	ldr	r1, [r4, #32]
 800d1c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1c4:	4643      	mov	r3, r8
 800d1c6:	463a      	mov	r2, r7
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b0      	blx	r6
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	dc06      	bgt.n	800d1de <__sflush_r+0xfe>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d6:	81a3      	strh	r3, [r4, #12]
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1dc:	e78e      	b.n	800d0fc <__sflush_r+0x1c>
 800d1de:	4407      	add	r7, r0
 800d1e0:	eba8 0800 	sub.w	r8, r8, r0
 800d1e4:	e7e9      	b.n	800d1ba <__sflush_r+0xda>
 800d1e6:	bf00      	nop
 800d1e8:	dfbffffe 	.word	0xdfbffffe

0800d1ec <_fflush_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	690b      	ldr	r3, [r1, #16]
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	b913      	cbnz	r3, 800d1fc <_fflush_r+0x10>
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	b118      	cbz	r0, 800d206 <_fflush_r+0x1a>
 800d1fe:	6a03      	ldr	r3, [r0, #32]
 800d200:	b90b      	cbnz	r3, 800d206 <_fflush_r+0x1a>
 800d202:	f7fc ff6f 	bl	800a0e4 <__sinit>
 800d206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d0f3      	beq.n	800d1f6 <_fflush_r+0xa>
 800d20e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d210:	07d0      	lsls	r0, r2, #31
 800d212:	d404      	bmi.n	800d21e <_fflush_r+0x32>
 800d214:	0599      	lsls	r1, r3, #22
 800d216:	d402      	bmi.n	800d21e <_fflush_r+0x32>
 800d218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d21a:	f7fd f8dc 	bl	800a3d6 <__retarget_lock_acquire_recursive>
 800d21e:	4628      	mov	r0, r5
 800d220:	4621      	mov	r1, r4
 800d222:	f7ff ff5d 	bl	800d0e0 <__sflush_r>
 800d226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d228:	07da      	lsls	r2, r3, #31
 800d22a:	4605      	mov	r5, r0
 800d22c:	d4e4      	bmi.n	800d1f8 <_fflush_r+0xc>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	059b      	lsls	r3, r3, #22
 800d232:	d4e1      	bmi.n	800d1f8 <_fflush_r+0xc>
 800d234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d236:	f7fd f8cf 	bl	800a3d8 <__retarget_lock_release_recursive>
 800d23a:	e7dd      	b.n	800d1f8 <_fflush_r+0xc>

0800d23c <__sccl>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	780b      	ldrb	r3, [r1, #0]
 800d240:	4604      	mov	r4, r0
 800d242:	2b5e      	cmp	r3, #94	; 0x5e
 800d244:	bf0b      	itete	eq
 800d246:	784b      	ldrbeq	r3, [r1, #1]
 800d248:	1c4a      	addne	r2, r1, #1
 800d24a:	1c8a      	addeq	r2, r1, #2
 800d24c:	2100      	movne	r1, #0
 800d24e:	bf08      	it	eq
 800d250:	2101      	moveq	r1, #1
 800d252:	3801      	subs	r0, #1
 800d254:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d258:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d25c:	42a8      	cmp	r0, r5
 800d25e:	d1fb      	bne.n	800d258 <__sccl+0x1c>
 800d260:	b90b      	cbnz	r3, 800d266 <__sccl+0x2a>
 800d262:	1e50      	subs	r0, r2, #1
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	f081 0101 	eor.w	r1, r1, #1
 800d26a:	54e1      	strb	r1, [r4, r3]
 800d26c:	4610      	mov	r0, r2
 800d26e:	4602      	mov	r2, r0
 800d270:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d274:	2d2d      	cmp	r5, #45	; 0x2d
 800d276:	d005      	beq.n	800d284 <__sccl+0x48>
 800d278:	2d5d      	cmp	r5, #93	; 0x5d
 800d27a:	d016      	beq.n	800d2aa <__sccl+0x6e>
 800d27c:	2d00      	cmp	r5, #0
 800d27e:	d0f1      	beq.n	800d264 <__sccl+0x28>
 800d280:	462b      	mov	r3, r5
 800d282:	e7f2      	b.n	800d26a <__sccl+0x2e>
 800d284:	7846      	ldrb	r6, [r0, #1]
 800d286:	2e5d      	cmp	r6, #93	; 0x5d
 800d288:	d0fa      	beq.n	800d280 <__sccl+0x44>
 800d28a:	42b3      	cmp	r3, r6
 800d28c:	dcf8      	bgt.n	800d280 <__sccl+0x44>
 800d28e:	3002      	adds	r0, #2
 800d290:	461a      	mov	r2, r3
 800d292:	3201      	adds	r2, #1
 800d294:	4296      	cmp	r6, r2
 800d296:	54a1      	strb	r1, [r4, r2]
 800d298:	dcfb      	bgt.n	800d292 <__sccl+0x56>
 800d29a:	1af2      	subs	r2, r6, r3
 800d29c:	3a01      	subs	r2, #1
 800d29e:	1c5d      	adds	r5, r3, #1
 800d2a0:	42b3      	cmp	r3, r6
 800d2a2:	bfa8      	it	ge
 800d2a4:	2200      	movge	r2, #0
 800d2a6:	18ab      	adds	r3, r5, r2
 800d2a8:	e7e1      	b.n	800d26e <__sccl+0x32>
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	e7da      	b.n	800d264 <__sccl+0x28>

0800d2ae <__submore>:
 800d2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d2b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2ba:	4299      	cmp	r1, r3
 800d2bc:	d11d      	bne.n	800d2fa <__submore+0x4c>
 800d2be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2c2:	f7fd ff09 	bl	800b0d8 <_malloc_r>
 800d2c6:	b918      	cbnz	r0, 800d2d0 <__submore+0x22>
 800d2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d2da:	6360      	str	r0, [r4, #52]	; 0x34
 800d2dc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d2e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d2e4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d2e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d2ec:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d2f0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d2f4:	6020      	str	r0, [r4, #0]
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	e7e8      	b.n	800d2cc <__submore+0x1e>
 800d2fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d2fc:	0077      	lsls	r7, r6, #1
 800d2fe:	463a      	mov	r2, r7
 800d300:	f000 fbf3 	bl	800daea <_realloc_r>
 800d304:	4605      	mov	r5, r0
 800d306:	2800      	cmp	r0, #0
 800d308:	d0de      	beq.n	800d2c8 <__submore+0x1a>
 800d30a:	eb00 0806 	add.w	r8, r0, r6
 800d30e:	4601      	mov	r1, r0
 800d310:	4632      	mov	r2, r6
 800d312:	4640      	mov	r0, r8
 800d314:	f7fd f861 	bl	800a3da <memcpy>
 800d318:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d31c:	f8c4 8000 	str.w	r8, [r4]
 800d320:	e7e9      	b.n	800d2f6 <__submore+0x48>

0800d322 <memmove>:
 800d322:	4288      	cmp	r0, r1
 800d324:	b510      	push	{r4, lr}
 800d326:	eb01 0402 	add.w	r4, r1, r2
 800d32a:	d902      	bls.n	800d332 <memmove+0x10>
 800d32c:	4284      	cmp	r4, r0
 800d32e:	4623      	mov	r3, r4
 800d330:	d807      	bhi.n	800d342 <memmove+0x20>
 800d332:	1e43      	subs	r3, r0, #1
 800d334:	42a1      	cmp	r1, r4
 800d336:	d008      	beq.n	800d34a <memmove+0x28>
 800d338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d33c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d340:	e7f8      	b.n	800d334 <memmove+0x12>
 800d342:	4402      	add	r2, r0
 800d344:	4601      	mov	r1, r0
 800d346:	428a      	cmp	r2, r1
 800d348:	d100      	bne.n	800d34c <memmove+0x2a>
 800d34a:	bd10      	pop	{r4, pc}
 800d34c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d350:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d354:	e7f7      	b.n	800d346 <memmove+0x24>

0800d356 <strncmp>:
 800d356:	b510      	push	{r4, lr}
 800d358:	b16a      	cbz	r2, 800d376 <strncmp+0x20>
 800d35a:	3901      	subs	r1, #1
 800d35c:	1884      	adds	r4, r0, r2
 800d35e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d362:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d366:	429a      	cmp	r2, r3
 800d368:	d103      	bne.n	800d372 <strncmp+0x1c>
 800d36a:	42a0      	cmp	r0, r4
 800d36c:	d001      	beq.n	800d372 <strncmp+0x1c>
 800d36e:	2a00      	cmp	r2, #0
 800d370:	d1f5      	bne.n	800d35e <strncmp+0x8>
 800d372:	1ad0      	subs	r0, r2, r3
 800d374:	bd10      	pop	{r4, pc}
 800d376:	4610      	mov	r0, r2
 800d378:	e7fc      	b.n	800d374 <strncmp+0x1e>
	...

0800d37c <_sbrk_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d06      	ldr	r5, [pc, #24]	; (800d398 <_sbrk_r+0x1c>)
 800d380:	2300      	movs	r3, #0
 800d382:	4604      	mov	r4, r0
 800d384:	4608      	mov	r0, r1
 800d386:	602b      	str	r3, [r5, #0]
 800d388:	f7f5 fed0 	bl	800312c <_sbrk>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_sbrk_r+0x1a>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_sbrk_r+0x1a>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	200011ec 	.word	0x200011ec
 800d39c:	00000000 	.word	0x00000000

0800d3a0 <nan>:
 800d3a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3a8 <nan+0x8>
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	00000000 	.word	0x00000000
 800d3ac:	7ff80000 	.word	0x7ff80000

0800d3b0 <__assert_func>:
 800d3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <__assert_func+0x2c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	68d8      	ldr	r0, [r3, #12]
 800d3be:	b14c      	cbz	r4, 800d3d4 <__assert_func+0x24>
 800d3c0:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <__assert_func+0x30>)
 800d3c2:	9100      	str	r1, [sp, #0]
 800d3c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3c8:	4906      	ldr	r1, [pc, #24]	; (800d3e4 <__assert_func+0x34>)
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	f000 fc3e 	bl	800dc4c <fiprintf>
 800d3d0:	f000 fc4e 	bl	800dc70 <abort>
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <__assert_func+0x38>)
 800d3d6:	461c      	mov	r4, r3
 800d3d8:	e7f3      	b.n	800d3c2 <__assert_func+0x12>
 800d3da:	bf00      	nop
 800d3dc:	20000078 	.word	0x20000078
 800d3e0:	0800ee9d 	.word	0x0800ee9d
 800d3e4:	0800eeaa 	.word	0x0800eeaa
 800d3e8:	0800eed8 	.word	0x0800eed8

0800d3ec <_calloc_r>:
 800d3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ee:	fba1 2402 	umull	r2, r4, r1, r2
 800d3f2:	b94c      	cbnz	r4, 800d408 <_calloc_r+0x1c>
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	9201      	str	r2, [sp, #4]
 800d3f8:	f7fd fe6e 	bl	800b0d8 <_malloc_r>
 800d3fc:	9a01      	ldr	r2, [sp, #4]
 800d3fe:	4605      	mov	r5, r0
 800d400:	b930      	cbnz	r0, 800d410 <_calloc_r+0x24>
 800d402:	4628      	mov	r0, r5
 800d404:	b003      	add	sp, #12
 800d406:	bd30      	pop	{r4, r5, pc}
 800d408:	220c      	movs	r2, #12
 800d40a:	6002      	str	r2, [r0, #0]
 800d40c:	2500      	movs	r5, #0
 800d40e:	e7f8      	b.n	800d402 <_calloc_r+0x16>
 800d410:	4621      	mov	r1, r4
 800d412:	f7fc ff62 	bl	800a2da <memset>
 800d416:	e7f4      	b.n	800d402 <_calloc_r+0x16>

0800d418 <rshift>:
 800d418:	6903      	ldr	r3, [r0, #16]
 800d41a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d41e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d422:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d426:	f100 0414 	add.w	r4, r0, #20
 800d42a:	dd45      	ble.n	800d4b8 <rshift+0xa0>
 800d42c:	f011 011f 	ands.w	r1, r1, #31
 800d430:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d434:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d438:	d10c      	bne.n	800d454 <rshift+0x3c>
 800d43a:	f100 0710 	add.w	r7, r0, #16
 800d43e:	4629      	mov	r1, r5
 800d440:	42b1      	cmp	r1, r6
 800d442:	d334      	bcc.n	800d4ae <rshift+0x96>
 800d444:	1a9b      	subs	r3, r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	1eea      	subs	r2, r5, #3
 800d44a:	4296      	cmp	r6, r2
 800d44c:	bf38      	it	cc
 800d44e:	2300      	movcc	r3, #0
 800d450:	4423      	add	r3, r4
 800d452:	e015      	b.n	800d480 <rshift+0x68>
 800d454:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d458:	f1c1 0820 	rsb	r8, r1, #32
 800d45c:	40cf      	lsrs	r7, r1
 800d45e:	f105 0e04 	add.w	lr, r5, #4
 800d462:	46a1      	mov	r9, r4
 800d464:	4576      	cmp	r6, lr
 800d466:	46f4      	mov	ip, lr
 800d468:	d815      	bhi.n	800d496 <rshift+0x7e>
 800d46a:	1a9a      	subs	r2, r3, r2
 800d46c:	0092      	lsls	r2, r2, #2
 800d46e:	3a04      	subs	r2, #4
 800d470:	3501      	adds	r5, #1
 800d472:	42ae      	cmp	r6, r5
 800d474:	bf38      	it	cc
 800d476:	2200      	movcc	r2, #0
 800d478:	18a3      	adds	r3, r4, r2
 800d47a:	50a7      	str	r7, [r4, r2]
 800d47c:	b107      	cbz	r7, 800d480 <rshift+0x68>
 800d47e:	3304      	adds	r3, #4
 800d480:	1b1a      	subs	r2, r3, r4
 800d482:	42a3      	cmp	r3, r4
 800d484:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d488:	bf08      	it	eq
 800d48a:	2300      	moveq	r3, #0
 800d48c:	6102      	str	r2, [r0, #16]
 800d48e:	bf08      	it	eq
 800d490:	6143      	streq	r3, [r0, #20]
 800d492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d496:	f8dc c000 	ldr.w	ip, [ip]
 800d49a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d49e:	ea4c 0707 	orr.w	r7, ip, r7
 800d4a2:	f849 7b04 	str.w	r7, [r9], #4
 800d4a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d4aa:	40cf      	lsrs	r7, r1
 800d4ac:	e7da      	b.n	800d464 <rshift+0x4c>
 800d4ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800d4b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d4b6:	e7c3      	b.n	800d440 <rshift+0x28>
 800d4b8:	4623      	mov	r3, r4
 800d4ba:	e7e1      	b.n	800d480 <rshift+0x68>

0800d4bc <__hexdig_fun>:
 800d4bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d4c0:	2b09      	cmp	r3, #9
 800d4c2:	d802      	bhi.n	800d4ca <__hexdig_fun+0xe>
 800d4c4:	3820      	subs	r0, #32
 800d4c6:	b2c0      	uxtb	r0, r0
 800d4c8:	4770      	bx	lr
 800d4ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d4ce:	2b05      	cmp	r3, #5
 800d4d0:	d801      	bhi.n	800d4d6 <__hexdig_fun+0x1a>
 800d4d2:	3847      	subs	r0, #71	; 0x47
 800d4d4:	e7f7      	b.n	800d4c6 <__hexdig_fun+0xa>
 800d4d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d4da:	2b05      	cmp	r3, #5
 800d4dc:	d801      	bhi.n	800d4e2 <__hexdig_fun+0x26>
 800d4de:	3827      	subs	r0, #39	; 0x27
 800d4e0:	e7f1      	b.n	800d4c6 <__hexdig_fun+0xa>
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	4770      	bx	lr
	...

0800d4e8 <__gethex>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	4617      	mov	r7, r2
 800d4ee:	680a      	ldr	r2, [r1, #0]
 800d4f0:	b085      	sub	sp, #20
 800d4f2:	f102 0b02 	add.w	fp, r2, #2
 800d4f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d4fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d4fe:	4681      	mov	r9, r0
 800d500:	468a      	mov	sl, r1
 800d502:	9302      	str	r3, [sp, #8]
 800d504:	32fe      	adds	r2, #254	; 0xfe
 800d506:	eb02 030b 	add.w	r3, r2, fp
 800d50a:	46d8      	mov	r8, fp
 800d50c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	2830      	cmp	r0, #48	; 0x30
 800d514:	d0f7      	beq.n	800d506 <__gethex+0x1e>
 800d516:	f7ff ffd1 	bl	800d4bc <__hexdig_fun>
 800d51a:	4604      	mov	r4, r0
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d138      	bne.n	800d592 <__gethex+0xaa>
 800d520:	49a7      	ldr	r1, [pc, #668]	; (800d7c0 <__gethex+0x2d8>)
 800d522:	2201      	movs	r2, #1
 800d524:	4640      	mov	r0, r8
 800d526:	f7ff ff16 	bl	800d356 <strncmp>
 800d52a:	4606      	mov	r6, r0
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d169      	bne.n	800d604 <__gethex+0x11c>
 800d530:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d534:	465d      	mov	r5, fp
 800d536:	f7ff ffc1 	bl	800d4bc <__hexdig_fun>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d064      	beq.n	800d608 <__gethex+0x120>
 800d53e:	465a      	mov	r2, fp
 800d540:	7810      	ldrb	r0, [r2, #0]
 800d542:	2830      	cmp	r0, #48	; 0x30
 800d544:	4690      	mov	r8, r2
 800d546:	f102 0201 	add.w	r2, r2, #1
 800d54a:	d0f9      	beq.n	800d540 <__gethex+0x58>
 800d54c:	f7ff ffb6 	bl	800d4bc <__hexdig_fun>
 800d550:	2301      	movs	r3, #1
 800d552:	fab0 f480 	clz	r4, r0
 800d556:	0964      	lsrs	r4, r4, #5
 800d558:	465e      	mov	r6, fp
 800d55a:	9301      	str	r3, [sp, #4]
 800d55c:	4642      	mov	r2, r8
 800d55e:	4615      	mov	r5, r2
 800d560:	3201      	adds	r2, #1
 800d562:	7828      	ldrb	r0, [r5, #0]
 800d564:	f7ff ffaa 	bl	800d4bc <__hexdig_fun>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d1f8      	bne.n	800d55e <__gethex+0x76>
 800d56c:	4994      	ldr	r1, [pc, #592]	; (800d7c0 <__gethex+0x2d8>)
 800d56e:	2201      	movs	r2, #1
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff fef0 	bl	800d356 <strncmp>
 800d576:	b978      	cbnz	r0, 800d598 <__gethex+0xb0>
 800d578:	b946      	cbnz	r6, 800d58c <__gethex+0xa4>
 800d57a:	1c6e      	adds	r6, r5, #1
 800d57c:	4632      	mov	r2, r6
 800d57e:	4615      	mov	r5, r2
 800d580:	3201      	adds	r2, #1
 800d582:	7828      	ldrb	r0, [r5, #0]
 800d584:	f7ff ff9a 	bl	800d4bc <__hexdig_fun>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d1f8      	bne.n	800d57e <__gethex+0x96>
 800d58c:	1b73      	subs	r3, r6, r5
 800d58e:	009e      	lsls	r6, r3, #2
 800d590:	e004      	b.n	800d59c <__gethex+0xb4>
 800d592:	2400      	movs	r4, #0
 800d594:	4626      	mov	r6, r4
 800d596:	e7e1      	b.n	800d55c <__gethex+0x74>
 800d598:	2e00      	cmp	r6, #0
 800d59a:	d1f7      	bne.n	800d58c <__gethex+0xa4>
 800d59c:	782b      	ldrb	r3, [r5, #0]
 800d59e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d5a2:	2b50      	cmp	r3, #80	; 0x50
 800d5a4:	d13d      	bne.n	800d622 <__gethex+0x13a>
 800d5a6:	786b      	ldrb	r3, [r5, #1]
 800d5a8:	2b2b      	cmp	r3, #43	; 0x2b
 800d5aa:	d02f      	beq.n	800d60c <__gethex+0x124>
 800d5ac:	2b2d      	cmp	r3, #45	; 0x2d
 800d5ae:	d031      	beq.n	800d614 <__gethex+0x12c>
 800d5b0:	1c69      	adds	r1, r5, #1
 800d5b2:	f04f 0b00 	mov.w	fp, #0
 800d5b6:	7808      	ldrb	r0, [r1, #0]
 800d5b8:	f7ff ff80 	bl	800d4bc <__hexdig_fun>
 800d5bc:	1e42      	subs	r2, r0, #1
 800d5be:	b2d2      	uxtb	r2, r2
 800d5c0:	2a18      	cmp	r2, #24
 800d5c2:	d82e      	bhi.n	800d622 <__gethex+0x13a>
 800d5c4:	f1a0 0210 	sub.w	r2, r0, #16
 800d5c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d5cc:	f7ff ff76 	bl	800d4bc <__hexdig_fun>
 800d5d0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d5d4:	fa5f fc8c 	uxtb.w	ip, ip
 800d5d8:	f1bc 0f18 	cmp.w	ip, #24
 800d5dc:	d91d      	bls.n	800d61a <__gethex+0x132>
 800d5de:	f1bb 0f00 	cmp.w	fp, #0
 800d5e2:	d000      	beq.n	800d5e6 <__gethex+0xfe>
 800d5e4:	4252      	negs	r2, r2
 800d5e6:	4416      	add	r6, r2
 800d5e8:	f8ca 1000 	str.w	r1, [sl]
 800d5ec:	b1dc      	cbz	r4, 800d626 <__gethex+0x13e>
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bf14      	ite	ne
 800d5f4:	f04f 0800 	movne.w	r8, #0
 800d5f8:	f04f 0806 	moveq.w	r8, #6
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	b005      	add	sp, #20
 800d600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d604:	4645      	mov	r5, r8
 800d606:	4626      	mov	r6, r4
 800d608:	2401      	movs	r4, #1
 800d60a:	e7c7      	b.n	800d59c <__gethex+0xb4>
 800d60c:	f04f 0b00 	mov.w	fp, #0
 800d610:	1ca9      	adds	r1, r5, #2
 800d612:	e7d0      	b.n	800d5b6 <__gethex+0xce>
 800d614:	f04f 0b01 	mov.w	fp, #1
 800d618:	e7fa      	b.n	800d610 <__gethex+0x128>
 800d61a:	230a      	movs	r3, #10
 800d61c:	fb03 0002 	mla	r0, r3, r2, r0
 800d620:	e7d0      	b.n	800d5c4 <__gethex+0xdc>
 800d622:	4629      	mov	r1, r5
 800d624:	e7e0      	b.n	800d5e8 <__gethex+0x100>
 800d626:	eba5 0308 	sub.w	r3, r5, r8
 800d62a:	3b01      	subs	r3, #1
 800d62c:	4621      	mov	r1, r4
 800d62e:	2b07      	cmp	r3, #7
 800d630:	dc0a      	bgt.n	800d648 <__gethex+0x160>
 800d632:	4648      	mov	r0, r9
 800d634:	f7fd fddc 	bl	800b1f0 <_Balloc>
 800d638:	4604      	mov	r4, r0
 800d63a:	b940      	cbnz	r0, 800d64e <__gethex+0x166>
 800d63c:	4b61      	ldr	r3, [pc, #388]	; (800d7c4 <__gethex+0x2dc>)
 800d63e:	4602      	mov	r2, r0
 800d640:	21e4      	movs	r1, #228	; 0xe4
 800d642:	4861      	ldr	r0, [pc, #388]	; (800d7c8 <__gethex+0x2e0>)
 800d644:	f7ff feb4 	bl	800d3b0 <__assert_func>
 800d648:	3101      	adds	r1, #1
 800d64a:	105b      	asrs	r3, r3, #1
 800d64c:	e7ef      	b.n	800d62e <__gethex+0x146>
 800d64e:	f100 0a14 	add.w	sl, r0, #20
 800d652:	2300      	movs	r3, #0
 800d654:	495a      	ldr	r1, [pc, #360]	; (800d7c0 <__gethex+0x2d8>)
 800d656:	f8cd a004 	str.w	sl, [sp, #4]
 800d65a:	469b      	mov	fp, r3
 800d65c:	45a8      	cmp	r8, r5
 800d65e:	d342      	bcc.n	800d6e6 <__gethex+0x1fe>
 800d660:	9801      	ldr	r0, [sp, #4]
 800d662:	f840 bb04 	str.w	fp, [r0], #4
 800d666:	eba0 000a 	sub.w	r0, r0, sl
 800d66a:	1080      	asrs	r0, r0, #2
 800d66c:	6120      	str	r0, [r4, #16]
 800d66e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d672:	4658      	mov	r0, fp
 800d674:	f7fd feae 	bl	800b3d4 <__hi0bits>
 800d678:	683d      	ldr	r5, [r7, #0]
 800d67a:	eba8 0000 	sub.w	r0, r8, r0
 800d67e:	42a8      	cmp	r0, r5
 800d680:	dd59      	ble.n	800d736 <__gethex+0x24e>
 800d682:	eba0 0805 	sub.w	r8, r0, r5
 800d686:	4641      	mov	r1, r8
 800d688:	4620      	mov	r0, r4
 800d68a:	f7fe fa3a 	bl	800bb02 <__any_on>
 800d68e:	4683      	mov	fp, r0
 800d690:	b1b8      	cbz	r0, 800d6c2 <__gethex+0x1da>
 800d692:	f108 33ff 	add.w	r3, r8, #4294967295
 800d696:	1159      	asrs	r1, r3, #5
 800d698:	f003 021f 	and.w	r2, r3, #31
 800d69c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d6a0:	f04f 0b01 	mov.w	fp, #1
 800d6a4:	fa0b f202 	lsl.w	r2, fp, r2
 800d6a8:	420a      	tst	r2, r1
 800d6aa:	d00a      	beq.n	800d6c2 <__gethex+0x1da>
 800d6ac:	455b      	cmp	r3, fp
 800d6ae:	dd06      	ble.n	800d6be <__gethex+0x1d6>
 800d6b0:	f1a8 0102 	sub.w	r1, r8, #2
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f7fe fa24 	bl	800bb02 <__any_on>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d138      	bne.n	800d730 <__gethex+0x248>
 800d6be:	f04f 0b02 	mov.w	fp, #2
 800d6c2:	4641      	mov	r1, r8
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f7ff fea7 	bl	800d418 <rshift>
 800d6ca:	4446      	add	r6, r8
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	42b3      	cmp	r3, r6
 800d6d0:	da41      	bge.n	800d756 <__gethex+0x26e>
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	4648      	mov	r0, r9
 800d6d6:	f7fd fdcb 	bl	800b270 <_Bfree>
 800d6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6dc:	2300      	movs	r3, #0
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d6e4:	e78a      	b.n	800d5fc <__gethex+0x114>
 800d6e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d6ea:	2a2e      	cmp	r2, #46	; 0x2e
 800d6ec:	d014      	beq.n	800d718 <__gethex+0x230>
 800d6ee:	2b20      	cmp	r3, #32
 800d6f0:	d106      	bne.n	800d700 <__gethex+0x218>
 800d6f2:	9b01      	ldr	r3, [sp, #4]
 800d6f4:	f843 bb04 	str.w	fp, [r3], #4
 800d6f8:	f04f 0b00 	mov.w	fp, #0
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	465b      	mov	r3, fp
 800d700:	7828      	ldrb	r0, [r5, #0]
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	f7ff feda 	bl	800d4bc <__hexdig_fun>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	f000 000f 	and.w	r0, r0, #15
 800d70e:	4098      	lsls	r0, r3
 800d710:	ea4b 0b00 	orr.w	fp, fp, r0
 800d714:	3304      	adds	r3, #4
 800d716:	e7a1      	b.n	800d65c <__gethex+0x174>
 800d718:	45a8      	cmp	r8, r5
 800d71a:	d8e8      	bhi.n	800d6ee <__gethex+0x206>
 800d71c:	2201      	movs	r2, #1
 800d71e:	4628      	mov	r0, r5
 800d720:	9303      	str	r3, [sp, #12]
 800d722:	f7ff fe18 	bl	800d356 <strncmp>
 800d726:	4926      	ldr	r1, [pc, #152]	; (800d7c0 <__gethex+0x2d8>)
 800d728:	9b03      	ldr	r3, [sp, #12]
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d1df      	bne.n	800d6ee <__gethex+0x206>
 800d72e:	e795      	b.n	800d65c <__gethex+0x174>
 800d730:	f04f 0b03 	mov.w	fp, #3
 800d734:	e7c5      	b.n	800d6c2 <__gethex+0x1da>
 800d736:	da0b      	bge.n	800d750 <__gethex+0x268>
 800d738:	eba5 0800 	sub.w	r8, r5, r0
 800d73c:	4621      	mov	r1, r4
 800d73e:	4642      	mov	r2, r8
 800d740:	4648      	mov	r0, r9
 800d742:	f7fd ffaf 	bl	800b6a4 <__lshift>
 800d746:	eba6 0608 	sub.w	r6, r6, r8
 800d74a:	4604      	mov	r4, r0
 800d74c:	f100 0a14 	add.w	sl, r0, #20
 800d750:	f04f 0b00 	mov.w	fp, #0
 800d754:	e7ba      	b.n	800d6cc <__gethex+0x1e4>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	42b3      	cmp	r3, r6
 800d75a:	dd73      	ble.n	800d844 <__gethex+0x35c>
 800d75c:	1b9e      	subs	r6, r3, r6
 800d75e:	42b5      	cmp	r5, r6
 800d760:	dc34      	bgt.n	800d7cc <__gethex+0x2e4>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2b02      	cmp	r3, #2
 800d766:	d023      	beq.n	800d7b0 <__gethex+0x2c8>
 800d768:	2b03      	cmp	r3, #3
 800d76a:	d025      	beq.n	800d7b8 <__gethex+0x2d0>
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d115      	bne.n	800d79c <__gethex+0x2b4>
 800d770:	42b5      	cmp	r5, r6
 800d772:	d113      	bne.n	800d79c <__gethex+0x2b4>
 800d774:	2d01      	cmp	r5, #1
 800d776:	d10b      	bne.n	800d790 <__gethex+0x2a8>
 800d778:	9a02      	ldr	r2, [sp, #8]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	2301      	movs	r3, #1
 800d780:	6123      	str	r3, [r4, #16]
 800d782:	f8ca 3000 	str.w	r3, [sl]
 800d786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d788:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d78c:	601c      	str	r4, [r3, #0]
 800d78e:	e735      	b.n	800d5fc <__gethex+0x114>
 800d790:	1e69      	subs	r1, r5, #1
 800d792:	4620      	mov	r0, r4
 800d794:	f7fe f9b5 	bl	800bb02 <__any_on>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d1ed      	bne.n	800d778 <__gethex+0x290>
 800d79c:	4621      	mov	r1, r4
 800d79e:	4648      	mov	r0, r9
 800d7a0:	f7fd fd66 	bl	800b270 <_Bfree>
 800d7a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d7ae:	e725      	b.n	800d5fc <__gethex+0x114>
 800d7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1f2      	bne.n	800d79c <__gethex+0x2b4>
 800d7b6:	e7df      	b.n	800d778 <__gethex+0x290>
 800d7b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1dc      	bne.n	800d778 <__gethex+0x290>
 800d7be:	e7ed      	b.n	800d79c <__gethex+0x2b4>
 800d7c0:	0800ed14 	.word	0x0800ed14
 800d7c4:	0800eba7 	.word	0x0800eba7
 800d7c8:	0800eed9 	.word	0x0800eed9
 800d7cc:	f106 38ff 	add.w	r8, r6, #4294967295
 800d7d0:	f1bb 0f00 	cmp.w	fp, #0
 800d7d4:	d133      	bne.n	800d83e <__gethex+0x356>
 800d7d6:	f1b8 0f00 	cmp.w	r8, #0
 800d7da:	d004      	beq.n	800d7e6 <__gethex+0x2fe>
 800d7dc:	4641      	mov	r1, r8
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f7fe f98f 	bl	800bb02 <__any_on>
 800d7e4:	4683      	mov	fp, r0
 800d7e6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d7f0:	f008 081f 	and.w	r8, r8, #31
 800d7f4:	fa03 f308 	lsl.w	r3, r3, r8
 800d7f8:	4213      	tst	r3, r2
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	bf18      	it	ne
 800d800:	f04b 0b02 	orrne.w	fp, fp, #2
 800d804:	1bad      	subs	r5, r5, r6
 800d806:	f7ff fe07 	bl	800d418 <rshift>
 800d80a:	687e      	ldr	r6, [r7, #4]
 800d80c:	f04f 0802 	mov.w	r8, #2
 800d810:	f1bb 0f00 	cmp.w	fp, #0
 800d814:	d04a      	beq.n	800d8ac <__gethex+0x3c4>
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d016      	beq.n	800d84a <__gethex+0x362>
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d018      	beq.n	800d852 <__gethex+0x36a>
 800d820:	2b01      	cmp	r3, #1
 800d822:	d109      	bne.n	800d838 <__gethex+0x350>
 800d824:	f01b 0f02 	tst.w	fp, #2
 800d828:	d006      	beq.n	800d838 <__gethex+0x350>
 800d82a:	f8da 3000 	ldr.w	r3, [sl]
 800d82e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d832:	f01b 0f01 	tst.w	fp, #1
 800d836:	d10f      	bne.n	800d858 <__gethex+0x370>
 800d838:	f048 0810 	orr.w	r8, r8, #16
 800d83c:	e036      	b.n	800d8ac <__gethex+0x3c4>
 800d83e:	f04f 0b01 	mov.w	fp, #1
 800d842:	e7d0      	b.n	800d7e6 <__gethex+0x2fe>
 800d844:	f04f 0801 	mov.w	r8, #1
 800d848:	e7e2      	b.n	800d810 <__gethex+0x328>
 800d84a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d84c:	f1c3 0301 	rsb	r3, r3, #1
 800d850:	930f      	str	r3, [sp, #60]	; 0x3c
 800d852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0ef      	beq.n	800d838 <__gethex+0x350>
 800d858:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d85c:	f104 0214 	add.w	r2, r4, #20
 800d860:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d86a:	2300      	movs	r3, #0
 800d86c:	4694      	mov	ip, r2
 800d86e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d872:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d876:	d01e      	beq.n	800d8b6 <__gethex+0x3ce>
 800d878:	3101      	adds	r1, #1
 800d87a:	f8cc 1000 	str.w	r1, [ip]
 800d87e:	f1b8 0f02 	cmp.w	r8, #2
 800d882:	f104 0214 	add.w	r2, r4, #20
 800d886:	d13d      	bne.n	800d904 <__gethex+0x41c>
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	3b01      	subs	r3, #1
 800d88c:	42ab      	cmp	r3, r5
 800d88e:	d10b      	bne.n	800d8a8 <__gethex+0x3c0>
 800d890:	1169      	asrs	r1, r5, #5
 800d892:	2301      	movs	r3, #1
 800d894:	f005 051f 	and.w	r5, r5, #31
 800d898:	fa03 f505 	lsl.w	r5, r3, r5
 800d89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8a0:	421d      	tst	r5, r3
 800d8a2:	bf18      	it	ne
 800d8a4:	f04f 0801 	movne.w	r8, #1
 800d8a8:	f048 0820 	orr.w	r8, r8, #32
 800d8ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ae:	601c      	str	r4, [r3, #0]
 800d8b0:	9b02      	ldr	r3, [sp, #8]
 800d8b2:	601e      	str	r6, [r3, #0]
 800d8b4:	e6a2      	b.n	800d5fc <__gethex+0x114>
 800d8b6:	4290      	cmp	r0, r2
 800d8b8:	f842 3c04 	str.w	r3, [r2, #-4]
 800d8bc:	d8d6      	bhi.n	800d86c <__gethex+0x384>
 800d8be:	68a2      	ldr	r2, [r4, #8]
 800d8c0:	4593      	cmp	fp, r2
 800d8c2:	db17      	blt.n	800d8f4 <__gethex+0x40c>
 800d8c4:	6861      	ldr	r1, [r4, #4]
 800d8c6:	4648      	mov	r0, r9
 800d8c8:	3101      	adds	r1, #1
 800d8ca:	f7fd fc91 	bl	800b1f0 <_Balloc>
 800d8ce:	4682      	mov	sl, r0
 800d8d0:	b918      	cbnz	r0, 800d8da <__gethex+0x3f2>
 800d8d2:	4b1b      	ldr	r3, [pc, #108]	; (800d940 <__gethex+0x458>)
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	2184      	movs	r1, #132	; 0x84
 800d8d8:	e6b3      	b.n	800d642 <__gethex+0x15a>
 800d8da:	6922      	ldr	r2, [r4, #16]
 800d8dc:	3202      	adds	r2, #2
 800d8de:	f104 010c 	add.w	r1, r4, #12
 800d8e2:	0092      	lsls	r2, r2, #2
 800d8e4:	300c      	adds	r0, #12
 800d8e6:	f7fc fd78 	bl	800a3da <memcpy>
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	4648      	mov	r0, r9
 800d8ee:	f7fd fcbf 	bl	800b270 <_Bfree>
 800d8f2:	4654      	mov	r4, sl
 800d8f4:	6922      	ldr	r2, [r4, #16]
 800d8f6:	1c51      	adds	r1, r2, #1
 800d8f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d8fc:	6121      	str	r1, [r4, #16]
 800d8fe:	2101      	movs	r1, #1
 800d900:	6151      	str	r1, [r2, #20]
 800d902:	e7bc      	b.n	800d87e <__gethex+0x396>
 800d904:	6921      	ldr	r1, [r4, #16]
 800d906:	4559      	cmp	r1, fp
 800d908:	dd0b      	ble.n	800d922 <__gethex+0x43a>
 800d90a:	2101      	movs	r1, #1
 800d90c:	4620      	mov	r0, r4
 800d90e:	f7ff fd83 	bl	800d418 <rshift>
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	3601      	adds	r6, #1
 800d916:	42b3      	cmp	r3, r6
 800d918:	f6ff aedb 	blt.w	800d6d2 <__gethex+0x1ea>
 800d91c:	f04f 0801 	mov.w	r8, #1
 800d920:	e7c2      	b.n	800d8a8 <__gethex+0x3c0>
 800d922:	f015 051f 	ands.w	r5, r5, #31
 800d926:	d0f9      	beq.n	800d91c <__gethex+0x434>
 800d928:	9b01      	ldr	r3, [sp, #4]
 800d92a:	441a      	add	r2, r3
 800d92c:	f1c5 0520 	rsb	r5, r5, #32
 800d930:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d934:	f7fd fd4e 	bl	800b3d4 <__hi0bits>
 800d938:	42a8      	cmp	r0, r5
 800d93a:	dbe6      	blt.n	800d90a <__gethex+0x422>
 800d93c:	e7ee      	b.n	800d91c <__gethex+0x434>
 800d93e:	bf00      	nop
 800d940:	0800eba7 	.word	0x0800eba7

0800d944 <L_shift>:
 800d944:	f1c2 0208 	rsb	r2, r2, #8
 800d948:	0092      	lsls	r2, r2, #2
 800d94a:	b570      	push	{r4, r5, r6, lr}
 800d94c:	f1c2 0620 	rsb	r6, r2, #32
 800d950:	6843      	ldr	r3, [r0, #4]
 800d952:	6804      	ldr	r4, [r0, #0]
 800d954:	fa03 f506 	lsl.w	r5, r3, r6
 800d958:	432c      	orrs	r4, r5
 800d95a:	40d3      	lsrs	r3, r2
 800d95c:	6004      	str	r4, [r0, #0]
 800d95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d962:	4288      	cmp	r0, r1
 800d964:	d3f4      	bcc.n	800d950 <L_shift+0xc>
 800d966:	bd70      	pop	{r4, r5, r6, pc}

0800d968 <__match>:
 800d968:	b530      	push	{r4, r5, lr}
 800d96a:	6803      	ldr	r3, [r0, #0]
 800d96c:	3301      	adds	r3, #1
 800d96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d972:	b914      	cbnz	r4, 800d97a <__match+0x12>
 800d974:	6003      	str	r3, [r0, #0]
 800d976:	2001      	movs	r0, #1
 800d978:	bd30      	pop	{r4, r5, pc}
 800d97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d982:	2d19      	cmp	r5, #25
 800d984:	bf98      	it	ls
 800d986:	3220      	addls	r2, #32
 800d988:	42a2      	cmp	r2, r4
 800d98a:	d0f0      	beq.n	800d96e <__match+0x6>
 800d98c:	2000      	movs	r0, #0
 800d98e:	e7f3      	b.n	800d978 <__match+0x10>

0800d990 <__hexnan>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	680b      	ldr	r3, [r1, #0]
 800d996:	6801      	ldr	r1, [r0, #0]
 800d998:	115e      	asrs	r6, r3, #5
 800d99a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d99e:	f013 031f 	ands.w	r3, r3, #31
 800d9a2:	b087      	sub	sp, #28
 800d9a4:	bf18      	it	ne
 800d9a6:	3604      	addne	r6, #4
 800d9a8:	2500      	movs	r5, #0
 800d9aa:	1f37      	subs	r7, r6, #4
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	4690      	mov	r8, r2
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d9b6:	46b9      	mov	r9, r7
 800d9b8:	463c      	mov	r4, r7
 800d9ba:	9502      	str	r5, [sp, #8]
 800d9bc:	46ab      	mov	fp, r5
 800d9be:	784a      	ldrb	r2, [r1, #1]
 800d9c0:	1c4b      	adds	r3, r1, #1
 800d9c2:	9303      	str	r3, [sp, #12]
 800d9c4:	b342      	cbz	r2, 800da18 <__hexnan+0x88>
 800d9c6:	4610      	mov	r0, r2
 800d9c8:	9105      	str	r1, [sp, #20]
 800d9ca:	9204      	str	r2, [sp, #16]
 800d9cc:	f7ff fd76 	bl	800d4bc <__hexdig_fun>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d14f      	bne.n	800da74 <__hexnan+0xe4>
 800d9d4:	9a04      	ldr	r2, [sp, #16]
 800d9d6:	9905      	ldr	r1, [sp, #20]
 800d9d8:	2a20      	cmp	r2, #32
 800d9da:	d818      	bhi.n	800da0e <__hexnan+0x7e>
 800d9dc:	9b02      	ldr	r3, [sp, #8]
 800d9de:	459b      	cmp	fp, r3
 800d9e0:	dd13      	ble.n	800da0a <__hexnan+0x7a>
 800d9e2:	454c      	cmp	r4, r9
 800d9e4:	d206      	bcs.n	800d9f4 <__hexnan+0x64>
 800d9e6:	2d07      	cmp	r5, #7
 800d9e8:	dc04      	bgt.n	800d9f4 <__hexnan+0x64>
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	4649      	mov	r1, r9
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f7ff ffa8 	bl	800d944 <L_shift>
 800d9f4:	4544      	cmp	r4, r8
 800d9f6:	d950      	bls.n	800da9a <__hexnan+0x10a>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800d9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800da02:	f8cd b008 	str.w	fp, [sp, #8]
 800da06:	464c      	mov	r4, r9
 800da08:	461d      	mov	r5, r3
 800da0a:	9903      	ldr	r1, [sp, #12]
 800da0c:	e7d7      	b.n	800d9be <__hexnan+0x2e>
 800da0e:	2a29      	cmp	r2, #41	; 0x29
 800da10:	d155      	bne.n	800dabe <__hexnan+0x12e>
 800da12:	3102      	adds	r1, #2
 800da14:	f8ca 1000 	str.w	r1, [sl]
 800da18:	f1bb 0f00 	cmp.w	fp, #0
 800da1c:	d04f      	beq.n	800dabe <__hexnan+0x12e>
 800da1e:	454c      	cmp	r4, r9
 800da20:	d206      	bcs.n	800da30 <__hexnan+0xa0>
 800da22:	2d07      	cmp	r5, #7
 800da24:	dc04      	bgt.n	800da30 <__hexnan+0xa0>
 800da26:	462a      	mov	r2, r5
 800da28:	4649      	mov	r1, r9
 800da2a:	4620      	mov	r0, r4
 800da2c:	f7ff ff8a 	bl	800d944 <L_shift>
 800da30:	4544      	cmp	r4, r8
 800da32:	d934      	bls.n	800da9e <__hexnan+0x10e>
 800da34:	f1a8 0204 	sub.w	r2, r8, #4
 800da38:	4623      	mov	r3, r4
 800da3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800da3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800da42:	429f      	cmp	r7, r3
 800da44:	d2f9      	bcs.n	800da3a <__hexnan+0xaa>
 800da46:	1b3b      	subs	r3, r7, r4
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	3304      	adds	r3, #4
 800da4e:	3e03      	subs	r6, #3
 800da50:	3401      	adds	r4, #1
 800da52:	42a6      	cmp	r6, r4
 800da54:	bf38      	it	cc
 800da56:	2304      	movcc	r3, #4
 800da58:	4443      	add	r3, r8
 800da5a:	2200      	movs	r2, #0
 800da5c:	f843 2b04 	str.w	r2, [r3], #4
 800da60:	429f      	cmp	r7, r3
 800da62:	d2fb      	bcs.n	800da5c <__hexnan+0xcc>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	b91b      	cbnz	r3, 800da70 <__hexnan+0xe0>
 800da68:	4547      	cmp	r7, r8
 800da6a:	d126      	bne.n	800daba <__hexnan+0x12a>
 800da6c:	2301      	movs	r3, #1
 800da6e:	603b      	str	r3, [r7, #0]
 800da70:	2005      	movs	r0, #5
 800da72:	e025      	b.n	800dac0 <__hexnan+0x130>
 800da74:	3501      	adds	r5, #1
 800da76:	2d08      	cmp	r5, #8
 800da78:	f10b 0b01 	add.w	fp, fp, #1
 800da7c:	dd06      	ble.n	800da8c <__hexnan+0xfc>
 800da7e:	4544      	cmp	r4, r8
 800da80:	d9c3      	bls.n	800da0a <__hexnan+0x7a>
 800da82:	2300      	movs	r3, #0
 800da84:	f844 3c04 	str.w	r3, [r4, #-4]
 800da88:	2501      	movs	r5, #1
 800da8a:	3c04      	subs	r4, #4
 800da8c:	6822      	ldr	r2, [r4, #0]
 800da8e:	f000 000f 	and.w	r0, r0, #15
 800da92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da96:	6020      	str	r0, [r4, #0]
 800da98:	e7b7      	b.n	800da0a <__hexnan+0x7a>
 800da9a:	2508      	movs	r5, #8
 800da9c:	e7b5      	b.n	800da0a <__hexnan+0x7a>
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d0df      	beq.n	800da64 <__hexnan+0xd4>
 800daa4:	f1c3 0320 	rsb	r3, r3, #32
 800daa8:	f04f 32ff 	mov.w	r2, #4294967295
 800daac:	40da      	lsrs	r2, r3
 800daae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dab2:	4013      	ands	r3, r2
 800dab4:	f846 3c04 	str.w	r3, [r6, #-4]
 800dab8:	e7d4      	b.n	800da64 <__hexnan+0xd4>
 800daba:	3f04      	subs	r7, #4
 800dabc:	e7d2      	b.n	800da64 <__hexnan+0xd4>
 800dabe:	2004      	movs	r0, #4
 800dac0:	b007      	add	sp, #28
 800dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dac6 <__ascii_mbtowc>:
 800dac6:	b082      	sub	sp, #8
 800dac8:	b901      	cbnz	r1, 800dacc <__ascii_mbtowc+0x6>
 800daca:	a901      	add	r1, sp, #4
 800dacc:	b142      	cbz	r2, 800dae0 <__ascii_mbtowc+0x1a>
 800dace:	b14b      	cbz	r3, 800dae4 <__ascii_mbtowc+0x1e>
 800dad0:	7813      	ldrb	r3, [r2, #0]
 800dad2:	600b      	str	r3, [r1, #0]
 800dad4:	7812      	ldrb	r2, [r2, #0]
 800dad6:	1e10      	subs	r0, r2, #0
 800dad8:	bf18      	it	ne
 800dada:	2001      	movne	r0, #1
 800dadc:	b002      	add	sp, #8
 800dade:	4770      	bx	lr
 800dae0:	4610      	mov	r0, r2
 800dae2:	e7fb      	b.n	800dadc <__ascii_mbtowc+0x16>
 800dae4:	f06f 0001 	mvn.w	r0, #1
 800dae8:	e7f8      	b.n	800dadc <__ascii_mbtowc+0x16>

0800daea <_realloc_r>:
 800daea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daee:	4680      	mov	r8, r0
 800daf0:	4614      	mov	r4, r2
 800daf2:	460e      	mov	r6, r1
 800daf4:	b921      	cbnz	r1, 800db00 <_realloc_r+0x16>
 800daf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafa:	4611      	mov	r1, r2
 800dafc:	f7fd baec 	b.w	800b0d8 <_malloc_r>
 800db00:	b92a      	cbnz	r2, 800db0e <_realloc_r+0x24>
 800db02:	f7fd fa75 	bl	800aff0 <_free_r>
 800db06:	4625      	mov	r5, r4
 800db08:	4628      	mov	r0, r5
 800db0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db0e:	f000 f8b6 	bl	800dc7e <_malloc_usable_size_r>
 800db12:	4284      	cmp	r4, r0
 800db14:	4607      	mov	r7, r0
 800db16:	d802      	bhi.n	800db1e <_realloc_r+0x34>
 800db18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db1c:	d812      	bhi.n	800db44 <_realloc_r+0x5a>
 800db1e:	4621      	mov	r1, r4
 800db20:	4640      	mov	r0, r8
 800db22:	f7fd fad9 	bl	800b0d8 <_malloc_r>
 800db26:	4605      	mov	r5, r0
 800db28:	2800      	cmp	r0, #0
 800db2a:	d0ed      	beq.n	800db08 <_realloc_r+0x1e>
 800db2c:	42bc      	cmp	r4, r7
 800db2e:	4622      	mov	r2, r4
 800db30:	4631      	mov	r1, r6
 800db32:	bf28      	it	cs
 800db34:	463a      	movcs	r2, r7
 800db36:	f7fc fc50 	bl	800a3da <memcpy>
 800db3a:	4631      	mov	r1, r6
 800db3c:	4640      	mov	r0, r8
 800db3e:	f7fd fa57 	bl	800aff0 <_free_r>
 800db42:	e7e1      	b.n	800db08 <_realloc_r+0x1e>
 800db44:	4635      	mov	r5, r6
 800db46:	e7df      	b.n	800db08 <_realloc_r+0x1e>

0800db48 <_strtoul_l.constprop.0>:
 800db48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db4c:	4f36      	ldr	r7, [pc, #216]	; (800dc28 <_strtoul_l.constprop.0+0xe0>)
 800db4e:	4686      	mov	lr, r0
 800db50:	460d      	mov	r5, r1
 800db52:	4628      	mov	r0, r5
 800db54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db58:	5d3e      	ldrb	r6, [r7, r4]
 800db5a:	f016 0608 	ands.w	r6, r6, #8
 800db5e:	d1f8      	bne.n	800db52 <_strtoul_l.constprop.0+0xa>
 800db60:	2c2d      	cmp	r4, #45	; 0x2d
 800db62:	d130      	bne.n	800dbc6 <_strtoul_l.constprop.0+0x7e>
 800db64:	782c      	ldrb	r4, [r5, #0]
 800db66:	2601      	movs	r6, #1
 800db68:	1c85      	adds	r5, r0, #2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d057      	beq.n	800dc1e <_strtoul_l.constprop.0+0xd6>
 800db6e:	2b10      	cmp	r3, #16
 800db70:	d109      	bne.n	800db86 <_strtoul_l.constprop.0+0x3e>
 800db72:	2c30      	cmp	r4, #48	; 0x30
 800db74:	d107      	bne.n	800db86 <_strtoul_l.constprop.0+0x3e>
 800db76:	7828      	ldrb	r0, [r5, #0]
 800db78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db7c:	2858      	cmp	r0, #88	; 0x58
 800db7e:	d149      	bne.n	800dc14 <_strtoul_l.constprop.0+0xcc>
 800db80:	786c      	ldrb	r4, [r5, #1]
 800db82:	2310      	movs	r3, #16
 800db84:	3502      	adds	r5, #2
 800db86:	f04f 38ff 	mov.w	r8, #4294967295
 800db8a:	2700      	movs	r7, #0
 800db8c:	fbb8 f8f3 	udiv	r8, r8, r3
 800db90:	fb03 f908 	mul.w	r9, r3, r8
 800db94:	ea6f 0909 	mvn.w	r9, r9
 800db98:	4638      	mov	r0, r7
 800db9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db9e:	f1bc 0f09 	cmp.w	ip, #9
 800dba2:	d815      	bhi.n	800dbd0 <_strtoul_l.constprop.0+0x88>
 800dba4:	4664      	mov	r4, ip
 800dba6:	42a3      	cmp	r3, r4
 800dba8:	dd23      	ble.n	800dbf2 <_strtoul_l.constprop.0+0xaa>
 800dbaa:	f1b7 3fff 	cmp.w	r7, #4294967295
 800dbae:	d007      	beq.n	800dbc0 <_strtoul_l.constprop.0+0x78>
 800dbb0:	4580      	cmp	r8, r0
 800dbb2:	d31b      	bcc.n	800dbec <_strtoul_l.constprop.0+0xa4>
 800dbb4:	d101      	bne.n	800dbba <_strtoul_l.constprop.0+0x72>
 800dbb6:	45a1      	cmp	r9, r4
 800dbb8:	db18      	blt.n	800dbec <_strtoul_l.constprop.0+0xa4>
 800dbba:	fb00 4003 	mla	r0, r0, r3, r4
 800dbbe:	2701      	movs	r7, #1
 800dbc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbc4:	e7e9      	b.n	800db9a <_strtoul_l.constprop.0+0x52>
 800dbc6:	2c2b      	cmp	r4, #43	; 0x2b
 800dbc8:	bf04      	itt	eq
 800dbca:	782c      	ldrbeq	r4, [r5, #0]
 800dbcc:	1c85      	addeq	r5, r0, #2
 800dbce:	e7cc      	b.n	800db6a <_strtoul_l.constprop.0+0x22>
 800dbd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dbd4:	f1bc 0f19 	cmp.w	ip, #25
 800dbd8:	d801      	bhi.n	800dbde <_strtoul_l.constprop.0+0x96>
 800dbda:	3c37      	subs	r4, #55	; 0x37
 800dbdc:	e7e3      	b.n	800dba6 <_strtoul_l.constprop.0+0x5e>
 800dbde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dbe2:	f1bc 0f19 	cmp.w	ip, #25
 800dbe6:	d804      	bhi.n	800dbf2 <_strtoul_l.constprop.0+0xaa>
 800dbe8:	3c57      	subs	r4, #87	; 0x57
 800dbea:	e7dc      	b.n	800dba6 <_strtoul_l.constprop.0+0x5e>
 800dbec:	f04f 37ff 	mov.w	r7, #4294967295
 800dbf0:	e7e6      	b.n	800dbc0 <_strtoul_l.constprop.0+0x78>
 800dbf2:	1c7b      	adds	r3, r7, #1
 800dbf4:	d106      	bne.n	800dc04 <_strtoul_l.constprop.0+0xbc>
 800dbf6:	2322      	movs	r3, #34	; 0x22
 800dbf8:	f8ce 3000 	str.w	r3, [lr]
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	b932      	cbnz	r2, 800dc0e <_strtoul_l.constprop.0+0xc6>
 800dc00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc04:	b106      	cbz	r6, 800dc08 <_strtoul_l.constprop.0+0xc0>
 800dc06:	4240      	negs	r0, r0
 800dc08:	2a00      	cmp	r2, #0
 800dc0a:	d0f9      	beq.n	800dc00 <_strtoul_l.constprop.0+0xb8>
 800dc0c:	b107      	cbz	r7, 800dc10 <_strtoul_l.constprop.0+0xc8>
 800dc0e:	1e69      	subs	r1, r5, #1
 800dc10:	6011      	str	r1, [r2, #0]
 800dc12:	e7f5      	b.n	800dc00 <_strtoul_l.constprop.0+0xb8>
 800dc14:	2430      	movs	r4, #48	; 0x30
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1b5      	bne.n	800db86 <_strtoul_l.constprop.0+0x3e>
 800dc1a:	2308      	movs	r3, #8
 800dc1c:	e7b3      	b.n	800db86 <_strtoul_l.constprop.0+0x3e>
 800dc1e:	2c30      	cmp	r4, #48	; 0x30
 800dc20:	d0a9      	beq.n	800db76 <_strtoul_l.constprop.0+0x2e>
 800dc22:	230a      	movs	r3, #10
 800dc24:	e7af      	b.n	800db86 <_strtoul_l.constprop.0+0x3e>
 800dc26:	bf00      	nop
 800dc28:	0800ed69 	.word	0x0800ed69

0800dc2c <_strtoul_r>:
 800dc2c:	f7ff bf8c 	b.w	800db48 <_strtoul_l.constprop.0>

0800dc30 <__ascii_wctomb>:
 800dc30:	b149      	cbz	r1, 800dc46 <__ascii_wctomb+0x16>
 800dc32:	2aff      	cmp	r2, #255	; 0xff
 800dc34:	bf85      	ittet	hi
 800dc36:	238a      	movhi	r3, #138	; 0x8a
 800dc38:	6003      	strhi	r3, [r0, #0]
 800dc3a:	700a      	strbls	r2, [r1, #0]
 800dc3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc40:	bf98      	it	ls
 800dc42:	2001      	movls	r0, #1
 800dc44:	4770      	bx	lr
 800dc46:	4608      	mov	r0, r1
 800dc48:	4770      	bx	lr
	...

0800dc4c <fiprintf>:
 800dc4c:	b40e      	push	{r1, r2, r3}
 800dc4e:	b503      	push	{r0, r1, lr}
 800dc50:	4601      	mov	r1, r0
 800dc52:	ab03      	add	r3, sp, #12
 800dc54:	4805      	ldr	r0, [pc, #20]	; (800dc6c <fiprintf+0x20>)
 800dc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc5a:	6800      	ldr	r0, [r0, #0]
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	f000 f83f 	bl	800dce0 <_vfiprintf_r>
 800dc62:	b002      	add	sp, #8
 800dc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc68:	b003      	add	sp, #12
 800dc6a:	4770      	bx	lr
 800dc6c:	20000078 	.word	0x20000078

0800dc70 <abort>:
 800dc70:	b508      	push	{r3, lr}
 800dc72:	2006      	movs	r0, #6
 800dc74:	f000 fa0c 	bl	800e090 <raise>
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f7f5 f9df 	bl	800303c <_exit>

0800dc7e <_malloc_usable_size_r>:
 800dc7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc82:	1f18      	subs	r0, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	bfbc      	itt	lt
 800dc88:	580b      	ldrlt	r3, [r1, r0]
 800dc8a:	18c0      	addlt	r0, r0, r3
 800dc8c:	4770      	bx	lr

0800dc8e <__sfputc_r>:
 800dc8e:	6893      	ldr	r3, [r2, #8]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	b410      	push	{r4}
 800dc96:	6093      	str	r3, [r2, #8]
 800dc98:	da08      	bge.n	800dcac <__sfputc_r+0x1e>
 800dc9a:	6994      	ldr	r4, [r2, #24]
 800dc9c:	42a3      	cmp	r3, r4
 800dc9e:	db01      	blt.n	800dca4 <__sfputc_r+0x16>
 800dca0:	290a      	cmp	r1, #10
 800dca2:	d103      	bne.n	800dcac <__sfputc_r+0x1e>
 800dca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dca8:	f000 b934 	b.w	800df14 <__swbuf_r>
 800dcac:	6813      	ldr	r3, [r2, #0]
 800dcae:	1c58      	adds	r0, r3, #1
 800dcb0:	6010      	str	r0, [r2, #0]
 800dcb2:	7019      	strb	r1, [r3, #0]
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <__sfputs_r>:
 800dcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	4614      	mov	r4, r2
 800dcc4:	18d5      	adds	r5, r2, r3
 800dcc6:	42ac      	cmp	r4, r5
 800dcc8:	d101      	bne.n	800dcce <__sfputs_r+0x12>
 800dcca:	2000      	movs	r0, #0
 800dccc:	e007      	b.n	800dcde <__sfputs_r+0x22>
 800dcce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd2:	463a      	mov	r2, r7
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f7ff ffda 	bl	800dc8e <__sfputc_r>
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	d1f3      	bne.n	800dcc6 <__sfputs_r+0xa>
 800dcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dce0 <_vfiprintf_r>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	460d      	mov	r5, r1
 800dce6:	b09d      	sub	sp, #116	; 0x74
 800dce8:	4614      	mov	r4, r2
 800dcea:	4698      	mov	r8, r3
 800dcec:	4606      	mov	r6, r0
 800dcee:	b118      	cbz	r0, 800dcf8 <_vfiprintf_r+0x18>
 800dcf0:	6a03      	ldr	r3, [r0, #32]
 800dcf2:	b90b      	cbnz	r3, 800dcf8 <_vfiprintf_r+0x18>
 800dcf4:	f7fc f9f6 	bl	800a0e4 <__sinit>
 800dcf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcfa:	07d9      	lsls	r1, r3, #31
 800dcfc:	d405      	bmi.n	800dd0a <_vfiprintf_r+0x2a>
 800dcfe:	89ab      	ldrh	r3, [r5, #12]
 800dd00:	059a      	lsls	r2, r3, #22
 800dd02:	d402      	bmi.n	800dd0a <_vfiprintf_r+0x2a>
 800dd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd06:	f7fc fb66 	bl	800a3d6 <__retarget_lock_acquire_recursive>
 800dd0a:	89ab      	ldrh	r3, [r5, #12]
 800dd0c:	071b      	lsls	r3, r3, #28
 800dd0e:	d501      	bpl.n	800dd14 <_vfiprintf_r+0x34>
 800dd10:	692b      	ldr	r3, [r5, #16]
 800dd12:	b99b      	cbnz	r3, 800dd3c <_vfiprintf_r+0x5c>
 800dd14:	4629      	mov	r1, r5
 800dd16:	4630      	mov	r0, r6
 800dd18:	f000 f93a 	bl	800df90 <__swsetup_r>
 800dd1c:	b170      	cbz	r0, 800dd3c <_vfiprintf_r+0x5c>
 800dd1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd20:	07dc      	lsls	r4, r3, #31
 800dd22:	d504      	bpl.n	800dd2e <_vfiprintf_r+0x4e>
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295
 800dd28:	b01d      	add	sp, #116	; 0x74
 800dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2e:	89ab      	ldrh	r3, [r5, #12]
 800dd30:	0598      	lsls	r0, r3, #22
 800dd32:	d4f7      	bmi.n	800dd24 <_vfiprintf_r+0x44>
 800dd34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd36:	f7fc fb4f 	bl	800a3d8 <__retarget_lock_release_recursive>
 800dd3a:	e7f3      	b.n	800dd24 <_vfiprintf_r+0x44>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd40:	2320      	movs	r3, #32
 800dd42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd46:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd4a:	2330      	movs	r3, #48	; 0x30
 800dd4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800df00 <_vfiprintf_r+0x220>
 800dd50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd54:	f04f 0901 	mov.w	r9, #1
 800dd58:	4623      	mov	r3, r4
 800dd5a:	469a      	mov	sl, r3
 800dd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd60:	b10a      	cbz	r2, 800dd66 <_vfiprintf_r+0x86>
 800dd62:	2a25      	cmp	r2, #37	; 0x25
 800dd64:	d1f9      	bne.n	800dd5a <_vfiprintf_r+0x7a>
 800dd66:	ebba 0b04 	subs.w	fp, sl, r4
 800dd6a:	d00b      	beq.n	800dd84 <_vfiprintf_r+0xa4>
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	4622      	mov	r2, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	4630      	mov	r0, r6
 800dd74:	f7ff ffa2 	bl	800dcbc <__sfputs_r>
 800dd78:	3001      	adds	r0, #1
 800dd7a:	f000 80a9 	beq.w	800ded0 <_vfiprintf_r+0x1f0>
 800dd7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd80:	445a      	add	r2, fp
 800dd82:	9209      	str	r2, [sp, #36]	; 0x24
 800dd84:	f89a 3000 	ldrb.w	r3, [sl]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 80a1 	beq.w	800ded0 <_vfiprintf_r+0x1f0>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f04f 32ff 	mov.w	r2, #4294967295
 800dd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd98:	f10a 0a01 	add.w	sl, sl, #1
 800dd9c:	9304      	str	r3, [sp, #16]
 800dd9e:	9307      	str	r3, [sp, #28]
 800dda0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dda4:	931a      	str	r3, [sp, #104]	; 0x68
 800dda6:	4654      	mov	r4, sl
 800dda8:	2205      	movs	r2, #5
 800ddaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddae:	4854      	ldr	r0, [pc, #336]	; (800df00 <_vfiprintf_r+0x220>)
 800ddb0:	f7f2 fa46 	bl	8000240 <memchr>
 800ddb4:	9a04      	ldr	r2, [sp, #16]
 800ddb6:	b9d8      	cbnz	r0, 800ddf0 <_vfiprintf_r+0x110>
 800ddb8:	06d1      	lsls	r1, r2, #27
 800ddba:	bf44      	itt	mi
 800ddbc:	2320      	movmi	r3, #32
 800ddbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddc2:	0713      	lsls	r3, r2, #28
 800ddc4:	bf44      	itt	mi
 800ddc6:	232b      	movmi	r3, #43	; 0x2b
 800ddc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddcc:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd2:	d015      	beq.n	800de00 <_vfiprintf_r+0x120>
 800ddd4:	9a07      	ldr	r2, [sp, #28]
 800ddd6:	4654      	mov	r4, sl
 800ddd8:	2000      	movs	r0, #0
 800ddda:	f04f 0c0a 	mov.w	ip, #10
 800ddde:	4621      	mov	r1, r4
 800dde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dde4:	3b30      	subs	r3, #48	; 0x30
 800dde6:	2b09      	cmp	r3, #9
 800dde8:	d94d      	bls.n	800de86 <_vfiprintf_r+0x1a6>
 800ddea:	b1b0      	cbz	r0, 800de1a <_vfiprintf_r+0x13a>
 800ddec:	9207      	str	r2, [sp, #28]
 800ddee:	e014      	b.n	800de1a <_vfiprintf_r+0x13a>
 800ddf0:	eba0 0308 	sub.w	r3, r0, r8
 800ddf4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	9304      	str	r3, [sp, #16]
 800ddfc:	46a2      	mov	sl, r4
 800ddfe:	e7d2      	b.n	800dda6 <_vfiprintf_r+0xc6>
 800de00:	9b03      	ldr	r3, [sp, #12]
 800de02:	1d19      	adds	r1, r3, #4
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	9103      	str	r1, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	bfbb      	ittet	lt
 800de0c:	425b      	neglt	r3, r3
 800de0e:	f042 0202 	orrlt.w	r2, r2, #2
 800de12:	9307      	strge	r3, [sp, #28]
 800de14:	9307      	strlt	r3, [sp, #28]
 800de16:	bfb8      	it	lt
 800de18:	9204      	strlt	r2, [sp, #16]
 800de1a:	7823      	ldrb	r3, [r4, #0]
 800de1c:	2b2e      	cmp	r3, #46	; 0x2e
 800de1e:	d10c      	bne.n	800de3a <_vfiprintf_r+0x15a>
 800de20:	7863      	ldrb	r3, [r4, #1]
 800de22:	2b2a      	cmp	r3, #42	; 0x2a
 800de24:	d134      	bne.n	800de90 <_vfiprintf_r+0x1b0>
 800de26:	9b03      	ldr	r3, [sp, #12]
 800de28:	1d1a      	adds	r2, r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	9203      	str	r2, [sp, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfb8      	it	lt
 800de32:	f04f 33ff 	movlt.w	r3, #4294967295
 800de36:	3402      	adds	r4, #2
 800de38:	9305      	str	r3, [sp, #20]
 800de3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800df10 <_vfiprintf_r+0x230>
 800de3e:	7821      	ldrb	r1, [r4, #0]
 800de40:	2203      	movs	r2, #3
 800de42:	4650      	mov	r0, sl
 800de44:	f7f2 f9fc 	bl	8000240 <memchr>
 800de48:	b138      	cbz	r0, 800de5a <_vfiprintf_r+0x17a>
 800de4a:	9b04      	ldr	r3, [sp, #16]
 800de4c:	eba0 000a 	sub.w	r0, r0, sl
 800de50:	2240      	movs	r2, #64	; 0x40
 800de52:	4082      	lsls	r2, r0
 800de54:	4313      	orrs	r3, r2
 800de56:	3401      	adds	r4, #1
 800de58:	9304      	str	r3, [sp, #16]
 800de5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5e:	4829      	ldr	r0, [pc, #164]	; (800df04 <_vfiprintf_r+0x224>)
 800de60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de64:	2206      	movs	r2, #6
 800de66:	f7f2 f9eb 	bl	8000240 <memchr>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d03f      	beq.n	800deee <_vfiprintf_r+0x20e>
 800de6e:	4b26      	ldr	r3, [pc, #152]	; (800df08 <_vfiprintf_r+0x228>)
 800de70:	bb1b      	cbnz	r3, 800deba <_vfiprintf_r+0x1da>
 800de72:	9b03      	ldr	r3, [sp, #12]
 800de74:	3307      	adds	r3, #7
 800de76:	f023 0307 	bic.w	r3, r3, #7
 800de7a:	3308      	adds	r3, #8
 800de7c:	9303      	str	r3, [sp, #12]
 800de7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de80:	443b      	add	r3, r7
 800de82:	9309      	str	r3, [sp, #36]	; 0x24
 800de84:	e768      	b.n	800dd58 <_vfiprintf_r+0x78>
 800de86:	fb0c 3202 	mla	r2, ip, r2, r3
 800de8a:	460c      	mov	r4, r1
 800de8c:	2001      	movs	r0, #1
 800de8e:	e7a6      	b.n	800ddde <_vfiprintf_r+0xfe>
 800de90:	2300      	movs	r3, #0
 800de92:	3401      	adds	r4, #1
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	4619      	mov	r1, r3
 800de98:	f04f 0c0a 	mov.w	ip, #10
 800de9c:	4620      	mov	r0, r4
 800de9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dea2:	3a30      	subs	r2, #48	; 0x30
 800dea4:	2a09      	cmp	r2, #9
 800dea6:	d903      	bls.n	800deb0 <_vfiprintf_r+0x1d0>
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d0c6      	beq.n	800de3a <_vfiprintf_r+0x15a>
 800deac:	9105      	str	r1, [sp, #20]
 800deae:	e7c4      	b.n	800de3a <_vfiprintf_r+0x15a>
 800deb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800deb4:	4604      	mov	r4, r0
 800deb6:	2301      	movs	r3, #1
 800deb8:	e7f0      	b.n	800de9c <_vfiprintf_r+0x1bc>
 800deba:	ab03      	add	r3, sp, #12
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	462a      	mov	r2, r5
 800dec0:	4b12      	ldr	r3, [pc, #72]	; (800df0c <_vfiprintf_r+0x22c>)
 800dec2:	a904      	add	r1, sp, #16
 800dec4:	4630      	mov	r0, r6
 800dec6:	f7fb fad3 	bl	8009470 <_printf_float>
 800deca:	4607      	mov	r7, r0
 800decc:	1c78      	adds	r0, r7, #1
 800dece:	d1d6      	bne.n	800de7e <_vfiprintf_r+0x19e>
 800ded0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ded2:	07d9      	lsls	r1, r3, #31
 800ded4:	d405      	bmi.n	800dee2 <_vfiprintf_r+0x202>
 800ded6:	89ab      	ldrh	r3, [r5, #12]
 800ded8:	059a      	lsls	r2, r3, #22
 800deda:	d402      	bmi.n	800dee2 <_vfiprintf_r+0x202>
 800dedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dede:	f7fc fa7b 	bl	800a3d8 <__retarget_lock_release_recursive>
 800dee2:	89ab      	ldrh	r3, [r5, #12]
 800dee4:	065b      	lsls	r3, r3, #25
 800dee6:	f53f af1d 	bmi.w	800dd24 <_vfiprintf_r+0x44>
 800deea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deec:	e71c      	b.n	800dd28 <_vfiprintf_r+0x48>
 800deee:	ab03      	add	r3, sp, #12
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	462a      	mov	r2, r5
 800def4:	4b05      	ldr	r3, [pc, #20]	; (800df0c <_vfiprintf_r+0x22c>)
 800def6:	a904      	add	r1, sp, #16
 800def8:	4630      	mov	r0, r6
 800defa:	f7fb fd41 	bl	8009980 <_printf_i>
 800defe:	e7e4      	b.n	800deca <_vfiprintf_r+0x1ea>
 800df00:	0800ee69 	.word	0x0800ee69
 800df04:	0800ee73 	.word	0x0800ee73
 800df08:	08009471 	.word	0x08009471
 800df0c:	0800dcbd 	.word	0x0800dcbd
 800df10:	0800ee6f 	.word	0x0800ee6f

0800df14 <__swbuf_r>:
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df16:	460e      	mov	r6, r1
 800df18:	4614      	mov	r4, r2
 800df1a:	4605      	mov	r5, r0
 800df1c:	b118      	cbz	r0, 800df26 <__swbuf_r+0x12>
 800df1e:	6a03      	ldr	r3, [r0, #32]
 800df20:	b90b      	cbnz	r3, 800df26 <__swbuf_r+0x12>
 800df22:	f7fc f8df 	bl	800a0e4 <__sinit>
 800df26:	69a3      	ldr	r3, [r4, #24]
 800df28:	60a3      	str	r3, [r4, #8]
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	071a      	lsls	r2, r3, #28
 800df2e:	d525      	bpl.n	800df7c <__swbuf_r+0x68>
 800df30:	6923      	ldr	r3, [r4, #16]
 800df32:	b31b      	cbz	r3, 800df7c <__swbuf_r+0x68>
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	6922      	ldr	r2, [r4, #16]
 800df38:	1a98      	subs	r0, r3, r2
 800df3a:	6963      	ldr	r3, [r4, #20]
 800df3c:	b2f6      	uxtb	r6, r6
 800df3e:	4283      	cmp	r3, r0
 800df40:	4637      	mov	r7, r6
 800df42:	dc04      	bgt.n	800df4e <__swbuf_r+0x3a>
 800df44:	4621      	mov	r1, r4
 800df46:	4628      	mov	r0, r5
 800df48:	f7ff f950 	bl	800d1ec <_fflush_r>
 800df4c:	b9e0      	cbnz	r0, 800df88 <__swbuf_r+0x74>
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	3b01      	subs	r3, #1
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	6022      	str	r2, [r4, #0]
 800df5a:	701e      	strb	r6, [r3, #0]
 800df5c:	6962      	ldr	r2, [r4, #20]
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	429a      	cmp	r2, r3
 800df62:	d004      	beq.n	800df6e <__swbuf_r+0x5a>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	07db      	lsls	r3, r3, #31
 800df68:	d506      	bpl.n	800df78 <__swbuf_r+0x64>
 800df6a:	2e0a      	cmp	r6, #10
 800df6c:	d104      	bne.n	800df78 <__swbuf_r+0x64>
 800df6e:	4621      	mov	r1, r4
 800df70:	4628      	mov	r0, r5
 800df72:	f7ff f93b 	bl	800d1ec <_fflush_r>
 800df76:	b938      	cbnz	r0, 800df88 <__swbuf_r+0x74>
 800df78:	4638      	mov	r0, r7
 800df7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df7c:	4621      	mov	r1, r4
 800df7e:	4628      	mov	r0, r5
 800df80:	f000 f806 	bl	800df90 <__swsetup_r>
 800df84:	2800      	cmp	r0, #0
 800df86:	d0d5      	beq.n	800df34 <__swbuf_r+0x20>
 800df88:	f04f 37ff 	mov.w	r7, #4294967295
 800df8c:	e7f4      	b.n	800df78 <__swbuf_r+0x64>
	...

0800df90 <__swsetup_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4b2a      	ldr	r3, [pc, #168]	; (800e03c <__swsetup_r+0xac>)
 800df94:	4605      	mov	r5, r0
 800df96:	6818      	ldr	r0, [r3, #0]
 800df98:	460c      	mov	r4, r1
 800df9a:	b118      	cbz	r0, 800dfa4 <__swsetup_r+0x14>
 800df9c:	6a03      	ldr	r3, [r0, #32]
 800df9e:	b90b      	cbnz	r3, 800dfa4 <__swsetup_r+0x14>
 800dfa0:	f7fc f8a0 	bl	800a0e4 <__sinit>
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfaa:	0718      	lsls	r0, r3, #28
 800dfac:	d422      	bmi.n	800dff4 <__swsetup_r+0x64>
 800dfae:	06d9      	lsls	r1, r3, #27
 800dfb0:	d407      	bmi.n	800dfc2 <__swsetup_r+0x32>
 800dfb2:	2309      	movs	r3, #9
 800dfb4:	602b      	str	r3, [r5, #0]
 800dfb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfba:	81a3      	strh	r3, [r4, #12]
 800dfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc0:	e034      	b.n	800e02c <__swsetup_r+0x9c>
 800dfc2:	0758      	lsls	r0, r3, #29
 800dfc4:	d512      	bpl.n	800dfec <__swsetup_r+0x5c>
 800dfc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfc8:	b141      	cbz	r1, 800dfdc <__swsetup_r+0x4c>
 800dfca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfce:	4299      	cmp	r1, r3
 800dfd0:	d002      	beq.n	800dfd8 <__swsetup_r+0x48>
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f7fd f80c 	bl	800aff0 <_free_r>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	6363      	str	r3, [r4, #52]	; 0x34
 800dfdc:	89a3      	ldrh	r3, [r4, #12]
 800dfde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfe2:	81a3      	strh	r3, [r4, #12]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	6063      	str	r3, [r4, #4]
 800dfe8:	6923      	ldr	r3, [r4, #16]
 800dfea:	6023      	str	r3, [r4, #0]
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	f043 0308 	orr.w	r3, r3, #8
 800dff2:	81a3      	strh	r3, [r4, #12]
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	b94b      	cbnz	r3, 800e00c <__swsetup_r+0x7c>
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e002:	d003      	beq.n	800e00c <__swsetup_r+0x7c>
 800e004:	4621      	mov	r1, r4
 800e006:	4628      	mov	r0, r5
 800e008:	f000 f884 	bl	800e114 <__smakebuf_r>
 800e00c:	89a0      	ldrh	r0, [r4, #12]
 800e00e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e012:	f010 0301 	ands.w	r3, r0, #1
 800e016:	d00a      	beq.n	800e02e <__swsetup_r+0x9e>
 800e018:	2300      	movs	r3, #0
 800e01a:	60a3      	str	r3, [r4, #8]
 800e01c:	6963      	ldr	r3, [r4, #20]
 800e01e:	425b      	negs	r3, r3
 800e020:	61a3      	str	r3, [r4, #24]
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	b943      	cbnz	r3, 800e038 <__swsetup_r+0xa8>
 800e026:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e02a:	d1c4      	bne.n	800dfb6 <__swsetup_r+0x26>
 800e02c:	bd38      	pop	{r3, r4, r5, pc}
 800e02e:	0781      	lsls	r1, r0, #30
 800e030:	bf58      	it	pl
 800e032:	6963      	ldrpl	r3, [r4, #20]
 800e034:	60a3      	str	r3, [r4, #8]
 800e036:	e7f4      	b.n	800e022 <__swsetup_r+0x92>
 800e038:	2000      	movs	r0, #0
 800e03a:	e7f7      	b.n	800e02c <__swsetup_r+0x9c>
 800e03c:	20000078 	.word	0x20000078

0800e040 <_raise_r>:
 800e040:	291f      	cmp	r1, #31
 800e042:	b538      	push	{r3, r4, r5, lr}
 800e044:	4604      	mov	r4, r0
 800e046:	460d      	mov	r5, r1
 800e048:	d904      	bls.n	800e054 <_raise_r+0x14>
 800e04a:	2316      	movs	r3, #22
 800e04c:	6003      	str	r3, [r0, #0]
 800e04e:	f04f 30ff 	mov.w	r0, #4294967295
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e056:	b112      	cbz	r2, 800e05e <_raise_r+0x1e>
 800e058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e05c:	b94b      	cbnz	r3, 800e072 <_raise_r+0x32>
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 f830 	bl	800e0c4 <_getpid_r>
 800e064:	462a      	mov	r2, r5
 800e066:	4601      	mov	r1, r0
 800e068:	4620      	mov	r0, r4
 800e06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e06e:	f000 b817 	b.w	800e0a0 <_kill_r>
 800e072:	2b01      	cmp	r3, #1
 800e074:	d00a      	beq.n	800e08c <_raise_r+0x4c>
 800e076:	1c59      	adds	r1, r3, #1
 800e078:	d103      	bne.n	800e082 <_raise_r+0x42>
 800e07a:	2316      	movs	r3, #22
 800e07c:	6003      	str	r3, [r0, #0]
 800e07e:	2001      	movs	r0, #1
 800e080:	e7e7      	b.n	800e052 <_raise_r+0x12>
 800e082:	2400      	movs	r4, #0
 800e084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e088:	4628      	mov	r0, r5
 800e08a:	4798      	blx	r3
 800e08c:	2000      	movs	r0, #0
 800e08e:	e7e0      	b.n	800e052 <_raise_r+0x12>

0800e090 <raise>:
 800e090:	4b02      	ldr	r3, [pc, #8]	; (800e09c <raise+0xc>)
 800e092:	4601      	mov	r1, r0
 800e094:	6818      	ldr	r0, [r3, #0]
 800e096:	f7ff bfd3 	b.w	800e040 <_raise_r>
 800e09a:	bf00      	nop
 800e09c:	20000078 	.word	0x20000078

0800e0a0 <_kill_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d07      	ldr	r5, [pc, #28]	; (800e0c0 <_kill_r+0x20>)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	4608      	mov	r0, r1
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	602b      	str	r3, [r5, #0]
 800e0ae:	f7f4 ffb5 	bl	800301c <_kill>
 800e0b2:	1c43      	adds	r3, r0, #1
 800e0b4:	d102      	bne.n	800e0bc <_kill_r+0x1c>
 800e0b6:	682b      	ldr	r3, [r5, #0]
 800e0b8:	b103      	cbz	r3, 800e0bc <_kill_r+0x1c>
 800e0ba:	6023      	str	r3, [r4, #0]
 800e0bc:	bd38      	pop	{r3, r4, r5, pc}
 800e0be:	bf00      	nop
 800e0c0:	200011ec 	.word	0x200011ec

0800e0c4 <_getpid_r>:
 800e0c4:	f7f4 bfa2 	b.w	800300c <_getpid>

0800e0c8 <__swhatbuf_r>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d0:	2900      	cmp	r1, #0
 800e0d2:	b096      	sub	sp, #88	; 0x58
 800e0d4:	4615      	mov	r5, r2
 800e0d6:	461e      	mov	r6, r3
 800e0d8:	da0d      	bge.n	800e0f6 <__swhatbuf_r+0x2e>
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e0e0:	f04f 0100 	mov.w	r1, #0
 800e0e4:	bf0c      	ite	eq
 800e0e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e0ea:	2340      	movne	r3, #64	; 0x40
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	6031      	str	r1, [r6, #0]
 800e0f0:	602b      	str	r3, [r5, #0]
 800e0f2:	b016      	add	sp, #88	; 0x58
 800e0f4:	bd70      	pop	{r4, r5, r6, pc}
 800e0f6:	466a      	mov	r2, sp
 800e0f8:	f000 f848 	bl	800e18c <_fstat_r>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	dbec      	blt.n	800e0da <__swhatbuf_r+0x12>
 800e100:	9901      	ldr	r1, [sp, #4]
 800e102:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e106:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e10a:	4259      	negs	r1, r3
 800e10c:	4159      	adcs	r1, r3
 800e10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e112:	e7eb      	b.n	800e0ec <__swhatbuf_r+0x24>

0800e114 <__smakebuf_r>:
 800e114:	898b      	ldrh	r3, [r1, #12]
 800e116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e118:	079d      	lsls	r5, r3, #30
 800e11a:	4606      	mov	r6, r0
 800e11c:	460c      	mov	r4, r1
 800e11e:	d507      	bpl.n	800e130 <__smakebuf_r+0x1c>
 800e120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	6123      	str	r3, [r4, #16]
 800e128:	2301      	movs	r3, #1
 800e12a:	6163      	str	r3, [r4, #20]
 800e12c:	b002      	add	sp, #8
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	ab01      	add	r3, sp, #4
 800e132:	466a      	mov	r2, sp
 800e134:	f7ff ffc8 	bl	800e0c8 <__swhatbuf_r>
 800e138:	9900      	ldr	r1, [sp, #0]
 800e13a:	4605      	mov	r5, r0
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7fc ffcb 	bl	800b0d8 <_malloc_r>
 800e142:	b948      	cbnz	r0, 800e158 <__smakebuf_r+0x44>
 800e144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e148:	059a      	lsls	r2, r3, #22
 800e14a:	d4ef      	bmi.n	800e12c <__smakebuf_r+0x18>
 800e14c:	f023 0303 	bic.w	r3, r3, #3
 800e150:	f043 0302 	orr.w	r3, r3, #2
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	e7e3      	b.n	800e120 <__smakebuf_r+0xc>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	6020      	str	r0, [r4, #0]
 800e15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e160:	81a3      	strh	r3, [r4, #12]
 800e162:	9b00      	ldr	r3, [sp, #0]
 800e164:	6163      	str	r3, [r4, #20]
 800e166:	9b01      	ldr	r3, [sp, #4]
 800e168:	6120      	str	r0, [r4, #16]
 800e16a:	b15b      	cbz	r3, 800e184 <__smakebuf_r+0x70>
 800e16c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e170:	4630      	mov	r0, r6
 800e172:	f000 f81d 	bl	800e1b0 <_isatty_r>
 800e176:	b128      	cbz	r0, 800e184 <__smakebuf_r+0x70>
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	f023 0303 	bic.w	r3, r3, #3
 800e17e:	f043 0301 	orr.w	r3, r3, #1
 800e182:	81a3      	strh	r3, [r4, #12]
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	431d      	orrs	r5, r3
 800e188:	81a5      	strh	r5, [r4, #12]
 800e18a:	e7cf      	b.n	800e12c <__smakebuf_r+0x18>

0800e18c <_fstat_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d07      	ldr	r5, [pc, #28]	; (800e1ac <_fstat_r+0x20>)
 800e190:	2300      	movs	r3, #0
 800e192:	4604      	mov	r4, r0
 800e194:	4608      	mov	r0, r1
 800e196:	4611      	mov	r1, r2
 800e198:	602b      	str	r3, [r5, #0]
 800e19a:	f7f4 ff9e 	bl	80030da <_fstat>
 800e19e:	1c43      	adds	r3, r0, #1
 800e1a0:	d102      	bne.n	800e1a8 <_fstat_r+0x1c>
 800e1a2:	682b      	ldr	r3, [r5, #0]
 800e1a4:	b103      	cbz	r3, 800e1a8 <_fstat_r+0x1c>
 800e1a6:	6023      	str	r3, [r4, #0]
 800e1a8:	bd38      	pop	{r3, r4, r5, pc}
 800e1aa:	bf00      	nop
 800e1ac:	200011ec 	.word	0x200011ec

0800e1b0 <_isatty_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d06      	ldr	r5, [pc, #24]	; (800e1cc <_isatty_r+0x1c>)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	f7f4 ff9d 	bl	80030fa <_isatty>
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	d102      	bne.n	800e1ca <_isatty_r+0x1a>
 800e1c4:	682b      	ldr	r3, [r5, #0]
 800e1c6:	b103      	cbz	r3, 800e1ca <_isatty_r+0x1a>
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	200011ec 	.word	0x200011ec

0800e1d0 <round>:
 800e1d0:	ee10 1a90 	vmov	r1, s1
 800e1d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e1d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e1dc:	2b13      	cmp	r3, #19
 800e1de:	b510      	push	{r4, lr}
 800e1e0:	ee10 4a10 	vmov	r4, s0
 800e1e4:	dc19      	bgt.n	800e21a <round+0x4a>
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da09      	bge.n	800e1fe <round+0x2e>
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e1f0:	d103      	bne.n	800e1fa <round+0x2a>
 800e1f2:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e1f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	e025      	b.n	800e24a <round+0x7a>
 800e1fe:	4815      	ldr	r0, [pc, #84]	; (800e254 <round+0x84>)
 800e200:	4118      	asrs	r0, r3
 800e202:	ea01 0200 	and.w	r2, r1, r0
 800e206:	4322      	orrs	r2, r4
 800e208:	d00e      	beq.n	800e228 <round+0x58>
 800e20a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e20e:	fa42 f303 	asr.w	r3, r2, r3
 800e212:	440b      	add	r3, r1
 800e214:	ea23 0100 	bic.w	r1, r3, r0
 800e218:	e7ef      	b.n	800e1fa <round+0x2a>
 800e21a:	2b33      	cmp	r3, #51	; 0x33
 800e21c:	dd05      	ble.n	800e22a <round+0x5a>
 800e21e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e222:	d101      	bne.n	800e228 <round+0x58>
 800e224:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e228:	bd10      	pop	{r4, pc}
 800e22a:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295
 800e232:	40c2      	lsrs	r2, r0
 800e234:	4222      	tst	r2, r4
 800e236:	d0f7      	beq.n	800e228 <round+0x58>
 800e238:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800e23c:	2001      	movs	r0, #1
 800e23e:	4098      	lsls	r0, r3
 800e240:	1900      	adds	r0, r0, r4
 800e242:	bf28      	it	cs
 800e244:	3101      	addcs	r1, #1
 800e246:	ea20 0002 	bic.w	r0, r0, r2
 800e24a:	460b      	mov	r3, r1
 800e24c:	4602      	mov	r2, r0
 800e24e:	ec43 2b10 	vmov	d0, r2, r3
 800e252:	e7e9      	b.n	800e228 <round+0x58>
 800e254:	000fffff 	.word	0x000fffff

0800e258 <trunc>:
 800e258:	ee10 1a90 	vmov	r1, s1
 800e25c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e260:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e264:	2b13      	cmp	r3, #19
 800e266:	b530      	push	{r4, r5, lr}
 800e268:	dc0d      	bgt.n	800e286 <trunc+0x2e>
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	bfa7      	ittee	ge
 800e26e:	4811      	ldrge	r0, [pc, #68]	; (800e2b4 <trunc+0x5c>)
 800e270:	4118      	asrge	r0, r3
 800e272:	2200      	movlt	r2, #0
 800e274:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 800e278:	bfa4      	itt	ge
 800e27a:	2200      	movge	r2, #0
 800e27c:	ea00 0301 	andge.w	r3, r0, r1
 800e280:	ec43 2b10 	vmov	d0, r2, r3
 800e284:	bd30      	pop	{r4, r5, pc}
 800e286:	2b33      	cmp	r3, #51	; 0x33
 800e288:	dd05      	ble.n	800e296 <trunc+0x3e>
 800e28a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e28e:	d1f9      	bne.n	800e284 <trunc+0x2c>
 800e290:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e294:	e7f6      	b.n	800e284 <trunc+0x2c>
 800e296:	f04f 33ff 	mov.w	r3, #4294967295
 800e29a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e29e:	fa23 f202 	lsr.w	r2, r3, r2
 800e2a2:	ee10 3a10 	vmov	r3, s0
 800e2a6:	ee10 5a90 	vmov	r5, s1
 800e2aa:	ea23 0402 	bic.w	r4, r3, r2
 800e2ae:	ec45 4b10 	vmov	d0, r4, r5
 800e2b2:	e7e7      	b.n	800e284 <trunc+0x2c>
 800e2b4:	fff00000 	.word	0xfff00000

0800e2b8 <_init>:
 800e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ba:	bf00      	nop
 800e2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2be:	bc08      	pop	{r3}
 800e2c0:	469e      	mov	lr, r3
 800e2c2:	4770      	bx	lr

0800e2c4 <_fini>:
 800e2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c6:	bf00      	nop
 800e2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ca:	bc08      	pop	{r3}
 800e2cc:	469e      	mov	lr, r3
 800e2ce:	4770      	bx	lr
